
smartCalculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000351c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000130  00800060  0000351c  00003590  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002520  00000000  00000000  000036c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000123a  00000000  00000000  00005be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000220  00000000  00000000  00006e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000274  00000000  00000000  0000703a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b7c  00000000  00000000  000072ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017dc  00000000  00000000  00009e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015ba  00000000  00000000  0000b606  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000240  00000000  00000000  0000cbc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035c  00000000  00000000  0000ce00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d22  00000000  00000000  0000d15c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000de7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e1       	ldi	r30, 0x1C	; 28
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <main>
      7a:	0c 94 8c 1a 	jmp	0x3518	; 0x3518 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 18 05 	call	0xa30	; 0xa30 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b4 02 	call	0x568	; 0x568 <__subsf3>
      ae:	0e 94 d6 05 	call	0xbac	; 0xbac <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 d6 05 	call	0xbac	; 0xbac <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <__floatdisf>:
      da:	a4 e0       	ldi	r26, 0x04	; 4
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 57 1a 	jmp	0x34ae	; 0x34ae <__prologue_saves__+0x4>
      e6:	49 01       	movw	r8, r18
      e8:	5a 01       	movw	r10, r20
      ea:	6b 01       	movw	r12, r22
      ec:	7c 01       	movw	r14, r24
      ee:	d5 01       	movw	r26, r10
      f0:	c4 01       	movw	r24, r8
      f2:	9c 01       	movw	r18, r24
      f4:	ad 01       	movw	r20, r26
      f6:	55 0f       	add	r21, r21
      f8:	22 0b       	sbc	r18, r18
      fa:	32 2f       	mov	r19, r18
      fc:	a9 01       	movw	r20, r18
      fe:	88 15       	cp	r24, r8
     100:	99 f4       	brne	.+38     	; 0x128 <__floatdisf+0x4e>
     102:	99 15       	cp	r25, r9
     104:	89 f4       	brne	.+34     	; 0x128 <__floatdisf+0x4e>
     106:	aa 15       	cp	r26, r10
     108:	79 f4       	brne	.+30     	; 0x128 <__floatdisf+0x4e>
     10a:	bb 15       	cp	r27, r11
     10c:	69 f4       	brne	.+26     	; 0x128 <__floatdisf+0x4e>
     10e:	2c 15       	cp	r18, r12
     110:	59 f4       	brne	.+22     	; 0x128 <__floatdisf+0x4e>
     112:	2d 15       	cp	r18, r13
     114:	49 f4       	brne	.+18     	; 0x128 <__floatdisf+0x4e>
     116:	2e 15       	cp	r18, r14
     118:	39 f4       	brne	.+14     	; 0x128 <__floatdisf+0x4e>
     11a:	2f 15       	cp	r18, r15
     11c:	29 f4       	brne	.+10     	; 0x128 <__floatdisf+0x4e>
     11e:	c5 01       	movw	r24, r10
     120:	b4 01       	movw	r22, r8
     122:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__floatsisf>
     126:	d0 c0       	rjmp	.+416    	; 0x2c8 <__floatdisf+0x1ee>
     128:	94 01       	movw	r18, r8
     12a:	a5 01       	movw	r20, r10
     12c:	b6 01       	movw	r22, r12
     12e:	c7 01       	movw	r24, r14
     130:	00 e2       	ldi	r16, 0x20	; 32
     132:	0e 94 a3 06 	call	0xd46	; 0xd46 <__ashrdi3>
     136:	c9 01       	movw	r24, r18
     138:	a4 2f       	mov	r26, r20
     13a:	b5 2f       	mov	r27, r21
     13c:	b7 ff       	sbrs	r27, 7
     13e:	07 c0       	rjmp	.+14     	; 0x14e <__floatdisf+0x74>
     140:	b0 95       	com	r27
     142:	a0 95       	com	r26
     144:	90 95       	com	r25
     146:	81 95       	neg	r24
     148:	9f 4f       	sbci	r25, 0xFF	; 255
     14a:	af 4f       	sbci	r26, 0xFF	; 255
     14c:	bf 4f       	sbci	r27, 0xFF	; 255
     14e:	80 30       	cpi	r24, 0x00	; 0
     150:	20 e0       	ldi	r18, 0x00	; 0
     152:	92 07       	cpc	r25, r18
     154:	21 e0       	ldi	r18, 0x01	; 1
     156:	a2 07       	cpc	r26, r18
     158:	20 e0       	ldi	r18, 0x00	; 0
     15a:	b2 07       	cpc	r27, r18
     15c:	80 f4       	brcc	.+32     	; 0x17e <__floatdisf+0xa4>
     15e:	8f 3f       	cpi	r24, 0xFF	; 255
     160:	91 05       	cpc	r25, r1
     162:	a1 05       	cpc	r26, r1
     164:	b1 05       	cpc	r27, r1
     166:	31 f0       	breq	.+12     	; 0x174 <__floatdisf+0x9a>
     168:	28 f0       	brcs	.+10     	; 0x174 <__floatdisf+0x9a>
     16a:	28 e0       	ldi	r18, 0x08	; 8
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	40 e0       	ldi	r20, 0x00	; 0
     170:	50 e0       	ldi	r21, 0x00	; 0
     172:	16 c0       	rjmp	.+44     	; 0x1a0 <__floatdisf+0xc6>
     174:	20 e0       	ldi	r18, 0x00	; 0
     176:	30 e0       	ldi	r19, 0x00	; 0
     178:	40 e0       	ldi	r20, 0x00	; 0
     17a:	50 e0       	ldi	r21, 0x00	; 0
     17c:	11 c0       	rjmp	.+34     	; 0x1a0 <__floatdisf+0xc6>
     17e:	80 30       	cpi	r24, 0x00	; 0
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	93 07       	cpc	r25, r19
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	a3 07       	cpc	r26, r19
     188:	31 e0       	ldi	r19, 0x01	; 1
     18a:	b3 07       	cpc	r27, r19
     18c:	28 f0       	brcs	.+10     	; 0x198 <__floatdisf+0xbe>
     18e:	28 e1       	ldi	r18, 0x18	; 24
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	40 e0       	ldi	r20, 0x00	; 0
     194:	50 e0       	ldi	r21, 0x00	; 0
     196:	04 c0       	rjmp	.+8      	; 0x1a0 <__floatdisf+0xc6>
     198:	20 e1       	ldi	r18, 0x10	; 16
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	50 e0       	ldi	r21, 0x00	; 0
     1a0:	60 e2       	ldi	r22, 0x20	; 32
     1a2:	46 2e       	mov	r4, r22
     1a4:	51 2c       	mov	r5, r1
     1a6:	61 2c       	mov	r6, r1
     1a8:	71 2c       	mov	r7, r1
     1aa:	42 1a       	sub	r4, r18
     1ac:	53 0a       	sbc	r5, r19
     1ae:	64 0a       	sbc	r6, r20
     1b0:	75 0a       	sbc	r7, r21
     1b2:	04 c0       	rjmp	.+8      	; 0x1bc <__floatdisf+0xe2>
     1b4:	b6 95       	lsr	r27
     1b6:	a7 95       	ror	r26
     1b8:	97 95       	ror	r25
     1ba:	87 95       	ror	r24
     1bc:	2a 95       	dec	r18
     1be:	d2 f7       	brpl	.-12     	; 0x1b4 <__floatdisf+0xda>
     1c0:	fc 01       	movw	r30, r24
     1c2:	e8 59       	subi	r30, 0x98	; 152
     1c4:	ff 4f       	sbci	r31, 0xFF	; 255
     1c6:	80 81       	ld	r24, Z
     1c8:	48 1a       	sub	r4, r24
     1ca:	51 08       	sbc	r5, r1
     1cc:	61 08       	sbc	r6, r1
     1ce:	71 08       	sbc	r7, r1
     1d0:	41 14       	cp	r4, r1
     1d2:	51 04       	cpc	r5, r1
     1d4:	61 04       	cpc	r6, r1
     1d6:	71 04       	cpc	r7, r1
     1d8:	29 f4       	brne	.+10     	; 0x1e4 <__floatdisf+0x10a>
     1da:	60 e0       	ldi	r22, 0x00	; 0
     1dc:	70 e0       	ldi	r23, 0x00	; 0
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	9f ed       	ldi	r25, 0xDF	; 223
     1e2:	72 c0       	rjmp	.+228    	; 0x2c8 <__floatdisf+0x1ee>
     1e4:	81 e2       	ldi	r24, 0x21	; 33
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	a0 e0       	ldi	r26, 0x00	; 0
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	84 19       	sub	r24, r4
     1ee:	95 09       	sbc	r25, r5
     1f0:	a6 09       	sbc	r26, r6
     1f2:	b7 09       	sbc	r27, r7
     1f4:	89 83       	std	Y+1, r24	; 0x01
     1f6:	9a 83       	std	Y+2, r25	; 0x02
     1f8:	ab 83       	std	Y+3, r26	; 0x03
     1fa:	bc 83       	std	Y+4, r27	; 0x04
     1fc:	19 81       	ldd	r17, Y+1	; 0x01
     1fe:	94 01       	movw	r18, r8
     200:	a5 01       	movw	r20, r10
     202:	b6 01       	movw	r22, r12
     204:	c7 01       	movw	r24, r14
     206:	01 2f       	mov	r16, r17
     208:	0e 94 a3 06 	call	0xd46	; 0xd46 <__ashrdi3>
     20c:	c9 01       	movw	r24, r18
     20e:	da 01       	movw	r26, r20
     210:	2c 01       	movw	r4, r24
     212:	3d 01       	movw	r6, r26
     214:	80 e2       	ldi	r24, 0x20	; 32
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	a9 81       	ldd	r26, Y+1	; 0x01
     21a:	ba 81       	ldd	r27, Y+2	; 0x02
     21c:	8a 1b       	sub	r24, r26
     21e:	9b 0b       	sbc	r25, r27
     220:	a5 01       	movw	r20, r10
     222:	94 01       	movw	r18, r8
     224:	04 c0       	rjmp	.+8      	; 0x22e <__floatdisf+0x154>
     226:	22 0f       	add	r18, r18
     228:	33 1f       	adc	r19, r19
     22a:	44 1f       	adc	r20, r20
     22c:	55 1f       	adc	r21, r21
     22e:	8a 95       	dec	r24
     230:	d2 f7       	brpl	.-12     	; 0x226 <__floatdisf+0x14c>
     232:	21 15       	cp	r18, r1
     234:	31 05       	cpc	r19, r1
     236:	41 05       	cpc	r20, r1
     238:	51 05       	cpc	r21, r1
     23a:	41 f0       	breq	.+16     	; 0x24c <__floatdisf+0x172>
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	a0 e0       	ldi	r26, 0x00	; 0
     242:	b0 e0       	ldi	r27, 0x00	; 0
     244:	48 2a       	or	r4, r24
     246:	59 2a       	or	r5, r25
     248:	6a 2a       	or	r6, r26
     24a:	7b 2a       	or	r7, r27
     24c:	29 81       	ldd	r18, Y+1	; 0x01
     24e:	3a 81       	ldd	r19, Y+2	; 0x02
     250:	4b 81       	ldd	r20, Y+3	; 0x03
     252:	5c 81       	ldd	r21, Y+4	; 0x04
     254:	20 32       	cpi	r18, 0x20	; 32
     256:	31 05       	cpc	r19, r1
     258:	41 05       	cpc	r20, r1
     25a:	51 05       	cpc	r21, r1
     25c:	59 f4       	brne	.+22     	; 0x274 <__floatdisf+0x19a>
     25e:	0f 2e       	mov	r0, r31
     260:	f0 e0       	ldi	r31, 0x00	; 0
     262:	cf 2e       	mov	r12, r31
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	df 2e       	mov	r13, r31
     268:	f0 e8       	ldi	r31, 0x80	; 128
     26a:	ef 2e       	mov	r14, r31
     26c:	ff e4       	ldi	r31, 0x4F	; 79
     26e:	ff 2e       	mov	r15, r31
     270:	f0 2d       	mov	r31, r0
     272:	22 c0       	rjmp	.+68     	; 0x2b8 <__floatdisf+0x1de>
     274:	89 81       	ldd	r24, Y+1	; 0x01
     276:	9a 81       	ldd	r25, Y+2	; 0x02
     278:	ab 81       	ldd	r26, Y+3	; 0x03
     27a:	bc 81       	ldd	r27, Y+4	; 0x04
     27c:	4f 97       	sbiw	r24, 0x1f	; 31
     27e:	a1 05       	cpc	r26, r1
     280:	b1 05       	cpc	r27, r1
     282:	59 f4       	brne	.+22     	; 0x29a <__floatdisf+0x1c0>
     284:	0f 2e       	mov	r0, r31
     286:	f0 e0       	ldi	r31, 0x00	; 0
     288:	cf 2e       	mov	r12, r31
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	df 2e       	mov	r13, r31
     28e:	f0 e0       	ldi	r31, 0x00	; 0
     290:	ef 2e       	mov	r14, r31
     292:	ff e4       	ldi	r31, 0x4F	; 79
     294:	ff 2e       	mov	r15, r31
     296:	f0 2d       	mov	r31, r0
     298:	0f c0       	rjmp	.+30     	; 0x2b8 <__floatdisf+0x1de>
     29a:	61 e0       	ldi	r22, 0x01	; 1
     29c:	70 e0       	ldi	r23, 0x00	; 0
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	04 c0       	rjmp	.+8      	; 0x2ac <__floatdisf+0x1d2>
     2a4:	66 0f       	add	r22, r22
     2a6:	77 1f       	adc	r23, r23
     2a8:	88 1f       	adc	r24, r24
     2aa:	99 1f       	adc	r25, r25
     2ac:	1a 95       	dec	r17
     2ae:	d2 f7       	brpl	.-12     	; 0x2a4 <__floatdisf+0x1ca>
     2b0:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__floatsisf>
     2b4:	6b 01       	movw	r12, r22
     2b6:	7c 01       	movw	r14, r24
     2b8:	c3 01       	movw	r24, r6
     2ba:	b2 01       	movw	r22, r4
     2bc:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__floatsisf>
     2c0:	a7 01       	movw	r20, r14
     2c2:	96 01       	movw	r18, r12
     2c4:	0e 94 12 03 	call	0x624	; 0x624 <__mulsf3>
     2c8:	24 96       	adiw	r28, 0x04	; 4
     2ca:	e0 e1       	ldi	r30, 0x10	; 16
     2cc:	0c 94 73 1a 	jmp	0x34e6	; 0x34e6 <__epilogue_restores__+0x4>

000002d0 <_fpadd_parts>:
     2d0:	a0 e0       	ldi	r26, 0x00	; 0
     2d2:	b0 e0       	ldi	r27, 0x00	; 0
     2d4:	ee e6       	ldi	r30, 0x6E	; 110
     2d6:	f1 e0       	ldi	r31, 0x01	; 1
     2d8:	0c 94 55 1a 	jmp	0x34aa	; 0x34aa <__prologue_saves__>
     2dc:	dc 01       	movw	r26, r24
     2de:	2b 01       	movw	r4, r22
     2e0:	fa 01       	movw	r30, r20
     2e2:	9c 91       	ld	r25, X
     2e4:	92 30       	cpi	r25, 0x02	; 2
     2e6:	08 f4       	brcc	.+2      	; 0x2ea <_fpadd_parts+0x1a>
     2e8:	39 c1       	rjmp	.+626    	; 0x55c <_fpadd_parts+0x28c>
     2ea:	eb 01       	movw	r28, r22
     2ec:	88 81       	ld	r24, Y
     2ee:	82 30       	cpi	r24, 0x02	; 2
     2f0:	08 f4       	brcc	.+2      	; 0x2f4 <_fpadd_parts+0x24>
     2f2:	33 c1       	rjmp	.+614    	; 0x55a <_fpadd_parts+0x28a>
     2f4:	94 30       	cpi	r25, 0x04	; 4
     2f6:	69 f4       	brne	.+26     	; 0x312 <_fpadd_parts+0x42>
     2f8:	84 30       	cpi	r24, 0x04	; 4
     2fa:	09 f0       	breq	.+2      	; 0x2fe <_fpadd_parts+0x2e>
     2fc:	2f c1       	rjmp	.+606    	; 0x55c <_fpadd_parts+0x28c>
     2fe:	11 96       	adiw	r26, 0x01	; 1
     300:	9c 91       	ld	r25, X
     302:	11 97       	sbiw	r26, 0x01	; 1
     304:	89 81       	ldd	r24, Y+1	; 0x01
     306:	98 17       	cp	r25, r24
     308:	09 f4       	brne	.+2      	; 0x30c <_fpadd_parts+0x3c>
     30a:	28 c1       	rjmp	.+592    	; 0x55c <_fpadd_parts+0x28c>
     30c:	a0 e6       	ldi	r26, 0x60	; 96
     30e:	b0 e0       	ldi	r27, 0x00	; 0
     310:	25 c1       	rjmp	.+586    	; 0x55c <_fpadd_parts+0x28c>
     312:	84 30       	cpi	r24, 0x04	; 4
     314:	09 f4       	brne	.+2      	; 0x318 <_fpadd_parts+0x48>
     316:	21 c1       	rjmp	.+578    	; 0x55a <_fpadd_parts+0x28a>
     318:	82 30       	cpi	r24, 0x02	; 2
     31a:	a9 f4       	brne	.+42     	; 0x346 <_fpadd_parts+0x76>
     31c:	92 30       	cpi	r25, 0x02	; 2
     31e:	09 f0       	breq	.+2      	; 0x322 <_fpadd_parts+0x52>
     320:	1d c1       	rjmp	.+570    	; 0x55c <_fpadd_parts+0x28c>
     322:	9a 01       	movw	r18, r20
     324:	ad 01       	movw	r20, r26
     326:	88 e0       	ldi	r24, 0x08	; 8
     328:	ea 01       	movw	r28, r20
     32a:	09 90       	ld	r0, Y+
     32c:	ae 01       	movw	r20, r28
     32e:	e9 01       	movw	r28, r18
     330:	09 92       	st	Y+, r0
     332:	9e 01       	movw	r18, r28
     334:	81 50       	subi	r24, 0x01	; 1
     336:	c1 f7       	brne	.-16     	; 0x328 <_fpadd_parts+0x58>
     338:	e2 01       	movw	r28, r4
     33a:	89 81       	ldd	r24, Y+1	; 0x01
     33c:	11 96       	adiw	r26, 0x01	; 1
     33e:	9c 91       	ld	r25, X
     340:	89 23       	and	r24, r25
     342:	81 83       	std	Z+1, r24	; 0x01
     344:	08 c1       	rjmp	.+528    	; 0x556 <_fpadd_parts+0x286>
     346:	92 30       	cpi	r25, 0x02	; 2
     348:	09 f4       	brne	.+2      	; 0x34c <_fpadd_parts+0x7c>
     34a:	07 c1       	rjmp	.+526    	; 0x55a <_fpadd_parts+0x28a>
     34c:	12 96       	adiw	r26, 0x02	; 2
     34e:	2d 90       	ld	r2, X+
     350:	3c 90       	ld	r3, X
     352:	13 97       	sbiw	r26, 0x03	; 3
     354:	eb 01       	movw	r28, r22
     356:	8a 81       	ldd	r24, Y+2	; 0x02
     358:	9b 81       	ldd	r25, Y+3	; 0x03
     35a:	14 96       	adiw	r26, 0x04	; 4
     35c:	ad 90       	ld	r10, X+
     35e:	bd 90       	ld	r11, X+
     360:	cd 90       	ld	r12, X+
     362:	dc 90       	ld	r13, X
     364:	17 97       	sbiw	r26, 0x07	; 7
     366:	ec 80       	ldd	r14, Y+4	; 0x04
     368:	fd 80       	ldd	r15, Y+5	; 0x05
     36a:	0e 81       	ldd	r16, Y+6	; 0x06
     36c:	1f 81       	ldd	r17, Y+7	; 0x07
     36e:	91 01       	movw	r18, r2
     370:	28 1b       	sub	r18, r24
     372:	39 0b       	sbc	r19, r25
     374:	b9 01       	movw	r22, r18
     376:	37 ff       	sbrs	r19, 7
     378:	04 c0       	rjmp	.+8      	; 0x382 <_fpadd_parts+0xb2>
     37a:	66 27       	eor	r22, r22
     37c:	77 27       	eor	r23, r23
     37e:	62 1b       	sub	r22, r18
     380:	73 0b       	sbc	r23, r19
     382:	60 32       	cpi	r22, 0x20	; 32
     384:	71 05       	cpc	r23, r1
     386:	0c f0       	brlt	.+2      	; 0x38a <_fpadd_parts+0xba>
     388:	61 c0       	rjmp	.+194    	; 0x44c <_fpadd_parts+0x17c>
     38a:	12 16       	cp	r1, r18
     38c:	13 06       	cpc	r1, r19
     38e:	6c f5       	brge	.+90     	; 0x3ea <_fpadd_parts+0x11a>
     390:	37 01       	movw	r6, r14
     392:	48 01       	movw	r8, r16
     394:	06 2e       	mov	r0, r22
     396:	04 c0       	rjmp	.+8      	; 0x3a0 <_fpadd_parts+0xd0>
     398:	96 94       	lsr	r9
     39a:	87 94       	ror	r8
     39c:	77 94       	ror	r7
     39e:	67 94       	ror	r6
     3a0:	0a 94       	dec	r0
     3a2:	d2 f7       	brpl	.-12     	; 0x398 <_fpadd_parts+0xc8>
     3a4:	21 e0       	ldi	r18, 0x01	; 1
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	40 e0       	ldi	r20, 0x00	; 0
     3aa:	50 e0       	ldi	r21, 0x00	; 0
     3ac:	04 c0       	rjmp	.+8      	; 0x3b6 <_fpadd_parts+0xe6>
     3ae:	22 0f       	add	r18, r18
     3b0:	33 1f       	adc	r19, r19
     3b2:	44 1f       	adc	r20, r20
     3b4:	55 1f       	adc	r21, r21
     3b6:	6a 95       	dec	r22
     3b8:	d2 f7       	brpl	.-12     	; 0x3ae <_fpadd_parts+0xde>
     3ba:	21 50       	subi	r18, 0x01	; 1
     3bc:	30 40       	sbci	r19, 0x00	; 0
     3be:	40 40       	sbci	r20, 0x00	; 0
     3c0:	50 40       	sbci	r21, 0x00	; 0
     3c2:	2e 21       	and	r18, r14
     3c4:	3f 21       	and	r19, r15
     3c6:	40 23       	and	r20, r16
     3c8:	51 23       	and	r21, r17
     3ca:	21 15       	cp	r18, r1
     3cc:	31 05       	cpc	r19, r1
     3ce:	41 05       	cpc	r20, r1
     3d0:	51 05       	cpc	r21, r1
     3d2:	21 f0       	breq	.+8      	; 0x3dc <_fpadd_parts+0x10c>
     3d4:	21 e0       	ldi	r18, 0x01	; 1
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	40 e0       	ldi	r20, 0x00	; 0
     3da:	50 e0       	ldi	r21, 0x00	; 0
     3dc:	79 01       	movw	r14, r18
     3de:	8a 01       	movw	r16, r20
     3e0:	e6 28       	or	r14, r6
     3e2:	f7 28       	or	r15, r7
     3e4:	08 29       	or	r16, r8
     3e6:	19 29       	or	r17, r9
     3e8:	3c c0       	rjmp	.+120    	; 0x462 <_fpadd_parts+0x192>
     3ea:	23 2b       	or	r18, r19
     3ec:	d1 f1       	breq	.+116    	; 0x462 <_fpadd_parts+0x192>
     3ee:	26 0e       	add	r2, r22
     3f0:	37 1e       	adc	r3, r23
     3f2:	35 01       	movw	r6, r10
     3f4:	46 01       	movw	r8, r12
     3f6:	06 2e       	mov	r0, r22
     3f8:	04 c0       	rjmp	.+8      	; 0x402 <_fpadd_parts+0x132>
     3fa:	96 94       	lsr	r9
     3fc:	87 94       	ror	r8
     3fe:	77 94       	ror	r7
     400:	67 94       	ror	r6
     402:	0a 94       	dec	r0
     404:	d2 f7       	brpl	.-12     	; 0x3fa <_fpadd_parts+0x12a>
     406:	21 e0       	ldi	r18, 0x01	; 1
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	40 e0       	ldi	r20, 0x00	; 0
     40c:	50 e0       	ldi	r21, 0x00	; 0
     40e:	04 c0       	rjmp	.+8      	; 0x418 <_fpadd_parts+0x148>
     410:	22 0f       	add	r18, r18
     412:	33 1f       	adc	r19, r19
     414:	44 1f       	adc	r20, r20
     416:	55 1f       	adc	r21, r21
     418:	6a 95       	dec	r22
     41a:	d2 f7       	brpl	.-12     	; 0x410 <_fpadd_parts+0x140>
     41c:	21 50       	subi	r18, 0x01	; 1
     41e:	30 40       	sbci	r19, 0x00	; 0
     420:	40 40       	sbci	r20, 0x00	; 0
     422:	50 40       	sbci	r21, 0x00	; 0
     424:	2a 21       	and	r18, r10
     426:	3b 21       	and	r19, r11
     428:	4c 21       	and	r20, r12
     42a:	5d 21       	and	r21, r13
     42c:	21 15       	cp	r18, r1
     42e:	31 05       	cpc	r19, r1
     430:	41 05       	cpc	r20, r1
     432:	51 05       	cpc	r21, r1
     434:	21 f0       	breq	.+8      	; 0x43e <_fpadd_parts+0x16e>
     436:	21 e0       	ldi	r18, 0x01	; 1
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	40 e0       	ldi	r20, 0x00	; 0
     43c:	50 e0       	ldi	r21, 0x00	; 0
     43e:	59 01       	movw	r10, r18
     440:	6a 01       	movw	r12, r20
     442:	a6 28       	or	r10, r6
     444:	b7 28       	or	r11, r7
     446:	c8 28       	or	r12, r8
     448:	d9 28       	or	r13, r9
     44a:	0b c0       	rjmp	.+22     	; 0x462 <_fpadd_parts+0x192>
     44c:	82 15       	cp	r24, r2
     44e:	93 05       	cpc	r25, r3
     450:	2c f0       	brlt	.+10     	; 0x45c <_fpadd_parts+0x18c>
     452:	1c 01       	movw	r2, r24
     454:	aa 24       	eor	r10, r10
     456:	bb 24       	eor	r11, r11
     458:	65 01       	movw	r12, r10
     45a:	03 c0       	rjmp	.+6      	; 0x462 <_fpadd_parts+0x192>
     45c:	ee 24       	eor	r14, r14
     45e:	ff 24       	eor	r15, r15
     460:	87 01       	movw	r16, r14
     462:	11 96       	adiw	r26, 0x01	; 1
     464:	9c 91       	ld	r25, X
     466:	d2 01       	movw	r26, r4
     468:	11 96       	adiw	r26, 0x01	; 1
     46a:	8c 91       	ld	r24, X
     46c:	98 17       	cp	r25, r24
     46e:	09 f4       	brne	.+2      	; 0x472 <_fpadd_parts+0x1a2>
     470:	45 c0       	rjmp	.+138    	; 0x4fc <_fpadd_parts+0x22c>
     472:	99 23       	and	r25, r25
     474:	39 f0       	breq	.+14     	; 0x484 <_fpadd_parts+0x1b4>
     476:	a8 01       	movw	r20, r16
     478:	97 01       	movw	r18, r14
     47a:	2a 19       	sub	r18, r10
     47c:	3b 09       	sbc	r19, r11
     47e:	4c 09       	sbc	r20, r12
     480:	5d 09       	sbc	r21, r13
     482:	06 c0       	rjmp	.+12     	; 0x490 <_fpadd_parts+0x1c0>
     484:	a6 01       	movw	r20, r12
     486:	95 01       	movw	r18, r10
     488:	2e 19       	sub	r18, r14
     48a:	3f 09       	sbc	r19, r15
     48c:	40 0b       	sbc	r20, r16
     48e:	51 0b       	sbc	r21, r17
     490:	57 fd       	sbrc	r21, 7
     492:	08 c0       	rjmp	.+16     	; 0x4a4 <_fpadd_parts+0x1d4>
     494:	11 82       	std	Z+1, r1	; 0x01
     496:	33 82       	std	Z+3, r3	; 0x03
     498:	22 82       	std	Z+2, r2	; 0x02
     49a:	24 83       	std	Z+4, r18	; 0x04
     49c:	35 83       	std	Z+5, r19	; 0x05
     49e:	46 83       	std	Z+6, r20	; 0x06
     4a0:	57 83       	std	Z+7, r21	; 0x07
     4a2:	1d c0       	rjmp	.+58     	; 0x4de <_fpadd_parts+0x20e>
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	81 83       	std	Z+1, r24	; 0x01
     4a8:	33 82       	std	Z+3, r3	; 0x03
     4aa:	22 82       	std	Z+2, r2	; 0x02
     4ac:	88 27       	eor	r24, r24
     4ae:	99 27       	eor	r25, r25
     4b0:	dc 01       	movw	r26, r24
     4b2:	82 1b       	sub	r24, r18
     4b4:	93 0b       	sbc	r25, r19
     4b6:	a4 0b       	sbc	r26, r20
     4b8:	b5 0b       	sbc	r27, r21
     4ba:	84 83       	std	Z+4, r24	; 0x04
     4bc:	95 83       	std	Z+5, r25	; 0x05
     4be:	a6 83       	std	Z+6, r26	; 0x06
     4c0:	b7 83       	std	Z+7, r27	; 0x07
     4c2:	0d c0       	rjmp	.+26     	; 0x4de <_fpadd_parts+0x20e>
     4c4:	22 0f       	add	r18, r18
     4c6:	33 1f       	adc	r19, r19
     4c8:	44 1f       	adc	r20, r20
     4ca:	55 1f       	adc	r21, r21
     4cc:	24 83       	std	Z+4, r18	; 0x04
     4ce:	35 83       	std	Z+5, r19	; 0x05
     4d0:	46 83       	std	Z+6, r20	; 0x06
     4d2:	57 83       	std	Z+7, r21	; 0x07
     4d4:	82 81       	ldd	r24, Z+2	; 0x02
     4d6:	93 81       	ldd	r25, Z+3	; 0x03
     4d8:	01 97       	sbiw	r24, 0x01	; 1
     4da:	93 83       	std	Z+3, r25	; 0x03
     4dc:	82 83       	std	Z+2, r24	; 0x02
     4de:	24 81       	ldd	r18, Z+4	; 0x04
     4e0:	35 81       	ldd	r19, Z+5	; 0x05
     4e2:	46 81       	ldd	r20, Z+6	; 0x06
     4e4:	57 81       	ldd	r21, Z+7	; 0x07
     4e6:	da 01       	movw	r26, r20
     4e8:	c9 01       	movw	r24, r18
     4ea:	01 97       	sbiw	r24, 0x01	; 1
     4ec:	a1 09       	sbc	r26, r1
     4ee:	b1 09       	sbc	r27, r1
     4f0:	8f 5f       	subi	r24, 0xFF	; 255
     4f2:	9f 4f       	sbci	r25, 0xFF	; 255
     4f4:	af 4f       	sbci	r26, 0xFF	; 255
     4f6:	bf 43       	sbci	r27, 0x3F	; 63
     4f8:	28 f3       	brcs	.-54     	; 0x4c4 <_fpadd_parts+0x1f4>
     4fa:	0b c0       	rjmp	.+22     	; 0x512 <_fpadd_parts+0x242>
     4fc:	91 83       	std	Z+1, r25	; 0x01
     4fe:	33 82       	std	Z+3, r3	; 0x03
     500:	22 82       	std	Z+2, r2	; 0x02
     502:	ea 0c       	add	r14, r10
     504:	fb 1c       	adc	r15, r11
     506:	0c 1d       	adc	r16, r12
     508:	1d 1d       	adc	r17, r13
     50a:	e4 82       	std	Z+4, r14	; 0x04
     50c:	f5 82       	std	Z+5, r15	; 0x05
     50e:	06 83       	std	Z+6, r16	; 0x06
     510:	17 83       	std	Z+7, r17	; 0x07
     512:	83 e0       	ldi	r24, 0x03	; 3
     514:	80 83       	st	Z, r24
     516:	24 81       	ldd	r18, Z+4	; 0x04
     518:	35 81       	ldd	r19, Z+5	; 0x05
     51a:	46 81       	ldd	r20, Z+6	; 0x06
     51c:	57 81       	ldd	r21, Z+7	; 0x07
     51e:	57 ff       	sbrs	r21, 7
     520:	1a c0       	rjmp	.+52     	; 0x556 <_fpadd_parts+0x286>
     522:	c9 01       	movw	r24, r18
     524:	aa 27       	eor	r26, r26
     526:	97 fd       	sbrc	r25, 7
     528:	a0 95       	com	r26
     52a:	ba 2f       	mov	r27, r26
     52c:	81 70       	andi	r24, 0x01	; 1
     52e:	90 70       	andi	r25, 0x00	; 0
     530:	a0 70       	andi	r26, 0x00	; 0
     532:	b0 70       	andi	r27, 0x00	; 0
     534:	56 95       	lsr	r21
     536:	47 95       	ror	r20
     538:	37 95       	ror	r19
     53a:	27 95       	ror	r18
     53c:	82 2b       	or	r24, r18
     53e:	93 2b       	or	r25, r19
     540:	a4 2b       	or	r26, r20
     542:	b5 2b       	or	r27, r21
     544:	84 83       	std	Z+4, r24	; 0x04
     546:	95 83       	std	Z+5, r25	; 0x05
     548:	a6 83       	std	Z+6, r26	; 0x06
     54a:	b7 83       	std	Z+7, r27	; 0x07
     54c:	82 81       	ldd	r24, Z+2	; 0x02
     54e:	93 81       	ldd	r25, Z+3	; 0x03
     550:	01 96       	adiw	r24, 0x01	; 1
     552:	93 83       	std	Z+3, r25	; 0x03
     554:	82 83       	std	Z+2, r24	; 0x02
     556:	df 01       	movw	r26, r30
     558:	01 c0       	rjmp	.+2      	; 0x55c <_fpadd_parts+0x28c>
     55a:	d2 01       	movw	r26, r4
     55c:	cd 01       	movw	r24, r26
     55e:	cd b7       	in	r28, 0x3d	; 61
     560:	de b7       	in	r29, 0x3e	; 62
     562:	e2 e1       	ldi	r30, 0x12	; 18
     564:	0c 94 71 1a 	jmp	0x34e2	; 0x34e2 <__epilogue_restores__>

00000568 <__subsf3>:
     568:	a0 e2       	ldi	r26, 0x20	; 32
     56a:	b0 e0       	ldi	r27, 0x00	; 0
     56c:	ea eb       	ldi	r30, 0xBA	; 186
     56e:	f2 e0       	ldi	r31, 0x02	; 2
     570:	0c 94 61 1a 	jmp	0x34c2	; 0x34c2 <__prologue_saves__+0x18>
     574:	69 83       	std	Y+1, r22	; 0x01
     576:	7a 83       	std	Y+2, r23	; 0x02
     578:	8b 83       	std	Y+3, r24	; 0x03
     57a:	9c 83       	std	Y+4, r25	; 0x04
     57c:	2d 83       	std	Y+5, r18	; 0x05
     57e:	3e 83       	std	Y+6, r19	; 0x06
     580:	4f 83       	std	Y+7, r20	; 0x07
     582:	58 87       	std	Y+8, r21	; 0x08
     584:	e9 e0       	ldi	r30, 0x09	; 9
     586:	ee 2e       	mov	r14, r30
     588:	f1 2c       	mov	r15, r1
     58a:	ec 0e       	add	r14, r28
     58c:	fd 1e       	adc	r15, r29
     58e:	ce 01       	movw	r24, r28
     590:	01 96       	adiw	r24, 0x01	; 1
     592:	b7 01       	movw	r22, r14
     594:	0e 94 4c 08 	call	0x1098	; 0x1098 <__unpack_f>
     598:	8e 01       	movw	r16, r28
     59a:	0f 5e       	subi	r16, 0xEF	; 239
     59c:	1f 4f       	sbci	r17, 0xFF	; 255
     59e:	ce 01       	movw	r24, r28
     5a0:	05 96       	adiw	r24, 0x05	; 5
     5a2:	b8 01       	movw	r22, r16
     5a4:	0e 94 4c 08 	call	0x1098	; 0x1098 <__unpack_f>
     5a8:	8a 89       	ldd	r24, Y+18	; 0x12
     5aa:	91 e0       	ldi	r25, 0x01	; 1
     5ac:	89 27       	eor	r24, r25
     5ae:	8a 8b       	std	Y+18, r24	; 0x12
     5b0:	c7 01       	movw	r24, r14
     5b2:	b8 01       	movw	r22, r16
     5b4:	ae 01       	movw	r20, r28
     5b6:	47 5e       	subi	r20, 0xE7	; 231
     5b8:	5f 4f       	sbci	r21, 0xFF	; 255
     5ba:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_fpadd_parts>
     5be:	0e 94 77 07 	call	0xeee	; 0xeee <__pack_f>
     5c2:	a0 96       	adiw	r28, 0x20	; 32
     5c4:	e6 e0       	ldi	r30, 0x06	; 6
     5c6:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <__epilogue_restores__+0x18>

000005ca <__addsf3>:
     5ca:	a0 e2       	ldi	r26, 0x20	; 32
     5cc:	b0 e0       	ldi	r27, 0x00	; 0
     5ce:	eb ee       	ldi	r30, 0xEB	; 235
     5d0:	f2 e0       	ldi	r31, 0x02	; 2
     5d2:	0c 94 61 1a 	jmp	0x34c2	; 0x34c2 <__prologue_saves__+0x18>
     5d6:	69 83       	std	Y+1, r22	; 0x01
     5d8:	7a 83       	std	Y+2, r23	; 0x02
     5da:	8b 83       	std	Y+3, r24	; 0x03
     5dc:	9c 83       	std	Y+4, r25	; 0x04
     5de:	2d 83       	std	Y+5, r18	; 0x05
     5e0:	3e 83       	std	Y+6, r19	; 0x06
     5e2:	4f 83       	std	Y+7, r20	; 0x07
     5e4:	58 87       	std	Y+8, r21	; 0x08
     5e6:	f9 e0       	ldi	r31, 0x09	; 9
     5e8:	ef 2e       	mov	r14, r31
     5ea:	f1 2c       	mov	r15, r1
     5ec:	ec 0e       	add	r14, r28
     5ee:	fd 1e       	adc	r15, r29
     5f0:	ce 01       	movw	r24, r28
     5f2:	01 96       	adiw	r24, 0x01	; 1
     5f4:	b7 01       	movw	r22, r14
     5f6:	0e 94 4c 08 	call	0x1098	; 0x1098 <__unpack_f>
     5fa:	8e 01       	movw	r16, r28
     5fc:	0f 5e       	subi	r16, 0xEF	; 239
     5fe:	1f 4f       	sbci	r17, 0xFF	; 255
     600:	ce 01       	movw	r24, r28
     602:	05 96       	adiw	r24, 0x05	; 5
     604:	b8 01       	movw	r22, r16
     606:	0e 94 4c 08 	call	0x1098	; 0x1098 <__unpack_f>
     60a:	c7 01       	movw	r24, r14
     60c:	b8 01       	movw	r22, r16
     60e:	ae 01       	movw	r20, r28
     610:	47 5e       	subi	r20, 0xE7	; 231
     612:	5f 4f       	sbci	r21, 0xFF	; 255
     614:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_fpadd_parts>
     618:	0e 94 77 07 	call	0xeee	; 0xeee <__pack_f>
     61c:	a0 96       	adiw	r28, 0x20	; 32
     61e:	e6 e0       	ldi	r30, 0x06	; 6
     620:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <__epilogue_restores__+0x18>

00000624 <__mulsf3>:
     624:	a0 e2       	ldi	r26, 0x20	; 32
     626:	b0 e0       	ldi	r27, 0x00	; 0
     628:	e8 e1       	ldi	r30, 0x18	; 24
     62a:	f3 e0       	ldi	r31, 0x03	; 3
     62c:	0c 94 55 1a 	jmp	0x34aa	; 0x34aa <__prologue_saves__>
     630:	69 83       	std	Y+1, r22	; 0x01
     632:	7a 83       	std	Y+2, r23	; 0x02
     634:	8b 83       	std	Y+3, r24	; 0x03
     636:	9c 83       	std	Y+4, r25	; 0x04
     638:	2d 83       	std	Y+5, r18	; 0x05
     63a:	3e 83       	std	Y+6, r19	; 0x06
     63c:	4f 83       	std	Y+7, r20	; 0x07
     63e:	58 87       	std	Y+8, r21	; 0x08
     640:	ce 01       	movw	r24, r28
     642:	01 96       	adiw	r24, 0x01	; 1
     644:	be 01       	movw	r22, r28
     646:	67 5f       	subi	r22, 0xF7	; 247
     648:	7f 4f       	sbci	r23, 0xFF	; 255
     64a:	0e 94 4c 08 	call	0x1098	; 0x1098 <__unpack_f>
     64e:	ce 01       	movw	r24, r28
     650:	05 96       	adiw	r24, 0x05	; 5
     652:	be 01       	movw	r22, r28
     654:	6f 5e       	subi	r22, 0xEF	; 239
     656:	7f 4f       	sbci	r23, 0xFF	; 255
     658:	0e 94 4c 08 	call	0x1098	; 0x1098 <__unpack_f>
     65c:	99 85       	ldd	r25, Y+9	; 0x09
     65e:	92 30       	cpi	r25, 0x02	; 2
     660:	88 f0       	brcs	.+34     	; 0x684 <__mulsf3+0x60>
     662:	89 89       	ldd	r24, Y+17	; 0x11
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	c8 f0       	brcs	.+50     	; 0x69a <__mulsf3+0x76>
     668:	94 30       	cpi	r25, 0x04	; 4
     66a:	19 f4       	brne	.+6      	; 0x672 <__mulsf3+0x4e>
     66c:	82 30       	cpi	r24, 0x02	; 2
     66e:	51 f4       	brne	.+20     	; 0x684 <__mulsf3+0x60>
     670:	04 c0       	rjmp	.+8      	; 0x67a <__mulsf3+0x56>
     672:	84 30       	cpi	r24, 0x04	; 4
     674:	29 f4       	brne	.+10     	; 0x680 <__mulsf3+0x5c>
     676:	92 30       	cpi	r25, 0x02	; 2
     678:	81 f4       	brne	.+32     	; 0x69a <__mulsf3+0x76>
     67a:	80 e6       	ldi	r24, 0x60	; 96
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	c6 c0       	rjmp	.+396    	; 0x80c <__mulsf3+0x1e8>
     680:	92 30       	cpi	r25, 0x02	; 2
     682:	49 f4       	brne	.+18     	; 0x696 <__mulsf3+0x72>
     684:	20 e0       	ldi	r18, 0x00	; 0
     686:	9a 85       	ldd	r25, Y+10	; 0x0a
     688:	8a 89       	ldd	r24, Y+18	; 0x12
     68a:	98 13       	cpse	r25, r24
     68c:	21 e0       	ldi	r18, 0x01	; 1
     68e:	2a 87       	std	Y+10, r18	; 0x0a
     690:	ce 01       	movw	r24, r28
     692:	09 96       	adiw	r24, 0x09	; 9
     694:	bb c0       	rjmp	.+374    	; 0x80c <__mulsf3+0x1e8>
     696:	82 30       	cpi	r24, 0x02	; 2
     698:	49 f4       	brne	.+18     	; 0x6ac <__mulsf3+0x88>
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	9a 85       	ldd	r25, Y+10	; 0x0a
     69e:	8a 89       	ldd	r24, Y+18	; 0x12
     6a0:	98 13       	cpse	r25, r24
     6a2:	21 e0       	ldi	r18, 0x01	; 1
     6a4:	2a 8b       	std	Y+18, r18	; 0x12
     6a6:	ce 01       	movw	r24, r28
     6a8:	41 96       	adiw	r24, 0x11	; 17
     6aa:	b0 c0       	rjmp	.+352    	; 0x80c <__mulsf3+0x1e8>
     6ac:	2d 84       	ldd	r2, Y+13	; 0x0d
     6ae:	3e 84       	ldd	r3, Y+14	; 0x0e
     6b0:	4f 84       	ldd	r4, Y+15	; 0x0f
     6b2:	58 88       	ldd	r5, Y+16	; 0x10
     6b4:	6d 88       	ldd	r6, Y+21	; 0x15
     6b6:	7e 88       	ldd	r7, Y+22	; 0x16
     6b8:	8f 88       	ldd	r8, Y+23	; 0x17
     6ba:	98 8c       	ldd	r9, Y+24	; 0x18
     6bc:	ee 24       	eor	r14, r14
     6be:	ff 24       	eor	r15, r15
     6c0:	87 01       	movw	r16, r14
     6c2:	aa 24       	eor	r10, r10
     6c4:	bb 24       	eor	r11, r11
     6c6:	65 01       	movw	r12, r10
     6c8:	40 e0       	ldi	r20, 0x00	; 0
     6ca:	50 e0       	ldi	r21, 0x00	; 0
     6cc:	60 e0       	ldi	r22, 0x00	; 0
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	e0 e0       	ldi	r30, 0x00	; 0
     6d2:	f0 e0       	ldi	r31, 0x00	; 0
     6d4:	c1 01       	movw	r24, r2
     6d6:	81 70       	andi	r24, 0x01	; 1
     6d8:	90 70       	andi	r25, 0x00	; 0
     6da:	89 2b       	or	r24, r25
     6dc:	e9 f0       	breq	.+58     	; 0x718 <__mulsf3+0xf4>
     6de:	e6 0c       	add	r14, r6
     6e0:	f7 1c       	adc	r15, r7
     6e2:	08 1d       	adc	r16, r8
     6e4:	19 1d       	adc	r17, r9
     6e6:	9a 01       	movw	r18, r20
     6e8:	ab 01       	movw	r20, r22
     6ea:	2a 0d       	add	r18, r10
     6ec:	3b 1d       	adc	r19, r11
     6ee:	4c 1d       	adc	r20, r12
     6f0:	5d 1d       	adc	r21, r13
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	a0 e0       	ldi	r26, 0x00	; 0
     6f8:	b0 e0       	ldi	r27, 0x00	; 0
     6fa:	e6 14       	cp	r14, r6
     6fc:	f7 04       	cpc	r15, r7
     6fe:	08 05       	cpc	r16, r8
     700:	19 05       	cpc	r17, r9
     702:	20 f4       	brcc	.+8      	; 0x70c <__mulsf3+0xe8>
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	a0 e0       	ldi	r26, 0x00	; 0
     70a:	b0 e0       	ldi	r27, 0x00	; 0
     70c:	ba 01       	movw	r22, r20
     70e:	a9 01       	movw	r20, r18
     710:	48 0f       	add	r20, r24
     712:	59 1f       	adc	r21, r25
     714:	6a 1f       	adc	r22, r26
     716:	7b 1f       	adc	r23, r27
     718:	aa 0c       	add	r10, r10
     71a:	bb 1c       	adc	r11, r11
     71c:	cc 1c       	adc	r12, r12
     71e:	dd 1c       	adc	r13, r13
     720:	97 fe       	sbrs	r9, 7
     722:	08 c0       	rjmp	.+16     	; 0x734 <__mulsf3+0x110>
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	a0 e0       	ldi	r26, 0x00	; 0
     72a:	b0 e0       	ldi	r27, 0x00	; 0
     72c:	a8 2a       	or	r10, r24
     72e:	b9 2a       	or	r11, r25
     730:	ca 2a       	or	r12, r26
     732:	db 2a       	or	r13, r27
     734:	31 96       	adiw	r30, 0x01	; 1
     736:	e0 32       	cpi	r30, 0x20	; 32
     738:	f1 05       	cpc	r31, r1
     73a:	49 f0       	breq	.+18     	; 0x74e <__mulsf3+0x12a>
     73c:	66 0c       	add	r6, r6
     73e:	77 1c       	adc	r7, r7
     740:	88 1c       	adc	r8, r8
     742:	99 1c       	adc	r9, r9
     744:	56 94       	lsr	r5
     746:	47 94       	ror	r4
     748:	37 94       	ror	r3
     74a:	27 94       	ror	r2
     74c:	c3 cf       	rjmp	.-122    	; 0x6d4 <__mulsf3+0xb0>
     74e:	fa 85       	ldd	r31, Y+10	; 0x0a
     750:	ea 89       	ldd	r30, Y+18	; 0x12
     752:	2b 89       	ldd	r18, Y+19	; 0x13
     754:	3c 89       	ldd	r19, Y+20	; 0x14
     756:	8b 85       	ldd	r24, Y+11	; 0x0b
     758:	9c 85       	ldd	r25, Y+12	; 0x0c
     75a:	28 0f       	add	r18, r24
     75c:	39 1f       	adc	r19, r25
     75e:	2e 5f       	subi	r18, 0xFE	; 254
     760:	3f 4f       	sbci	r19, 0xFF	; 255
     762:	17 c0       	rjmp	.+46     	; 0x792 <__mulsf3+0x16e>
     764:	ca 01       	movw	r24, r20
     766:	81 70       	andi	r24, 0x01	; 1
     768:	90 70       	andi	r25, 0x00	; 0
     76a:	89 2b       	or	r24, r25
     76c:	61 f0       	breq	.+24     	; 0x786 <__mulsf3+0x162>
     76e:	16 95       	lsr	r17
     770:	07 95       	ror	r16
     772:	f7 94       	ror	r15
     774:	e7 94       	ror	r14
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	a0 e0       	ldi	r26, 0x00	; 0
     77c:	b0 e8       	ldi	r27, 0x80	; 128
     77e:	e8 2a       	or	r14, r24
     780:	f9 2a       	or	r15, r25
     782:	0a 2b       	or	r16, r26
     784:	1b 2b       	or	r17, r27
     786:	76 95       	lsr	r23
     788:	67 95       	ror	r22
     78a:	57 95       	ror	r21
     78c:	47 95       	ror	r20
     78e:	2f 5f       	subi	r18, 0xFF	; 255
     790:	3f 4f       	sbci	r19, 0xFF	; 255
     792:	77 fd       	sbrc	r23, 7
     794:	e7 cf       	rjmp	.-50     	; 0x764 <__mulsf3+0x140>
     796:	0c c0       	rjmp	.+24     	; 0x7b0 <__mulsf3+0x18c>
     798:	44 0f       	add	r20, r20
     79a:	55 1f       	adc	r21, r21
     79c:	66 1f       	adc	r22, r22
     79e:	77 1f       	adc	r23, r23
     7a0:	17 fd       	sbrc	r17, 7
     7a2:	41 60       	ori	r20, 0x01	; 1
     7a4:	ee 0c       	add	r14, r14
     7a6:	ff 1c       	adc	r15, r15
     7a8:	00 1f       	adc	r16, r16
     7aa:	11 1f       	adc	r17, r17
     7ac:	21 50       	subi	r18, 0x01	; 1
     7ae:	30 40       	sbci	r19, 0x00	; 0
     7b0:	40 30       	cpi	r20, 0x00	; 0
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	59 07       	cpc	r21, r25
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	69 07       	cpc	r22, r25
     7ba:	90 e4       	ldi	r25, 0x40	; 64
     7bc:	79 07       	cpc	r23, r25
     7be:	60 f3       	brcs	.-40     	; 0x798 <__mulsf3+0x174>
     7c0:	2b 8f       	std	Y+27, r18	; 0x1b
     7c2:	3c 8f       	std	Y+28, r19	; 0x1c
     7c4:	db 01       	movw	r26, r22
     7c6:	ca 01       	movw	r24, r20
     7c8:	8f 77       	andi	r24, 0x7F	; 127
     7ca:	90 70       	andi	r25, 0x00	; 0
     7cc:	a0 70       	andi	r26, 0x00	; 0
     7ce:	b0 70       	andi	r27, 0x00	; 0
     7d0:	80 34       	cpi	r24, 0x40	; 64
     7d2:	91 05       	cpc	r25, r1
     7d4:	a1 05       	cpc	r26, r1
     7d6:	b1 05       	cpc	r27, r1
     7d8:	61 f4       	brne	.+24     	; 0x7f2 <__mulsf3+0x1ce>
     7da:	47 fd       	sbrc	r20, 7
     7dc:	0a c0       	rjmp	.+20     	; 0x7f2 <__mulsf3+0x1ce>
     7de:	e1 14       	cp	r14, r1
     7e0:	f1 04       	cpc	r15, r1
     7e2:	01 05       	cpc	r16, r1
     7e4:	11 05       	cpc	r17, r1
     7e6:	29 f0       	breq	.+10     	; 0x7f2 <__mulsf3+0x1ce>
     7e8:	40 5c       	subi	r20, 0xC0	; 192
     7ea:	5f 4f       	sbci	r21, 0xFF	; 255
     7ec:	6f 4f       	sbci	r22, 0xFF	; 255
     7ee:	7f 4f       	sbci	r23, 0xFF	; 255
     7f0:	40 78       	andi	r20, 0x80	; 128
     7f2:	1a 8e       	std	Y+26, r1	; 0x1a
     7f4:	fe 17       	cp	r31, r30
     7f6:	11 f0       	breq	.+4      	; 0x7fc <__mulsf3+0x1d8>
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	8a 8f       	std	Y+26, r24	; 0x1a
     7fc:	4d 8f       	std	Y+29, r20	; 0x1d
     7fe:	5e 8f       	std	Y+30, r21	; 0x1e
     800:	6f 8f       	std	Y+31, r22	; 0x1f
     802:	78 a3       	std	Y+32, r23	; 0x20
     804:	83 e0       	ldi	r24, 0x03	; 3
     806:	89 8f       	std	Y+25, r24	; 0x19
     808:	ce 01       	movw	r24, r28
     80a:	49 96       	adiw	r24, 0x19	; 25
     80c:	0e 94 77 07 	call	0xeee	; 0xeee <__pack_f>
     810:	a0 96       	adiw	r28, 0x20	; 32
     812:	e2 e1       	ldi	r30, 0x12	; 18
     814:	0c 94 71 1a 	jmp	0x34e2	; 0x34e2 <__epilogue_restores__>

00000818 <__divsf3>:
     818:	a8 e1       	ldi	r26, 0x18	; 24
     81a:	b0 e0       	ldi	r27, 0x00	; 0
     81c:	e2 e1       	ldi	r30, 0x12	; 18
     81e:	f4 e0       	ldi	r31, 0x04	; 4
     820:	0c 94 5d 1a 	jmp	0x34ba	; 0x34ba <__prologue_saves__+0x10>
     824:	69 83       	std	Y+1, r22	; 0x01
     826:	7a 83       	std	Y+2, r23	; 0x02
     828:	8b 83       	std	Y+3, r24	; 0x03
     82a:	9c 83       	std	Y+4, r25	; 0x04
     82c:	2d 83       	std	Y+5, r18	; 0x05
     82e:	3e 83       	std	Y+6, r19	; 0x06
     830:	4f 83       	std	Y+7, r20	; 0x07
     832:	58 87       	std	Y+8, r21	; 0x08
     834:	b9 e0       	ldi	r27, 0x09	; 9
     836:	eb 2e       	mov	r14, r27
     838:	f1 2c       	mov	r15, r1
     83a:	ec 0e       	add	r14, r28
     83c:	fd 1e       	adc	r15, r29
     83e:	ce 01       	movw	r24, r28
     840:	01 96       	adiw	r24, 0x01	; 1
     842:	b7 01       	movw	r22, r14
     844:	0e 94 4c 08 	call	0x1098	; 0x1098 <__unpack_f>
     848:	8e 01       	movw	r16, r28
     84a:	0f 5e       	subi	r16, 0xEF	; 239
     84c:	1f 4f       	sbci	r17, 0xFF	; 255
     84e:	ce 01       	movw	r24, r28
     850:	05 96       	adiw	r24, 0x05	; 5
     852:	b8 01       	movw	r22, r16
     854:	0e 94 4c 08 	call	0x1098	; 0x1098 <__unpack_f>
     858:	29 85       	ldd	r18, Y+9	; 0x09
     85a:	22 30       	cpi	r18, 0x02	; 2
     85c:	08 f4       	brcc	.+2      	; 0x860 <__stack+0x1>
     85e:	7e c0       	rjmp	.+252    	; 0x95c <__stack+0xfd>
     860:	39 89       	ldd	r19, Y+17	; 0x11
     862:	32 30       	cpi	r19, 0x02	; 2
     864:	10 f4       	brcc	.+4      	; 0x86a <__stack+0xb>
     866:	b8 01       	movw	r22, r16
     868:	7c c0       	rjmp	.+248    	; 0x962 <__stack+0x103>
     86a:	8a 85       	ldd	r24, Y+10	; 0x0a
     86c:	9a 89       	ldd	r25, Y+18	; 0x12
     86e:	89 27       	eor	r24, r25
     870:	8a 87       	std	Y+10, r24	; 0x0a
     872:	24 30       	cpi	r18, 0x04	; 4
     874:	11 f0       	breq	.+4      	; 0x87a <__stack+0x1b>
     876:	22 30       	cpi	r18, 0x02	; 2
     878:	31 f4       	brne	.+12     	; 0x886 <__stack+0x27>
     87a:	23 17       	cp	r18, r19
     87c:	09 f0       	breq	.+2      	; 0x880 <__stack+0x21>
     87e:	6e c0       	rjmp	.+220    	; 0x95c <__stack+0xfd>
     880:	60 e6       	ldi	r22, 0x60	; 96
     882:	70 e0       	ldi	r23, 0x00	; 0
     884:	6e c0       	rjmp	.+220    	; 0x962 <__stack+0x103>
     886:	34 30       	cpi	r19, 0x04	; 4
     888:	39 f4       	brne	.+14     	; 0x898 <__stack+0x39>
     88a:	1d 86       	std	Y+13, r1	; 0x0d
     88c:	1e 86       	std	Y+14, r1	; 0x0e
     88e:	1f 86       	std	Y+15, r1	; 0x0f
     890:	18 8a       	std	Y+16, r1	; 0x10
     892:	1c 86       	std	Y+12, r1	; 0x0c
     894:	1b 86       	std	Y+11, r1	; 0x0b
     896:	04 c0       	rjmp	.+8      	; 0x8a0 <__stack+0x41>
     898:	32 30       	cpi	r19, 0x02	; 2
     89a:	21 f4       	brne	.+8      	; 0x8a4 <__stack+0x45>
     89c:	84 e0       	ldi	r24, 0x04	; 4
     89e:	89 87       	std	Y+9, r24	; 0x09
     8a0:	b7 01       	movw	r22, r14
     8a2:	5f c0       	rjmp	.+190    	; 0x962 <__stack+0x103>
     8a4:	2b 85       	ldd	r18, Y+11	; 0x0b
     8a6:	3c 85       	ldd	r19, Y+12	; 0x0c
     8a8:	8b 89       	ldd	r24, Y+19	; 0x13
     8aa:	9c 89       	ldd	r25, Y+20	; 0x14
     8ac:	28 1b       	sub	r18, r24
     8ae:	39 0b       	sbc	r19, r25
     8b0:	3c 87       	std	Y+12, r19	; 0x0c
     8b2:	2b 87       	std	Y+11, r18	; 0x0b
     8b4:	ed 84       	ldd	r14, Y+13	; 0x0d
     8b6:	fe 84       	ldd	r15, Y+14	; 0x0e
     8b8:	0f 85       	ldd	r16, Y+15	; 0x0f
     8ba:	18 89       	ldd	r17, Y+16	; 0x10
     8bc:	ad 88       	ldd	r10, Y+21	; 0x15
     8be:	be 88       	ldd	r11, Y+22	; 0x16
     8c0:	cf 88       	ldd	r12, Y+23	; 0x17
     8c2:	d8 8c       	ldd	r13, Y+24	; 0x18
     8c4:	ea 14       	cp	r14, r10
     8c6:	fb 04       	cpc	r15, r11
     8c8:	0c 05       	cpc	r16, r12
     8ca:	1d 05       	cpc	r17, r13
     8cc:	40 f4       	brcc	.+16     	; 0x8de <__stack+0x7f>
     8ce:	ee 0c       	add	r14, r14
     8d0:	ff 1c       	adc	r15, r15
     8d2:	00 1f       	adc	r16, r16
     8d4:	11 1f       	adc	r17, r17
     8d6:	21 50       	subi	r18, 0x01	; 1
     8d8:	30 40       	sbci	r19, 0x00	; 0
     8da:	3c 87       	std	Y+12, r19	; 0x0c
     8dc:	2b 87       	std	Y+11, r18	; 0x0b
     8de:	20 e0       	ldi	r18, 0x00	; 0
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	40 e0       	ldi	r20, 0x00	; 0
     8e4:	50 e0       	ldi	r21, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	b0 e4       	ldi	r27, 0x40	; 64
     8ee:	60 e0       	ldi	r22, 0x00	; 0
     8f0:	70 e0       	ldi	r23, 0x00	; 0
     8f2:	ea 14       	cp	r14, r10
     8f4:	fb 04       	cpc	r15, r11
     8f6:	0c 05       	cpc	r16, r12
     8f8:	1d 05       	cpc	r17, r13
     8fa:	40 f0       	brcs	.+16     	; 0x90c <__stack+0xad>
     8fc:	28 2b       	or	r18, r24
     8fe:	39 2b       	or	r19, r25
     900:	4a 2b       	or	r20, r26
     902:	5b 2b       	or	r21, r27
     904:	ea 18       	sub	r14, r10
     906:	fb 08       	sbc	r15, r11
     908:	0c 09       	sbc	r16, r12
     90a:	1d 09       	sbc	r17, r13
     90c:	b6 95       	lsr	r27
     90e:	a7 95       	ror	r26
     910:	97 95       	ror	r25
     912:	87 95       	ror	r24
     914:	ee 0c       	add	r14, r14
     916:	ff 1c       	adc	r15, r15
     918:	00 1f       	adc	r16, r16
     91a:	11 1f       	adc	r17, r17
     91c:	6f 5f       	subi	r22, 0xFF	; 255
     91e:	7f 4f       	sbci	r23, 0xFF	; 255
     920:	6f 31       	cpi	r22, 0x1F	; 31
     922:	71 05       	cpc	r23, r1
     924:	31 f7       	brne	.-52     	; 0x8f2 <__stack+0x93>
     926:	da 01       	movw	r26, r20
     928:	c9 01       	movw	r24, r18
     92a:	8f 77       	andi	r24, 0x7F	; 127
     92c:	90 70       	andi	r25, 0x00	; 0
     92e:	a0 70       	andi	r26, 0x00	; 0
     930:	b0 70       	andi	r27, 0x00	; 0
     932:	80 34       	cpi	r24, 0x40	; 64
     934:	91 05       	cpc	r25, r1
     936:	a1 05       	cpc	r26, r1
     938:	b1 05       	cpc	r27, r1
     93a:	61 f4       	brne	.+24     	; 0x954 <__stack+0xf5>
     93c:	27 fd       	sbrc	r18, 7
     93e:	0a c0       	rjmp	.+20     	; 0x954 <__stack+0xf5>
     940:	e1 14       	cp	r14, r1
     942:	f1 04       	cpc	r15, r1
     944:	01 05       	cpc	r16, r1
     946:	11 05       	cpc	r17, r1
     948:	29 f0       	breq	.+10     	; 0x954 <__stack+0xf5>
     94a:	20 5c       	subi	r18, 0xC0	; 192
     94c:	3f 4f       	sbci	r19, 0xFF	; 255
     94e:	4f 4f       	sbci	r20, 0xFF	; 255
     950:	5f 4f       	sbci	r21, 0xFF	; 255
     952:	20 78       	andi	r18, 0x80	; 128
     954:	2d 87       	std	Y+13, r18	; 0x0d
     956:	3e 87       	std	Y+14, r19	; 0x0e
     958:	4f 87       	std	Y+15, r20	; 0x0f
     95a:	58 8b       	std	Y+16, r21	; 0x10
     95c:	be 01       	movw	r22, r28
     95e:	67 5f       	subi	r22, 0xF7	; 247
     960:	7f 4f       	sbci	r23, 0xFF	; 255
     962:	cb 01       	movw	r24, r22
     964:	0e 94 77 07 	call	0xeee	; 0xeee <__pack_f>
     968:	68 96       	adiw	r28, 0x18	; 24
     96a:	ea e0       	ldi	r30, 0x0A	; 10
     96c:	0c 94 79 1a 	jmp	0x34f2	; 0x34f2 <__epilogue_restores__+0x10>

00000970 <__eqsf2>:
     970:	a8 e1       	ldi	r26, 0x18	; 24
     972:	b0 e0       	ldi	r27, 0x00	; 0
     974:	ee eb       	ldi	r30, 0xBE	; 190
     976:	f4 e0       	ldi	r31, 0x04	; 4
     978:	0c 94 61 1a 	jmp	0x34c2	; 0x34c2 <__prologue_saves__+0x18>
     97c:	69 83       	std	Y+1, r22	; 0x01
     97e:	7a 83       	std	Y+2, r23	; 0x02
     980:	8b 83       	std	Y+3, r24	; 0x03
     982:	9c 83       	std	Y+4, r25	; 0x04
     984:	2d 83       	std	Y+5, r18	; 0x05
     986:	3e 83       	std	Y+6, r19	; 0x06
     988:	4f 83       	std	Y+7, r20	; 0x07
     98a:	58 87       	std	Y+8, r21	; 0x08
     98c:	89 e0       	ldi	r24, 0x09	; 9
     98e:	e8 2e       	mov	r14, r24
     990:	f1 2c       	mov	r15, r1
     992:	ec 0e       	add	r14, r28
     994:	fd 1e       	adc	r15, r29
     996:	ce 01       	movw	r24, r28
     998:	01 96       	adiw	r24, 0x01	; 1
     99a:	b7 01       	movw	r22, r14
     99c:	0e 94 4c 08 	call	0x1098	; 0x1098 <__unpack_f>
     9a0:	8e 01       	movw	r16, r28
     9a2:	0f 5e       	subi	r16, 0xEF	; 239
     9a4:	1f 4f       	sbci	r17, 0xFF	; 255
     9a6:	ce 01       	movw	r24, r28
     9a8:	05 96       	adiw	r24, 0x05	; 5
     9aa:	b8 01       	movw	r22, r16
     9ac:	0e 94 4c 08 	call	0x1098	; 0x1098 <__unpack_f>
     9b0:	89 85       	ldd	r24, Y+9	; 0x09
     9b2:	82 30       	cpi	r24, 0x02	; 2
     9b4:	40 f0       	brcs	.+16     	; 0x9c6 <__eqsf2+0x56>
     9b6:	89 89       	ldd	r24, Y+17	; 0x11
     9b8:	82 30       	cpi	r24, 0x02	; 2
     9ba:	28 f0       	brcs	.+10     	; 0x9c6 <__eqsf2+0x56>
     9bc:	c7 01       	movw	r24, r14
     9be:	b8 01       	movw	r22, r16
     9c0:	0e 94 c4 08 	call	0x1188	; 0x1188 <__fpcmp_parts_f>
     9c4:	01 c0       	rjmp	.+2      	; 0x9c8 <__eqsf2+0x58>
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	68 96       	adiw	r28, 0x18	; 24
     9ca:	e6 e0       	ldi	r30, 0x06	; 6
     9cc:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <__epilogue_restores__+0x18>

000009d0 <__gtsf2>:
     9d0:	a8 e1       	ldi	r26, 0x18	; 24
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	ee ee       	ldi	r30, 0xEE	; 238
     9d6:	f4 e0       	ldi	r31, 0x04	; 4
     9d8:	0c 94 61 1a 	jmp	0x34c2	; 0x34c2 <__prologue_saves__+0x18>
     9dc:	69 83       	std	Y+1, r22	; 0x01
     9de:	7a 83       	std	Y+2, r23	; 0x02
     9e0:	8b 83       	std	Y+3, r24	; 0x03
     9e2:	9c 83       	std	Y+4, r25	; 0x04
     9e4:	2d 83       	std	Y+5, r18	; 0x05
     9e6:	3e 83       	std	Y+6, r19	; 0x06
     9e8:	4f 83       	std	Y+7, r20	; 0x07
     9ea:	58 87       	std	Y+8, r21	; 0x08
     9ec:	89 e0       	ldi	r24, 0x09	; 9
     9ee:	e8 2e       	mov	r14, r24
     9f0:	f1 2c       	mov	r15, r1
     9f2:	ec 0e       	add	r14, r28
     9f4:	fd 1e       	adc	r15, r29
     9f6:	ce 01       	movw	r24, r28
     9f8:	01 96       	adiw	r24, 0x01	; 1
     9fa:	b7 01       	movw	r22, r14
     9fc:	0e 94 4c 08 	call	0x1098	; 0x1098 <__unpack_f>
     a00:	8e 01       	movw	r16, r28
     a02:	0f 5e       	subi	r16, 0xEF	; 239
     a04:	1f 4f       	sbci	r17, 0xFF	; 255
     a06:	ce 01       	movw	r24, r28
     a08:	05 96       	adiw	r24, 0x05	; 5
     a0a:	b8 01       	movw	r22, r16
     a0c:	0e 94 4c 08 	call	0x1098	; 0x1098 <__unpack_f>
     a10:	89 85       	ldd	r24, Y+9	; 0x09
     a12:	82 30       	cpi	r24, 0x02	; 2
     a14:	40 f0       	brcs	.+16     	; 0xa26 <__gtsf2+0x56>
     a16:	89 89       	ldd	r24, Y+17	; 0x11
     a18:	82 30       	cpi	r24, 0x02	; 2
     a1a:	28 f0       	brcs	.+10     	; 0xa26 <__gtsf2+0x56>
     a1c:	c7 01       	movw	r24, r14
     a1e:	b8 01       	movw	r22, r16
     a20:	0e 94 c4 08 	call	0x1188	; 0x1188 <__fpcmp_parts_f>
     a24:	01 c0       	rjmp	.+2      	; 0xa28 <__gtsf2+0x58>
     a26:	8f ef       	ldi	r24, 0xFF	; 255
     a28:	68 96       	adiw	r28, 0x18	; 24
     a2a:	e6 e0       	ldi	r30, 0x06	; 6
     a2c:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <__epilogue_restores__+0x18>

00000a30 <__gesf2>:
     a30:	a8 e1       	ldi	r26, 0x18	; 24
     a32:	b0 e0       	ldi	r27, 0x00	; 0
     a34:	ee e1       	ldi	r30, 0x1E	; 30
     a36:	f5 e0       	ldi	r31, 0x05	; 5
     a38:	0c 94 61 1a 	jmp	0x34c2	; 0x34c2 <__prologue_saves__+0x18>
     a3c:	69 83       	std	Y+1, r22	; 0x01
     a3e:	7a 83       	std	Y+2, r23	; 0x02
     a40:	8b 83       	std	Y+3, r24	; 0x03
     a42:	9c 83       	std	Y+4, r25	; 0x04
     a44:	2d 83       	std	Y+5, r18	; 0x05
     a46:	3e 83       	std	Y+6, r19	; 0x06
     a48:	4f 83       	std	Y+7, r20	; 0x07
     a4a:	58 87       	std	Y+8, r21	; 0x08
     a4c:	89 e0       	ldi	r24, 0x09	; 9
     a4e:	e8 2e       	mov	r14, r24
     a50:	f1 2c       	mov	r15, r1
     a52:	ec 0e       	add	r14, r28
     a54:	fd 1e       	adc	r15, r29
     a56:	ce 01       	movw	r24, r28
     a58:	01 96       	adiw	r24, 0x01	; 1
     a5a:	b7 01       	movw	r22, r14
     a5c:	0e 94 4c 08 	call	0x1098	; 0x1098 <__unpack_f>
     a60:	8e 01       	movw	r16, r28
     a62:	0f 5e       	subi	r16, 0xEF	; 239
     a64:	1f 4f       	sbci	r17, 0xFF	; 255
     a66:	ce 01       	movw	r24, r28
     a68:	05 96       	adiw	r24, 0x05	; 5
     a6a:	b8 01       	movw	r22, r16
     a6c:	0e 94 4c 08 	call	0x1098	; 0x1098 <__unpack_f>
     a70:	89 85       	ldd	r24, Y+9	; 0x09
     a72:	82 30       	cpi	r24, 0x02	; 2
     a74:	40 f0       	brcs	.+16     	; 0xa86 <__gesf2+0x56>
     a76:	89 89       	ldd	r24, Y+17	; 0x11
     a78:	82 30       	cpi	r24, 0x02	; 2
     a7a:	28 f0       	brcs	.+10     	; 0xa86 <__gesf2+0x56>
     a7c:	c7 01       	movw	r24, r14
     a7e:	b8 01       	movw	r22, r16
     a80:	0e 94 c4 08 	call	0x1188	; 0x1188 <__fpcmp_parts_f>
     a84:	01 c0       	rjmp	.+2      	; 0xa88 <__gesf2+0x58>
     a86:	8f ef       	ldi	r24, 0xFF	; 255
     a88:	68 96       	adiw	r28, 0x18	; 24
     a8a:	e6 e0       	ldi	r30, 0x06	; 6
     a8c:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <__epilogue_restores__+0x18>

00000a90 <__ltsf2>:
     a90:	a8 e1       	ldi	r26, 0x18	; 24
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	ee e4       	ldi	r30, 0x4E	; 78
     a96:	f5 e0       	ldi	r31, 0x05	; 5
     a98:	0c 94 61 1a 	jmp	0x34c2	; 0x34c2 <__prologue_saves__+0x18>
     a9c:	69 83       	std	Y+1, r22	; 0x01
     a9e:	7a 83       	std	Y+2, r23	; 0x02
     aa0:	8b 83       	std	Y+3, r24	; 0x03
     aa2:	9c 83       	std	Y+4, r25	; 0x04
     aa4:	2d 83       	std	Y+5, r18	; 0x05
     aa6:	3e 83       	std	Y+6, r19	; 0x06
     aa8:	4f 83       	std	Y+7, r20	; 0x07
     aaa:	58 87       	std	Y+8, r21	; 0x08
     aac:	89 e0       	ldi	r24, 0x09	; 9
     aae:	e8 2e       	mov	r14, r24
     ab0:	f1 2c       	mov	r15, r1
     ab2:	ec 0e       	add	r14, r28
     ab4:	fd 1e       	adc	r15, r29
     ab6:	ce 01       	movw	r24, r28
     ab8:	01 96       	adiw	r24, 0x01	; 1
     aba:	b7 01       	movw	r22, r14
     abc:	0e 94 4c 08 	call	0x1098	; 0x1098 <__unpack_f>
     ac0:	8e 01       	movw	r16, r28
     ac2:	0f 5e       	subi	r16, 0xEF	; 239
     ac4:	1f 4f       	sbci	r17, 0xFF	; 255
     ac6:	ce 01       	movw	r24, r28
     ac8:	05 96       	adiw	r24, 0x05	; 5
     aca:	b8 01       	movw	r22, r16
     acc:	0e 94 4c 08 	call	0x1098	; 0x1098 <__unpack_f>
     ad0:	89 85       	ldd	r24, Y+9	; 0x09
     ad2:	82 30       	cpi	r24, 0x02	; 2
     ad4:	40 f0       	brcs	.+16     	; 0xae6 <__ltsf2+0x56>
     ad6:	89 89       	ldd	r24, Y+17	; 0x11
     ad8:	82 30       	cpi	r24, 0x02	; 2
     ada:	28 f0       	brcs	.+10     	; 0xae6 <__ltsf2+0x56>
     adc:	c7 01       	movw	r24, r14
     ade:	b8 01       	movw	r22, r16
     ae0:	0e 94 c4 08 	call	0x1188	; 0x1188 <__fpcmp_parts_f>
     ae4:	01 c0       	rjmp	.+2      	; 0xae8 <__ltsf2+0x58>
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	68 96       	adiw	r28, 0x18	; 24
     aea:	e6 e0       	ldi	r30, 0x06	; 6
     aec:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <__epilogue_restores__+0x18>

00000af0 <__floatsisf>:
     af0:	a8 e0       	ldi	r26, 0x08	; 8
     af2:	b0 e0       	ldi	r27, 0x00	; 0
     af4:	ee e7       	ldi	r30, 0x7E	; 126
     af6:	f5 e0       	ldi	r31, 0x05	; 5
     af8:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <__prologue_saves__+0x12>
     afc:	9b 01       	movw	r18, r22
     afe:	ac 01       	movw	r20, r24
     b00:	83 e0       	ldi	r24, 0x03	; 3
     b02:	89 83       	std	Y+1, r24	; 0x01
     b04:	da 01       	movw	r26, r20
     b06:	c9 01       	movw	r24, r18
     b08:	88 27       	eor	r24, r24
     b0a:	b7 fd       	sbrc	r27, 7
     b0c:	83 95       	inc	r24
     b0e:	99 27       	eor	r25, r25
     b10:	aa 27       	eor	r26, r26
     b12:	bb 27       	eor	r27, r27
     b14:	b8 2e       	mov	r11, r24
     b16:	21 15       	cp	r18, r1
     b18:	31 05       	cpc	r19, r1
     b1a:	41 05       	cpc	r20, r1
     b1c:	51 05       	cpc	r21, r1
     b1e:	19 f4       	brne	.+6      	; 0xb26 <__floatsisf+0x36>
     b20:	82 e0       	ldi	r24, 0x02	; 2
     b22:	89 83       	std	Y+1, r24	; 0x01
     b24:	3a c0       	rjmp	.+116    	; 0xb9a <__floatsisf+0xaa>
     b26:	88 23       	and	r24, r24
     b28:	a9 f0       	breq	.+42     	; 0xb54 <__floatsisf+0x64>
     b2a:	20 30       	cpi	r18, 0x00	; 0
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	38 07       	cpc	r19, r24
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	48 07       	cpc	r20, r24
     b34:	80 e8       	ldi	r24, 0x80	; 128
     b36:	58 07       	cpc	r21, r24
     b38:	29 f4       	brne	.+10     	; 0xb44 <__floatsisf+0x54>
     b3a:	60 e0       	ldi	r22, 0x00	; 0
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	9f ec       	ldi	r25, 0xCF	; 207
     b42:	30 c0       	rjmp	.+96     	; 0xba4 <__floatsisf+0xb4>
     b44:	ee 24       	eor	r14, r14
     b46:	ff 24       	eor	r15, r15
     b48:	87 01       	movw	r16, r14
     b4a:	e2 1a       	sub	r14, r18
     b4c:	f3 0a       	sbc	r15, r19
     b4e:	04 0b       	sbc	r16, r20
     b50:	15 0b       	sbc	r17, r21
     b52:	02 c0       	rjmp	.+4      	; 0xb58 <__floatsisf+0x68>
     b54:	79 01       	movw	r14, r18
     b56:	8a 01       	movw	r16, r20
     b58:	8e e1       	ldi	r24, 0x1E	; 30
     b5a:	c8 2e       	mov	r12, r24
     b5c:	d1 2c       	mov	r13, r1
     b5e:	dc 82       	std	Y+4, r13	; 0x04
     b60:	cb 82       	std	Y+3, r12	; 0x03
     b62:	ed 82       	std	Y+5, r14	; 0x05
     b64:	fe 82       	std	Y+6, r15	; 0x06
     b66:	0f 83       	std	Y+7, r16	; 0x07
     b68:	18 87       	std	Y+8, r17	; 0x08
     b6a:	c8 01       	movw	r24, r16
     b6c:	b7 01       	movw	r22, r14
     b6e:	0e 94 28 07 	call	0xe50	; 0xe50 <__clzsi2>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	18 16       	cp	r1, r24
     b76:	19 06       	cpc	r1, r25
     b78:	84 f4       	brge	.+32     	; 0xb9a <__floatsisf+0xaa>
     b7a:	08 2e       	mov	r0, r24
     b7c:	04 c0       	rjmp	.+8      	; 0xb86 <__floatsisf+0x96>
     b7e:	ee 0c       	add	r14, r14
     b80:	ff 1c       	adc	r15, r15
     b82:	00 1f       	adc	r16, r16
     b84:	11 1f       	adc	r17, r17
     b86:	0a 94       	dec	r0
     b88:	d2 f7       	brpl	.-12     	; 0xb7e <__floatsisf+0x8e>
     b8a:	ed 82       	std	Y+5, r14	; 0x05
     b8c:	fe 82       	std	Y+6, r15	; 0x06
     b8e:	0f 83       	std	Y+7, r16	; 0x07
     b90:	18 87       	std	Y+8, r17	; 0x08
     b92:	c8 1a       	sub	r12, r24
     b94:	d9 0a       	sbc	r13, r25
     b96:	dc 82       	std	Y+4, r13	; 0x04
     b98:	cb 82       	std	Y+3, r12	; 0x03
     b9a:	ba 82       	std	Y+2, r11	; 0x02
     b9c:	ce 01       	movw	r24, r28
     b9e:	01 96       	adiw	r24, 0x01	; 1
     ba0:	0e 94 77 07 	call	0xeee	; 0xeee <__pack_f>
     ba4:	28 96       	adiw	r28, 0x08	; 8
     ba6:	e9 e0       	ldi	r30, 0x09	; 9
     ba8:	0c 94 7a 1a 	jmp	0x34f4	; 0x34f4 <__epilogue_restores__+0x12>

00000bac <__fixsfsi>:
     bac:	ac e0       	ldi	r26, 0x0C	; 12
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	ec ed       	ldi	r30, 0xDC	; 220
     bb2:	f5 e0       	ldi	r31, 0x05	; 5
     bb4:	0c 94 65 1a 	jmp	0x34ca	; 0x34ca <__prologue_saves__+0x20>
     bb8:	69 83       	std	Y+1, r22	; 0x01
     bba:	7a 83       	std	Y+2, r23	; 0x02
     bbc:	8b 83       	std	Y+3, r24	; 0x03
     bbe:	9c 83       	std	Y+4, r25	; 0x04
     bc0:	ce 01       	movw	r24, r28
     bc2:	01 96       	adiw	r24, 0x01	; 1
     bc4:	be 01       	movw	r22, r28
     bc6:	6b 5f       	subi	r22, 0xFB	; 251
     bc8:	7f 4f       	sbci	r23, 0xFF	; 255
     bca:	0e 94 4c 08 	call	0x1098	; 0x1098 <__unpack_f>
     bce:	8d 81       	ldd	r24, Y+5	; 0x05
     bd0:	82 30       	cpi	r24, 0x02	; 2
     bd2:	61 f1       	breq	.+88     	; 0xc2c <__fixsfsi+0x80>
     bd4:	82 30       	cpi	r24, 0x02	; 2
     bd6:	50 f1       	brcs	.+84     	; 0xc2c <__fixsfsi+0x80>
     bd8:	84 30       	cpi	r24, 0x04	; 4
     bda:	21 f4       	brne	.+8      	; 0xbe4 <__fixsfsi+0x38>
     bdc:	8e 81       	ldd	r24, Y+6	; 0x06
     bde:	88 23       	and	r24, r24
     be0:	51 f1       	breq	.+84     	; 0xc36 <__fixsfsi+0x8a>
     be2:	2e c0       	rjmp	.+92     	; 0xc40 <__fixsfsi+0x94>
     be4:	2f 81       	ldd	r18, Y+7	; 0x07
     be6:	38 85       	ldd	r19, Y+8	; 0x08
     be8:	37 fd       	sbrc	r19, 7
     bea:	20 c0       	rjmp	.+64     	; 0xc2c <__fixsfsi+0x80>
     bec:	6e 81       	ldd	r22, Y+6	; 0x06
     bee:	2f 31       	cpi	r18, 0x1F	; 31
     bf0:	31 05       	cpc	r19, r1
     bf2:	1c f0       	brlt	.+6      	; 0xbfa <__fixsfsi+0x4e>
     bf4:	66 23       	and	r22, r22
     bf6:	f9 f0       	breq	.+62     	; 0xc36 <__fixsfsi+0x8a>
     bf8:	23 c0       	rjmp	.+70     	; 0xc40 <__fixsfsi+0x94>
     bfa:	8e e1       	ldi	r24, 0x1E	; 30
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	82 1b       	sub	r24, r18
     c00:	93 0b       	sbc	r25, r19
     c02:	29 85       	ldd	r18, Y+9	; 0x09
     c04:	3a 85       	ldd	r19, Y+10	; 0x0a
     c06:	4b 85       	ldd	r20, Y+11	; 0x0b
     c08:	5c 85       	ldd	r21, Y+12	; 0x0c
     c0a:	04 c0       	rjmp	.+8      	; 0xc14 <__fixsfsi+0x68>
     c0c:	56 95       	lsr	r21
     c0e:	47 95       	ror	r20
     c10:	37 95       	ror	r19
     c12:	27 95       	ror	r18
     c14:	8a 95       	dec	r24
     c16:	d2 f7       	brpl	.-12     	; 0xc0c <__fixsfsi+0x60>
     c18:	66 23       	and	r22, r22
     c1a:	b1 f0       	breq	.+44     	; 0xc48 <__fixsfsi+0x9c>
     c1c:	50 95       	com	r21
     c1e:	40 95       	com	r20
     c20:	30 95       	com	r19
     c22:	21 95       	neg	r18
     c24:	3f 4f       	sbci	r19, 0xFF	; 255
     c26:	4f 4f       	sbci	r20, 0xFF	; 255
     c28:	5f 4f       	sbci	r21, 0xFF	; 255
     c2a:	0e c0       	rjmp	.+28     	; 0xc48 <__fixsfsi+0x9c>
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	40 e0       	ldi	r20, 0x00	; 0
     c32:	50 e0       	ldi	r21, 0x00	; 0
     c34:	09 c0       	rjmp	.+18     	; 0xc48 <__fixsfsi+0x9c>
     c36:	2f ef       	ldi	r18, 0xFF	; 255
     c38:	3f ef       	ldi	r19, 0xFF	; 255
     c3a:	4f ef       	ldi	r20, 0xFF	; 255
     c3c:	5f e7       	ldi	r21, 0x7F	; 127
     c3e:	04 c0       	rjmp	.+8      	; 0xc48 <__fixsfsi+0x9c>
     c40:	20 e0       	ldi	r18, 0x00	; 0
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	40 e0       	ldi	r20, 0x00	; 0
     c46:	50 e8       	ldi	r21, 0x80	; 128
     c48:	b9 01       	movw	r22, r18
     c4a:	ca 01       	movw	r24, r20
     c4c:	2c 96       	adiw	r28, 0x0c	; 12
     c4e:	e2 e0       	ldi	r30, 0x02	; 2
     c50:	0c 94 81 1a 	jmp	0x3502	; 0x3502 <__epilogue_restores__+0x20>

00000c54 <__floatunsisf>:
     c54:	a8 e0       	ldi	r26, 0x08	; 8
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e0 e3       	ldi	r30, 0x30	; 48
     c5a:	f6 e0       	ldi	r31, 0x06	; 6
     c5c:	0c 94 5d 1a 	jmp	0x34ba	; 0x34ba <__prologue_saves__+0x10>
     c60:	7b 01       	movw	r14, r22
     c62:	8c 01       	movw	r16, r24
     c64:	61 15       	cp	r22, r1
     c66:	71 05       	cpc	r23, r1
     c68:	81 05       	cpc	r24, r1
     c6a:	91 05       	cpc	r25, r1
     c6c:	19 f4       	brne	.+6      	; 0xc74 <__floatunsisf+0x20>
     c6e:	82 e0       	ldi	r24, 0x02	; 2
     c70:	89 83       	std	Y+1, r24	; 0x01
     c72:	60 c0       	rjmp	.+192    	; 0xd34 <__floatunsisf+0xe0>
     c74:	83 e0       	ldi	r24, 0x03	; 3
     c76:	89 83       	std	Y+1, r24	; 0x01
     c78:	8e e1       	ldi	r24, 0x1E	; 30
     c7a:	c8 2e       	mov	r12, r24
     c7c:	d1 2c       	mov	r13, r1
     c7e:	dc 82       	std	Y+4, r13	; 0x04
     c80:	cb 82       	std	Y+3, r12	; 0x03
     c82:	ed 82       	std	Y+5, r14	; 0x05
     c84:	fe 82       	std	Y+6, r15	; 0x06
     c86:	0f 83       	std	Y+7, r16	; 0x07
     c88:	18 87       	std	Y+8, r17	; 0x08
     c8a:	c8 01       	movw	r24, r16
     c8c:	b7 01       	movw	r22, r14
     c8e:	0e 94 28 07 	call	0xe50	; 0xe50 <__clzsi2>
     c92:	fc 01       	movw	r30, r24
     c94:	31 97       	sbiw	r30, 0x01	; 1
     c96:	f7 ff       	sbrs	r31, 7
     c98:	3b c0       	rjmp	.+118    	; 0xd10 <__floatunsisf+0xbc>
     c9a:	22 27       	eor	r18, r18
     c9c:	33 27       	eor	r19, r19
     c9e:	2e 1b       	sub	r18, r30
     ca0:	3f 0b       	sbc	r19, r31
     ca2:	57 01       	movw	r10, r14
     ca4:	68 01       	movw	r12, r16
     ca6:	02 2e       	mov	r0, r18
     ca8:	04 c0       	rjmp	.+8      	; 0xcb2 <__floatunsisf+0x5e>
     caa:	d6 94       	lsr	r13
     cac:	c7 94       	ror	r12
     cae:	b7 94       	ror	r11
     cb0:	a7 94       	ror	r10
     cb2:	0a 94       	dec	r0
     cb4:	d2 f7       	brpl	.-12     	; 0xcaa <__floatunsisf+0x56>
     cb6:	40 e0       	ldi	r20, 0x00	; 0
     cb8:	50 e0       	ldi	r21, 0x00	; 0
     cba:	60 e0       	ldi	r22, 0x00	; 0
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	a0 e0       	ldi	r26, 0x00	; 0
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	04 c0       	rjmp	.+8      	; 0xcd0 <__floatunsisf+0x7c>
     cc8:	88 0f       	add	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	aa 1f       	adc	r26, r26
     cce:	bb 1f       	adc	r27, r27
     cd0:	2a 95       	dec	r18
     cd2:	d2 f7       	brpl	.-12     	; 0xcc8 <__floatunsisf+0x74>
     cd4:	01 97       	sbiw	r24, 0x01	; 1
     cd6:	a1 09       	sbc	r26, r1
     cd8:	b1 09       	sbc	r27, r1
     cda:	8e 21       	and	r24, r14
     cdc:	9f 21       	and	r25, r15
     cde:	a0 23       	and	r26, r16
     ce0:	b1 23       	and	r27, r17
     ce2:	00 97       	sbiw	r24, 0x00	; 0
     ce4:	a1 05       	cpc	r26, r1
     ce6:	b1 05       	cpc	r27, r1
     ce8:	21 f0       	breq	.+8      	; 0xcf2 <__floatunsisf+0x9e>
     cea:	41 e0       	ldi	r20, 0x01	; 1
     cec:	50 e0       	ldi	r21, 0x00	; 0
     cee:	60 e0       	ldi	r22, 0x00	; 0
     cf0:	70 e0       	ldi	r23, 0x00	; 0
     cf2:	4a 29       	or	r20, r10
     cf4:	5b 29       	or	r21, r11
     cf6:	6c 29       	or	r22, r12
     cf8:	7d 29       	or	r23, r13
     cfa:	4d 83       	std	Y+5, r20	; 0x05
     cfc:	5e 83       	std	Y+6, r21	; 0x06
     cfe:	6f 83       	std	Y+7, r22	; 0x07
     d00:	78 87       	std	Y+8, r23	; 0x08
     d02:	8e e1       	ldi	r24, 0x1E	; 30
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	8e 1b       	sub	r24, r30
     d08:	9f 0b       	sbc	r25, r31
     d0a:	9c 83       	std	Y+4, r25	; 0x04
     d0c:	8b 83       	std	Y+3, r24	; 0x03
     d0e:	12 c0       	rjmp	.+36     	; 0xd34 <__floatunsisf+0xe0>
     d10:	30 97       	sbiw	r30, 0x00	; 0
     d12:	81 f0       	breq	.+32     	; 0xd34 <__floatunsisf+0xe0>
     d14:	0e 2e       	mov	r0, r30
     d16:	04 c0       	rjmp	.+8      	; 0xd20 <__floatunsisf+0xcc>
     d18:	ee 0c       	add	r14, r14
     d1a:	ff 1c       	adc	r15, r15
     d1c:	00 1f       	adc	r16, r16
     d1e:	11 1f       	adc	r17, r17
     d20:	0a 94       	dec	r0
     d22:	d2 f7       	brpl	.-12     	; 0xd18 <__floatunsisf+0xc4>
     d24:	ed 82       	std	Y+5, r14	; 0x05
     d26:	fe 82       	std	Y+6, r15	; 0x06
     d28:	0f 83       	std	Y+7, r16	; 0x07
     d2a:	18 87       	std	Y+8, r17	; 0x08
     d2c:	ce 1a       	sub	r12, r30
     d2e:	df 0a       	sbc	r13, r31
     d30:	dc 82       	std	Y+4, r13	; 0x04
     d32:	cb 82       	std	Y+3, r12	; 0x03
     d34:	1a 82       	std	Y+2, r1	; 0x02
     d36:	ce 01       	movw	r24, r28
     d38:	01 96       	adiw	r24, 0x01	; 1
     d3a:	0e 94 77 07 	call	0xeee	; 0xeee <__pack_f>
     d3e:	28 96       	adiw	r28, 0x08	; 8
     d40:	ea e0       	ldi	r30, 0x0A	; 10
     d42:	0c 94 79 1a 	jmp	0x34f2	; 0x34f2 <__epilogue_restores__+0x10>

00000d46 <__ashrdi3>:
     d46:	ef 92       	push	r14
     d48:	ff 92       	push	r15
     d4a:	0f 93       	push	r16
     d4c:	df 93       	push	r29
     d4e:	cf 93       	push	r28
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
     d54:	60 97       	sbiw	r28, 0x10	; 16
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	f8 94       	cli
     d5a:	de bf       	out	0x3e, r29	; 62
     d5c:	0f be       	out	0x3f, r0	; 63
     d5e:	cd bf       	out	0x3d, r28	; 61
     d60:	a8 2f       	mov	r26, r24
     d62:	00 23       	and	r16, r16
     d64:	09 f4       	brne	.+2      	; 0xd68 <__ashrdi3+0x22>
     d66:	67 c0       	rjmp	.+206    	; 0xe36 <__ashrdi3+0xf0>
     d68:	7e 01       	movw	r14, r28
     d6a:	08 94       	sec
     d6c:	e1 1c       	adc	r14, r1
     d6e:	f1 1c       	adc	r15, r1
     d70:	88 e0       	ldi	r24, 0x08	; 8
     d72:	f7 01       	movw	r30, r14
     d74:	11 92       	st	Z+, r1
     d76:	8a 95       	dec	r24
     d78:	e9 f7       	brne	.-6      	; 0xd74 <__ashrdi3+0x2e>
     d7a:	29 83       	std	Y+1, r18	; 0x01
     d7c:	3a 83       	std	Y+2, r19	; 0x02
     d7e:	4b 83       	std	Y+3, r20	; 0x03
     d80:	5c 83       	std	Y+4, r21	; 0x04
     d82:	6d 83       	std	Y+5, r22	; 0x05
     d84:	7e 83       	std	Y+6, r23	; 0x06
     d86:	af 83       	std	Y+7, r26	; 0x07
     d88:	98 87       	std	Y+8, r25	; 0x08
     d8a:	80 e2       	ldi	r24, 0x20	; 32
     d8c:	80 1b       	sub	r24, r16
     d8e:	4d 81       	ldd	r20, Y+5	; 0x05
     d90:	5e 81       	ldd	r21, Y+6	; 0x06
     d92:	6f 81       	ldd	r22, Y+7	; 0x07
     d94:	78 85       	ldd	r23, Y+8	; 0x08
     d96:	e8 2f       	mov	r30, r24
     d98:	ff 27       	eor	r31, r31
     d9a:	e7 fd       	sbrc	r30, 7
     d9c:	f0 95       	com	r31
     d9e:	18 16       	cp	r1, r24
     da0:	b4 f0       	brlt	.+44     	; 0xdce <__ashrdi3+0x88>
     da2:	db 01       	movw	r26, r22
     da4:	ca 01       	movw	r24, r20
     da6:	bb 0f       	add	r27, r27
     da8:	88 0b       	sbc	r24, r24
     daa:	98 2f       	mov	r25, r24
     dac:	dc 01       	movw	r26, r24
     dae:	8d 87       	std	Y+13, r24	; 0x0d
     db0:	9e 87       	std	Y+14, r25	; 0x0e
     db2:	af 87       	std	Y+15, r26	; 0x0f
     db4:	b8 8b       	std	Y+16, r27	; 0x10
     db6:	88 27       	eor	r24, r24
     db8:	99 27       	eor	r25, r25
     dba:	8e 1b       	sub	r24, r30
     dbc:	9f 0b       	sbc	r25, r31
     dbe:	04 c0       	rjmp	.+8      	; 0xdc8 <__ashrdi3+0x82>
     dc0:	75 95       	asr	r23
     dc2:	67 95       	ror	r22
     dc4:	57 95       	ror	r21
     dc6:	47 95       	ror	r20
     dc8:	8a 95       	dec	r24
     dca:	d2 f7       	brpl	.-12     	; 0xdc0 <__ashrdi3+0x7a>
     dcc:	28 c0       	rjmp	.+80     	; 0xe1e <__ashrdi3+0xd8>
     dce:	20 2f       	mov	r18, r16
     dd0:	33 27       	eor	r19, r19
     dd2:	27 fd       	sbrc	r18, 7
     dd4:	30 95       	com	r19
     dd6:	db 01       	movw	r26, r22
     dd8:	ca 01       	movw	r24, r20
     dda:	02 2e       	mov	r0, r18
     ddc:	04 c0       	rjmp	.+8      	; 0xde6 <__ashrdi3+0xa0>
     dde:	b5 95       	asr	r27
     de0:	a7 95       	ror	r26
     de2:	97 95       	ror	r25
     de4:	87 95       	ror	r24
     de6:	0a 94       	dec	r0
     de8:	d2 f7       	brpl	.-12     	; 0xdde <__ashrdi3+0x98>
     dea:	8d 87       	std	Y+13, r24	; 0x0d
     dec:	9e 87       	std	Y+14, r25	; 0x0e
     dee:	af 87       	std	Y+15, r26	; 0x0f
     df0:	b8 8b       	std	Y+16, r27	; 0x10
     df2:	04 c0       	rjmp	.+8      	; 0xdfc <__ashrdi3+0xb6>
     df4:	44 0f       	add	r20, r20
     df6:	55 1f       	adc	r21, r21
     df8:	66 1f       	adc	r22, r22
     dfa:	77 1f       	adc	r23, r23
     dfc:	ea 95       	dec	r30
     dfe:	d2 f7       	brpl	.-12     	; 0xdf4 <__ashrdi3+0xae>
     e00:	89 81       	ldd	r24, Y+1	; 0x01
     e02:	9a 81       	ldd	r25, Y+2	; 0x02
     e04:	ab 81       	ldd	r26, Y+3	; 0x03
     e06:	bc 81       	ldd	r27, Y+4	; 0x04
     e08:	04 c0       	rjmp	.+8      	; 0xe12 <__ashrdi3+0xcc>
     e0a:	b6 95       	lsr	r27
     e0c:	a7 95       	ror	r26
     e0e:	97 95       	ror	r25
     e10:	87 95       	ror	r24
     e12:	2a 95       	dec	r18
     e14:	d2 f7       	brpl	.-12     	; 0xe0a <__ashrdi3+0xc4>
     e16:	48 2b       	or	r20, r24
     e18:	59 2b       	or	r21, r25
     e1a:	6a 2b       	or	r22, r26
     e1c:	7b 2b       	or	r23, r27
     e1e:	49 87       	std	Y+9, r20	; 0x09
     e20:	5a 87       	std	Y+10, r21	; 0x0a
     e22:	6b 87       	std	Y+11, r22	; 0x0b
     e24:	7c 87       	std	Y+12, r23	; 0x0c
     e26:	29 85       	ldd	r18, Y+9	; 0x09
     e28:	3a 85       	ldd	r19, Y+10	; 0x0a
     e2a:	4b 85       	ldd	r20, Y+11	; 0x0b
     e2c:	5c 85       	ldd	r21, Y+12	; 0x0c
     e2e:	6d 85       	ldd	r22, Y+13	; 0x0d
     e30:	7e 85       	ldd	r23, Y+14	; 0x0e
     e32:	af 85       	ldd	r26, Y+15	; 0x0f
     e34:	98 89       	ldd	r25, Y+16	; 0x10
     e36:	8a 2f       	mov	r24, r26
     e38:	60 96       	adiw	r28, 0x10	; 16
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	f8 94       	cli
     e3e:	de bf       	out	0x3e, r29	; 62
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	cd bf       	out	0x3d, r28	; 61
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	0f 91       	pop	r16
     e4a:	ff 90       	pop	r15
     e4c:	ef 90       	pop	r14
     e4e:	08 95       	ret

00000e50 <__clzsi2>:
     e50:	ef 92       	push	r14
     e52:	ff 92       	push	r15
     e54:	0f 93       	push	r16
     e56:	1f 93       	push	r17
     e58:	7b 01       	movw	r14, r22
     e5a:	8c 01       	movw	r16, r24
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	e8 16       	cp	r14, r24
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	f8 06       	cpc	r15, r24
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	08 07       	cpc	r16, r24
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	18 07       	cpc	r17, r24
     e6c:	88 f4       	brcc	.+34     	; 0xe90 <__clzsi2+0x40>
     e6e:	8f ef       	ldi	r24, 0xFF	; 255
     e70:	e8 16       	cp	r14, r24
     e72:	f1 04       	cpc	r15, r1
     e74:	01 05       	cpc	r16, r1
     e76:	11 05       	cpc	r17, r1
     e78:	31 f0       	breq	.+12     	; 0xe86 <__clzsi2+0x36>
     e7a:	28 f0       	brcs	.+10     	; 0xe86 <__clzsi2+0x36>
     e7c:	88 e0       	ldi	r24, 0x08	; 8
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	a0 e0       	ldi	r26, 0x00	; 0
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	17 c0       	rjmp	.+46     	; 0xeb4 <__clzsi2+0x64>
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	a0 e0       	ldi	r26, 0x00	; 0
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	12 c0       	rjmp	.+36     	; 0xeb4 <__clzsi2+0x64>
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	e8 16       	cp	r14, r24
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	f8 06       	cpc	r15, r24
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	08 07       	cpc	r16, r24
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	18 07       	cpc	r17, r24
     ea0:	28 f0       	brcs	.+10     	; 0xeac <__clzsi2+0x5c>
     ea2:	88 e1       	ldi	r24, 0x18	; 24
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	a0 e0       	ldi	r26, 0x00	; 0
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	04 c0       	rjmp	.+8      	; 0xeb4 <__clzsi2+0x64>
     eac:	80 e1       	ldi	r24, 0x10	; 16
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	a0 e0       	ldi	r26, 0x00	; 0
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	20 e2       	ldi	r18, 0x20	; 32
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	40 e0       	ldi	r20, 0x00	; 0
     eba:	50 e0       	ldi	r21, 0x00	; 0
     ebc:	28 1b       	sub	r18, r24
     ebe:	39 0b       	sbc	r19, r25
     ec0:	4a 0b       	sbc	r20, r26
     ec2:	5b 0b       	sbc	r21, r27
     ec4:	04 c0       	rjmp	.+8      	; 0xece <__clzsi2+0x7e>
     ec6:	16 95       	lsr	r17
     ec8:	07 95       	ror	r16
     eca:	f7 94       	ror	r15
     ecc:	e7 94       	ror	r14
     ece:	8a 95       	dec	r24
     ed0:	d2 f7       	brpl	.-12     	; 0xec6 <__clzsi2+0x76>
     ed2:	f7 01       	movw	r30, r14
     ed4:	e8 59       	subi	r30, 0x98	; 152
     ed6:	ff 4f       	sbci	r31, 0xFF	; 255
     ed8:	80 81       	ld	r24, Z
     eda:	28 1b       	sub	r18, r24
     edc:	31 09       	sbc	r19, r1
     ede:	41 09       	sbc	r20, r1
     ee0:	51 09       	sbc	r21, r1
     ee2:	c9 01       	movw	r24, r18
     ee4:	1f 91       	pop	r17
     ee6:	0f 91       	pop	r16
     ee8:	ff 90       	pop	r15
     eea:	ef 90       	pop	r14
     eec:	08 95       	ret

00000eee <__pack_f>:
     eee:	df 92       	push	r13
     ef0:	ef 92       	push	r14
     ef2:	ff 92       	push	r15
     ef4:	0f 93       	push	r16
     ef6:	1f 93       	push	r17
     ef8:	fc 01       	movw	r30, r24
     efa:	e4 80       	ldd	r14, Z+4	; 0x04
     efc:	f5 80       	ldd	r15, Z+5	; 0x05
     efe:	06 81       	ldd	r16, Z+6	; 0x06
     f00:	17 81       	ldd	r17, Z+7	; 0x07
     f02:	d1 80       	ldd	r13, Z+1	; 0x01
     f04:	80 81       	ld	r24, Z
     f06:	82 30       	cpi	r24, 0x02	; 2
     f08:	48 f4       	brcc	.+18     	; 0xf1c <__pack_f+0x2e>
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	a0 e1       	ldi	r26, 0x10	; 16
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e8 2a       	or	r14, r24
     f14:	f9 2a       	or	r15, r25
     f16:	0a 2b       	or	r16, r26
     f18:	1b 2b       	or	r17, r27
     f1a:	a5 c0       	rjmp	.+330    	; 0x1066 <__pack_f+0x178>
     f1c:	84 30       	cpi	r24, 0x04	; 4
     f1e:	09 f4       	brne	.+2      	; 0xf22 <__pack_f+0x34>
     f20:	9f c0       	rjmp	.+318    	; 0x1060 <__pack_f+0x172>
     f22:	82 30       	cpi	r24, 0x02	; 2
     f24:	21 f4       	brne	.+8      	; 0xf2e <__pack_f+0x40>
     f26:	ee 24       	eor	r14, r14
     f28:	ff 24       	eor	r15, r15
     f2a:	87 01       	movw	r16, r14
     f2c:	05 c0       	rjmp	.+10     	; 0xf38 <__pack_f+0x4a>
     f2e:	e1 14       	cp	r14, r1
     f30:	f1 04       	cpc	r15, r1
     f32:	01 05       	cpc	r16, r1
     f34:	11 05       	cpc	r17, r1
     f36:	19 f4       	brne	.+6      	; 0xf3e <__pack_f+0x50>
     f38:	e0 e0       	ldi	r30, 0x00	; 0
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	96 c0       	rjmp	.+300    	; 0x106a <__pack_f+0x17c>
     f3e:	62 81       	ldd	r22, Z+2	; 0x02
     f40:	73 81       	ldd	r23, Z+3	; 0x03
     f42:	9f ef       	ldi	r25, 0xFF	; 255
     f44:	62 38       	cpi	r22, 0x82	; 130
     f46:	79 07       	cpc	r23, r25
     f48:	0c f0       	brlt	.+2      	; 0xf4c <__pack_f+0x5e>
     f4a:	5b c0       	rjmp	.+182    	; 0x1002 <__pack_f+0x114>
     f4c:	22 e8       	ldi	r18, 0x82	; 130
     f4e:	3f ef       	ldi	r19, 0xFF	; 255
     f50:	26 1b       	sub	r18, r22
     f52:	37 0b       	sbc	r19, r23
     f54:	2a 31       	cpi	r18, 0x1A	; 26
     f56:	31 05       	cpc	r19, r1
     f58:	2c f0       	brlt	.+10     	; 0xf64 <__pack_f+0x76>
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	40 e0       	ldi	r20, 0x00	; 0
     f60:	50 e0       	ldi	r21, 0x00	; 0
     f62:	2a c0       	rjmp	.+84     	; 0xfb8 <__pack_f+0xca>
     f64:	b8 01       	movw	r22, r16
     f66:	a7 01       	movw	r20, r14
     f68:	02 2e       	mov	r0, r18
     f6a:	04 c0       	rjmp	.+8      	; 0xf74 <__pack_f+0x86>
     f6c:	76 95       	lsr	r23
     f6e:	67 95       	ror	r22
     f70:	57 95       	ror	r21
     f72:	47 95       	ror	r20
     f74:	0a 94       	dec	r0
     f76:	d2 f7       	brpl	.-12     	; 0xf6c <__pack_f+0x7e>
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	a0 e0       	ldi	r26, 0x00	; 0
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	04 c0       	rjmp	.+8      	; 0xf8a <__pack_f+0x9c>
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	aa 1f       	adc	r26, r26
     f88:	bb 1f       	adc	r27, r27
     f8a:	2a 95       	dec	r18
     f8c:	d2 f7       	brpl	.-12     	; 0xf82 <__pack_f+0x94>
     f8e:	01 97       	sbiw	r24, 0x01	; 1
     f90:	a1 09       	sbc	r26, r1
     f92:	b1 09       	sbc	r27, r1
     f94:	8e 21       	and	r24, r14
     f96:	9f 21       	and	r25, r15
     f98:	a0 23       	and	r26, r16
     f9a:	b1 23       	and	r27, r17
     f9c:	00 97       	sbiw	r24, 0x00	; 0
     f9e:	a1 05       	cpc	r26, r1
     fa0:	b1 05       	cpc	r27, r1
     fa2:	21 f0       	breq	.+8      	; 0xfac <__pack_f+0xbe>
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	a0 e0       	ldi	r26, 0x00	; 0
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	9a 01       	movw	r18, r20
     fae:	ab 01       	movw	r20, r22
     fb0:	28 2b       	or	r18, r24
     fb2:	39 2b       	or	r19, r25
     fb4:	4a 2b       	or	r20, r26
     fb6:	5b 2b       	or	r21, r27
     fb8:	da 01       	movw	r26, r20
     fba:	c9 01       	movw	r24, r18
     fbc:	8f 77       	andi	r24, 0x7F	; 127
     fbe:	90 70       	andi	r25, 0x00	; 0
     fc0:	a0 70       	andi	r26, 0x00	; 0
     fc2:	b0 70       	andi	r27, 0x00	; 0
     fc4:	80 34       	cpi	r24, 0x40	; 64
     fc6:	91 05       	cpc	r25, r1
     fc8:	a1 05       	cpc	r26, r1
     fca:	b1 05       	cpc	r27, r1
     fcc:	39 f4       	brne	.+14     	; 0xfdc <__pack_f+0xee>
     fce:	27 ff       	sbrs	r18, 7
     fd0:	09 c0       	rjmp	.+18     	; 0xfe4 <__pack_f+0xf6>
     fd2:	20 5c       	subi	r18, 0xC0	; 192
     fd4:	3f 4f       	sbci	r19, 0xFF	; 255
     fd6:	4f 4f       	sbci	r20, 0xFF	; 255
     fd8:	5f 4f       	sbci	r21, 0xFF	; 255
     fda:	04 c0       	rjmp	.+8      	; 0xfe4 <__pack_f+0xf6>
     fdc:	21 5c       	subi	r18, 0xC1	; 193
     fde:	3f 4f       	sbci	r19, 0xFF	; 255
     fe0:	4f 4f       	sbci	r20, 0xFF	; 255
     fe2:	5f 4f       	sbci	r21, 0xFF	; 255
     fe4:	e0 e0       	ldi	r30, 0x00	; 0
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	20 30       	cpi	r18, 0x00	; 0
     fea:	a0 e0       	ldi	r26, 0x00	; 0
     fec:	3a 07       	cpc	r19, r26
     fee:	a0 e0       	ldi	r26, 0x00	; 0
     ff0:	4a 07       	cpc	r20, r26
     ff2:	a0 e4       	ldi	r26, 0x40	; 64
     ff4:	5a 07       	cpc	r21, r26
     ff6:	10 f0       	brcs	.+4      	; 0xffc <__pack_f+0x10e>
     ff8:	e1 e0       	ldi	r30, 0x01	; 1
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	79 01       	movw	r14, r18
     ffe:	8a 01       	movw	r16, r20
    1000:	27 c0       	rjmp	.+78     	; 0x1050 <__pack_f+0x162>
    1002:	60 38       	cpi	r22, 0x80	; 128
    1004:	71 05       	cpc	r23, r1
    1006:	64 f5       	brge	.+88     	; 0x1060 <__pack_f+0x172>
    1008:	fb 01       	movw	r30, r22
    100a:	e1 58       	subi	r30, 0x81	; 129
    100c:	ff 4f       	sbci	r31, 0xFF	; 255
    100e:	d8 01       	movw	r26, r16
    1010:	c7 01       	movw	r24, r14
    1012:	8f 77       	andi	r24, 0x7F	; 127
    1014:	90 70       	andi	r25, 0x00	; 0
    1016:	a0 70       	andi	r26, 0x00	; 0
    1018:	b0 70       	andi	r27, 0x00	; 0
    101a:	80 34       	cpi	r24, 0x40	; 64
    101c:	91 05       	cpc	r25, r1
    101e:	a1 05       	cpc	r26, r1
    1020:	b1 05       	cpc	r27, r1
    1022:	39 f4       	brne	.+14     	; 0x1032 <__pack_f+0x144>
    1024:	e7 fe       	sbrs	r14, 7
    1026:	0d c0       	rjmp	.+26     	; 0x1042 <__pack_f+0x154>
    1028:	80 e4       	ldi	r24, 0x40	; 64
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	a0 e0       	ldi	r26, 0x00	; 0
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	04 c0       	rjmp	.+8      	; 0x103a <__pack_f+0x14c>
    1032:	8f e3       	ldi	r24, 0x3F	; 63
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	a0 e0       	ldi	r26, 0x00	; 0
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e8 0e       	add	r14, r24
    103c:	f9 1e       	adc	r15, r25
    103e:	0a 1f       	adc	r16, r26
    1040:	1b 1f       	adc	r17, r27
    1042:	17 ff       	sbrs	r17, 7
    1044:	05 c0       	rjmp	.+10     	; 0x1050 <__pack_f+0x162>
    1046:	16 95       	lsr	r17
    1048:	07 95       	ror	r16
    104a:	f7 94       	ror	r15
    104c:	e7 94       	ror	r14
    104e:	31 96       	adiw	r30, 0x01	; 1
    1050:	87 e0       	ldi	r24, 0x07	; 7
    1052:	16 95       	lsr	r17
    1054:	07 95       	ror	r16
    1056:	f7 94       	ror	r15
    1058:	e7 94       	ror	r14
    105a:	8a 95       	dec	r24
    105c:	d1 f7       	brne	.-12     	; 0x1052 <__pack_f+0x164>
    105e:	05 c0       	rjmp	.+10     	; 0x106a <__pack_f+0x17c>
    1060:	ee 24       	eor	r14, r14
    1062:	ff 24       	eor	r15, r15
    1064:	87 01       	movw	r16, r14
    1066:	ef ef       	ldi	r30, 0xFF	; 255
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	6e 2f       	mov	r22, r30
    106c:	67 95       	ror	r22
    106e:	66 27       	eor	r22, r22
    1070:	67 95       	ror	r22
    1072:	90 2f       	mov	r25, r16
    1074:	9f 77       	andi	r25, 0x7F	; 127
    1076:	d7 94       	ror	r13
    1078:	dd 24       	eor	r13, r13
    107a:	d7 94       	ror	r13
    107c:	8e 2f       	mov	r24, r30
    107e:	86 95       	lsr	r24
    1080:	49 2f       	mov	r20, r25
    1082:	46 2b       	or	r20, r22
    1084:	58 2f       	mov	r21, r24
    1086:	5d 29       	or	r21, r13
    1088:	b7 01       	movw	r22, r14
    108a:	ca 01       	movw	r24, r20
    108c:	1f 91       	pop	r17
    108e:	0f 91       	pop	r16
    1090:	ff 90       	pop	r15
    1092:	ef 90       	pop	r14
    1094:	df 90       	pop	r13
    1096:	08 95       	ret

00001098 <__unpack_f>:
    1098:	fc 01       	movw	r30, r24
    109a:	db 01       	movw	r26, r22
    109c:	40 81       	ld	r20, Z
    109e:	51 81       	ldd	r21, Z+1	; 0x01
    10a0:	22 81       	ldd	r18, Z+2	; 0x02
    10a2:	62 2f       	mov	r22, r18
    10a4:	6f 77       	andi	r22, 0x7F	; 127
    10a6:	70 e0       	ldi	r23, 0x00	; 0
    10a8:	22 1f       	adc	r18, r18
    10aa:	22 27       	eor	r18, r18
    10ac:	22 1f       	adc	r18, r18
    10ae:	93 81       	ldd	r25, Z+3	; 0x03
    10b0:	89 2f       	mov	r24, r25
    10b2:	88 0f       	add	r24, r24
    10b4:	82 2b       	or	r24, r18
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	99 1f       	adc	r25, r25
    10bc:	99 27       	eor	r25, r25
    10be:	99 1f       	adc	r25, r25
    10c0:	11 96       	adiw	r26, 0x01	; 1
    10c2:	9c 93       	st	X, r25
    10c4:	11 97       	sbiw	r26, 0x01	; 1
    10c6:	21 15       	cp	r18, r1
    10c8:	31 05       	cpc	r19, r1
    10ca:	a9 f5       	brne	.+106    	; 0x1136 <__unpack_f+0x9e>
    10cc:	41 15       	cp	r20, r1
    10ce:	51 05       	cpc	r21, r1
    10d0:	61 05       	cpc	r22, r1
    10d2:	71 05       	cpc	r23, r1
    10d4:	11 f4       	brne	.+4      	; 0x10da <__unpack_f+0x42>
    10d6:	82 e0       	ldi	r24, 0x02	; 2
    10d8:	37 c0       	rjmp	.+110    	; 0x1148 <__unpack_f+0xb0>
    10da:	82 e8       	ldi	r24, 0x82	; 130
    10dc:	9f ef       	ldi	r25, 0xFF	; 255
    10de:	13 96       	adiw	r26, 0x03	; 3
    10e0:	9c 93       	st	X, r25
    10e2:	8e 93       	st	-X, r24
    10e4:	12 97       	sbiw	r26, 0x02	; 2
    10e6:	9a 01       	movw	r18, r20
    10e8:	ab 01       	movw	r20, r22
    10ea:	67 e0       	ldi	r22, 0x07	; 7
    10ec:	22 0f       	add	r18, r18
    10ee:	33 1f       	adc	r19, r19
    10f0:	44 1f       	adc	r20, r20
    10f2:	55 1f       	adc	r21, r21
    10f4:	6a 95       	dec	r22
    10f6:	d1 f7       	brne	.-12     	; 0x10ec <__unpack_f+0x54>
    10f8:	83 e0       	ldi	r24, 0x03	; 3
    10fa:	8c 93       	st	X, r24
    10fc:	0d c0       	rjmp	.+26     	; 0x1118 <__unpack_f+0x80>
    10fe:	22 0f       	add	r18, r18
    1100:	33 1f       	adc	r19, r19
    1102:	44 1f       	adc	r20, r20
    1104:	55 1f       	adc	r21, r21
    1106:	12 96       	adiw	r26, 0x02	; 2
    1108:	8d 91       	ld	r24, X+
    110a:	9c 91       	ld	r25, X
    110c:	13 97       	sbiw	r26, 0x03	; 3
    110e:	01 97       	sbiw	r24, 0x01	; 1
    1110:	13 96       	adiw	r26, 0x03	; 3
    1112:	9c 93       	st	X, r25
    1114:	8e 93       	st	-X, r24
    1116:	12 97       	sbiw	r26, 0x02	; 2
    1118:	20 30       	cpi	r18, 0x00	; 0
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	38 07       	cpc	r19, r24
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	48 07       	cpc	r20, r24
    1122:	80 e4       	ldi	r24, 0x40	; 64
    1124:	58 07       	cpc	r21, r24
    1126:	58 f3       	brcs	.-42     	; 0x10fe <__unpack_f+0x66>
    1128:	14 96       	adiw	r26, 0x04	; 4
    112a:	2d 93       	st	X+, r18
    112c:	3d 93       	st	X+, r19
    112e:	4d 93       	st	X+, r20
    1130:	5c 93       	st	X, r21
    1132:	17 97       	sbiw	r26, 0x07	; 7
    1134:	08 95       	ret
    1136:	2f 3f       	cpi	r18, 0xFF	; 255
    1138:	31 05       	cpc	r19, r1
    113a:	79 f4       	brne	.+30     	; 0x115a <__unpack_f+0xc2>
    113c:	41 15       	cp	r20, r1
    113e:	51 05       	cpc	r21, r1
    1140:	61 05       	cpc	r22, r1
    1142:	71 05       	cpc	r23, r1
    1144:	19 f4       	brne	.+6      	; 0x114c <__unpack_f+0xb4>
    1146:	84 e0       	ldi	r24, 0x04	; 4
    1148:	8c 93       	st	X, r24
    114a:	08 95       	ret
    114c:	64 ff       	sbrs	r22, 4
    114e:	03 c0       	rjmp	.+6      	; 0x1156 <__unpack_f+0xbe>
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	8c 93       	st	X, r24
    1154:	12 c0       	rjmp	.+36     	; 0x117a <__unpack_f+0xe2>
    1156:	1c 92       	st	X, r1
    1158:	10 c0       	rjmp	.+32     	; 0x117a <__unpack_f+0xe2>
    115a:	2f 57       	subi	r18, 0x7F	; 127
    115c:	30 40       	sbci	r19, 0x00	; 0
    115e:	13 96       	adiw	r26, 0x03	; 3
    1160:	3c 93       	st	X, r19
    1162:	2e 93       	st	-X, r18
    1164:	12 97       	sbiw	r26, 0x02	; 2
    1166:	83 e0       	ldi	r24, 0x03	; 3
    1168:	8c 93       	st	X, r24
    116a:	87 e0       	ldi	r24, 0x07	; 7
    116c:	44 0f       	add	r20, r20
    116e:	55 1f       	adc	r21, r21
    1170:	66 1f       	adc	r22, r22
    1172:	77 1f       	adc	r23, r23
    1174:	8a 95       	dec	r24
    1176:	d1 f7       	brne	.-12     	; 0x116c <__unpack_f+0xd4>
    1178:	70 64       	ori	r23, 0x40	; 64
    117a:	14 96       	adiw	r26, 0x04	; 4
    117c:	4d 93       	st	X+, r20
    117e:	5d 93       	st	X+, r21
    1180:	6d 93       	st	X+, r22
    1182:	7c 93       	st	X, r23
    1184:	17 97       	sbiw	r26, 0x07	; 7
    1186:	08 95       	ret

00001188 <__fpcmp_parts_f>:
    1188:	1f 93       	push	r17
    118a:	dc 01       	movw	r26, r24
    118c:	fb 01       	movw	r30, r22
    118e:	9c 91       	ld	r25, X
    1190:	92 30       	cpi	r25, 0x02	; 2
    1192:	08 f4       	brcc	.+2      	; 0x1196 <__fpcmp_parts_f+0xe>
    1194:	47 c0       	rjmp	.+142    	; 0x1224 <__fpcmp_parts_f+0x9c>
    1196:	80 81       	ld	r24, Z
    1198:	82 30       	cpi	r24, 0x02	; 2
    119a:	08 f4       	brcc	.+2      	; 0x119e <__fpcmp_parts_f+0x16>
    119c:	43 c0       	rjmp	.+134    	; 0x1224 <__fpcmp_parts_f+0x9c>
    119e:	94 30       	cpi	r25, 0x04	; 4
    11a0:	51 f4       	brne	.+20     	; 0x11b6 <__fpcmp_parts_f+0x2e>
    11a2:	11 96       	adiw	r26, 0x01	; 1
    11a4:	1c 91       	ld	r17, X
    11a6:	84 30       	cpi	r24, 0x04	; 4
    11a8:	99 f5       	brne	.+102    	; 0x1210 <__fpcmp_parts_f+0x88>
    11aa:	81 81       	ldd	r24, Z+1	; 0x01
    11ac:	68 2f       	mov	r22, r24
    11ae:	70 e0       	ldi	r23, 0x00	; 0
    11b0:	61 1b       	sub	r22, r17
    11b2:	71 09       	sbc	r23, r1
    11b4:	3f c0       	rjmp	.+126    	; 0x1234 <__fpcmp_parts_f+0xac>
    11b6:	84 30       	cpi	r24, 0x04	; 4
    11b8:	21 f0       	breq	.+8      	; 0x11c2 <__fpcmp_parts_f+0x3a>
    11ba:	92 30       	cpi	r25, 0x02	; 2
    11bc:	31 f4       	brne	.+12     	; 0x11ca <__fpcmp_parts_f+0x42>
    11be:	82 30       	cpi	r24, 0x02	; 2
    11c0:	b9 f1       	breq	.+110    	; 0x1230 <__fpcmp_parts_f+0xa8>
    11c2:	81 81       	ldd	r24, Z+1	; 0x01
    11c4:	88 23       	and	r24, r24
    11c6:	89 f1       	breq	.+98     	; 0x122a <__fpcmp_parts_f+0xa2>
    11c8:	2d c0       	rjmp	.+90     	; 0x1224 <__fpcmp_parts_f+0x9c>
    11ca:	11 96       	adiw	r26, 0x01	; 1
    11cc:	1c 91       	ld	r17, X
    11ce:	11 97       	sbiw	r26, 0x01	; 1
    11d0:	82 30       	cpi	r24, 0x02	; 2
    11d2:	f1 f0       	breq	.+60     	; 0x1210 <__fpcmp_parts_f+0x88>
    11d4:	81 81       	ldd	r24, Z+1	; 0x01
    11d6:	18 17       	cp	r17, r24
    11d8:	d9 f4       	brne	.+54     	; 0x1210 <__fpcmp_parts_f+0x88>
    11da:	12 96       	adiw	r26, 0x02	; 2
    11dc:	2d 91       	ld	r18, X+
    11de:	3c 91       	ld	r19, X
    11e0:	13 97       	sbiw	r26, 0x03	; 3
    11e2:	82 81       	ldd	r24, Z+2	; 0x02
    11e4:	93 81       	ldd	r25, Z+3	; 0x03
    11e6:	82 17       	cp	r24, r18
    11e8:	93 07       	cpc	r25, r19
    11ea:	94 f0       	brlt	.+36     	; 0x1210 <__fpcmp_parts_f+0x88>
    11ec:	28 17       	cp	r18, r24
    11ee:	39 07       	cpc	r19, r25
    11f0:	bc f0       	brlt	.+46     	; 0x1220 <__fpcmp_parts_f+0x98>
    11f2:	14 96       	adiw	r26, 0x04	; 4
    11f4:	8d 91       	ld	r24, X+
    11f6:	9d 91       	ld	r25, X+
    11f8:	0d 90       	ld	r0, X+
    11fa:	bc 91       	ld	r27, X
    11fc:	a0 2d       	mov	r26, r0
    11fe:	24 81       	ldd	r18, Z+4	; 0x04
    1200:	35 81       	ldd	r19, Z+5	; 0x05
    1202:	46 81       	ldd	r20, Z+6	; 0x06
    1204:	57 81       	ldd	r21, Z+7	; 0x07
    1206:	28 17       	cp	r18, r24
    1208:	39 07       	cpc	r19, r25
    120a:	4a 07       	cpc	r20, r26
    120c:	5b 07       	cpc	r21, r27
    120e:	18 f4       	brcc	.+6      	; 0x1216 <__fpcmp_parts_f+0x8e>
    1210:	11 23       	and	r17, r17
    1212:	41 f0       	breq	.+16     	; 0x1224 <__fpcmp_parts_f+0x9c>
    1214:	0a c0       	rjmp	.+20     	; 0x122a <__fpcmp_parts_f+0xa2>
    1216:	82 17       	cp	r24, r18
    1218:	93 07       	cpc	r25, r19
    121a:	a4 07       	cpc	r26, r20
    121c:	b5 07       	cpc	r27, r21
    121e:	40 f4       	brcc	.+16     	; 0x1230 <__fpcmp_parts_f+0xa8>
    1220:	11 23       	and	r17, r17
    1222:	19 f0       	breq	.+6      	; 0x122a <__fpcmp_parts_f+0xa2>
    1224:	61 e0       	ldi	r22, 0x01	; 1
    1226:	70 e0       	ldi	r23, 0x00	; 0
    1228:	05 c0       	rjmp	.+10     	; 0x1234 <__fpcmp_parts_f+0xac>
    122a:	6f ef       	ldi	r22, 0xFF	; 255
    122c:	7f ef       	ldi	r23, 0xFF	; 255
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <__fpcmp_parts_f+0xac>
    1230:	60 e0       	ldi	r22, 0x00	; 0
    1232:	70 e0       	ldi	r23, 0x00	; 0
    1234:	cb 01       	movw	r24, r22
    1236:	1f 91       	pop	r17
    1238:	08 95       	ret

0000123a <DIO_vidInit>:
 * Description: Initialize all MCU Pins
 * Arguments: 	vid
 * Return :	  	vid
 * */
void DIO_vidInit(void)
{
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
#define DIO_u8_INPUT_FLOATING	0
#define DIO_u8_INPUT_PULLUP		0

	/*our beautiful way :) */
	//Set DDR Values
	DIO_u8_DDRA_REG = CONC(DIO_u8_PORTA_PIN7, DIO_u8_PORTA_PIN6, DIO_u8_PORTA_PIN5,
    1242:	ea e3       	ldi	r30, 0x3A	; 58
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	8f e0       	ldi	r24, 0x0F	; 15
    1248:	80 83       	st	Z, r24
			DIO_u8_PORTA_PIN4, DIO_u8_PORTA_PIN3, DIO_u8_PORTA_PIN2, DIO_u8_PORTA_PIN1,
			DIO_u8_PORTA_PIN0);

	DIO_u8_DDRB_REG = CONC(DIO_u8_PORTB_PIN7, DIO_u8_PORTB_PIN6, DIO_u8_PORTB_PIN5,
    124a:	e7 e3       	ldi	r30, 0x37	; 55
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	83 eb       	ldi	r24, 0xB3	; 179
    1250:	80 83       	st	Z, r24
			DIO_u8_PORTB_PIN4, DIO_u8_PORTB_PIN3, DIO_u8_PORTB_PIN2, DIO_u8_PORTB_PIN1,
			DIO_u8_PORTB_PIN0);

	DIO_u8_DDRC_REG = CONC(DIO_u8_PORTC_PIN7, DIO_u8_PORTC_PIN6, DIO_u8_PORTC_PIN5,
    1252:	e4 e3       	ldi	r30, 0x34	; 52
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	8f ef       	ldi	r24, 0xFF	; 255
    1258:	80 83       	st	Z, r24
			DIO_u8_PORTC_PIN4, DIO_u8_PORTC_PIN3, DIO_u8_PORTC_PIN2, DIO_u8_PORTC_PIN1,
			DIO_u8_PORTC_PIN0);

	DIO_u8_DDRD_REG = CONC(DIO_u8_PORTD_PIN7, DIO_u8_PORTD_PIN6, DIO_u8_PORTD_PIN5,
    125a:	e1 e3       	ldi	r30, 0x31	; 49
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	87 ef       	ldi	r24, 0xF7	; 247
    1260:	80 83       	st	Z, r24
#define DIO_u8_OUTPUT_LOW		0
#define DIO_u8_OUTPUT_HIGH		1
#define DIO_u8_INPUT_FLOATING	0
#define DIO_u8_INPUT_PULLUP		1

	DIO_u8_PORTA_REG = CONC(DIO_u8_PORTA_PIN7, DIO_u8_PORTA_PIN6, DIO_u8_PORTA_PIN5,
    1262:	eb e3       	ldi	r30, 0x3B	; 59
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 ef       	ldi	r24, 0xF0	; 240
    1268:	80 83       	st	Z, r24
			DIO_u8_PORTA_PIN4, DIO_u8_PORTA_PIN3, DIO_u8_PORTA_PIN2, DIO_u8_PORTA_PIN1,
			DIO_u8_PORTA_PIN0);

	DIO_u8_PORTB_REG = CONC(DIO_u8_PORTB_PIN7, DIO_u8_PORTB_PIN6, DIO_u8_PORTB_PIN5,
    126a:	e8 e3       	ldi	r30, 0x38	; 56
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	8f e0       	ldi	r24, 0x0F	; 15
    1270:	80 83       	st	Z, r24
			DIO_u8_PORTB_PIN4, DIO_u8_PORTB_PIN3, DIO_u8_PORTB_PIN2, DIO_u8_PORTB_PIN1,
			DIO_u8_PORTB_PIN0);

	DIO_u8_PORTC_REG = CONC(DIO_u8_PORTC_PIN7, DIO_u8_PORTC_PIN6, DIO_u8_PORTC_PIN5,
    1272:	e5 e3       	ldi	r30, 0x35	; 53
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	10 82       	st	Z, r1
			DIO_u8_PORTC_PIN4, DIO_u8_PORTC_PIN3, DIO_u8_PORTC_PIN2, DIO_u8_PORTC_PIN1,
			DIO_u8_PORTC_PIN0);

	DIO_u8_PORTD_REG = CONC(DIO_u8_PORTD_PIN7, DIO_u8_PORTD_PIN6, DIO_u8_PORTD_PIN5,
    1278:	e2 e3       	ldi	r30, 0x32	; 50
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	88 e0       	ldi	r24, 0x08	; 8
    127e:	80 83       	st	Z, r24
#define DIO_u8_OUTPUT_LOW		0
#define DIO_u8_OUTPUT_HIGH		1
#define DIO_u8_INPUT_FLOATING	2
#define DIO_u8_INPUT_PULLUP		3

}
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	08 95       	ret

00001286 <DIO_enuSetPinValue>:
 * 			    Second Argument : Copy_u8Pin,     options(from DIO_u8_PIN0 to DIO_u8_PIN7)
 * 			    Third  Argument : Copy_u8Value,   options()
 * Return :		Error Status --> DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	2e 97       	sbiw	r28, 0x0e	; 14
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	f8 94       	cli
    1294:	de bf       	out	0x3e, r29	; 62
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	cd bf       	out	0x3d, r28	; 61
    129a:	8a 83       	std	Y+2, r24	; 0x02
    129c:	6b 83       	std	Y+3, r22	; 0x03
    129e:	4c 83       	std	Y+4, r20	; 0x04
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
    12a0:	19 82       	std	Y+1, r1	; 0x01
	/*Check Args*/

	if ((Copy_u8Port > DIO_u8_PORTD) || (Copy_u8Pin > DIO_u8_PIN7) || (Copy_u8Value > DIO_u8_HIGH))
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	84 30       	cpi	r24, 0x04	; 4
    12a6:	30 f4       	brcc	.+12     	; 0x12b4 <DIO_enuSetPinValue+0x2e>
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	88 30       	cpi	r24, 0x08	; 8
    12ac:	18 f4       	brcc	.+6      	; 0x12b4 <DIO_enuSetPinValue+0x2e>
    12ae:	8c 81       	ldd	r24, Y+4	; 0x04
    12b0:	82 30       	cpi	r24, 0x02	; 2
    12b2:	18 f0       	brcs	.+6      	; 0x12ba <DIO_enuSetPinValue+0x34>
	{
		Local_enuErrorStatus = DIO_NOK;
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	89 83       	std	Y+1, r24	; 0x01
    12b8:	d7 c0       	rjmp	.+430    	; 0x1468 <DIO_enuSetPinValue+0x1e2>
	}
	else
	{
		/*Implementation*/

		switch (Copy_u8Port)
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	3e 87       	std	Y+14, r19	; 0x0e
    12c2:	2d 87       	std	Y+13, r18	; 0x0d
    12c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	91 05       	cpc	r25, r1
    12cc:	09 f4       	brne	.+2      	; 0x12d0 <DIO_enuSetPinValue+0x4a>
    12ce:	44 c0       	rjmp	.+136    	; 0x1358 <DIO_enuSetPinValue+0xd2>
    12d0:	2d 85       	ldd	r18, Y+13	; 0x0d
    12d2:	3e 85       	ldd	r19, Y+14	; 0x0e
    12d4:	22 30       	cpi	r18, 0x02	; 2
    12d6:	31 05       	cpc	r19, r1
    12d8:	2c f4       	brge	.+10     	; 0x12e4 <DIO_enuSetPinValue+0x5e>
    12da:	8d 85       	ldd	r24, Y+13	; 0x0d
    12dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    12de:	00 97       	sbiw	r24, 0x00	; 0
    12e0:	71 f0       	breq	.+28     	; 0x12fe <DIO_enuSetPinValue+0x78>
    12e2:	c2 c0       	rjmp	.+388    	; 0x1468 <DIO_enuSetPinValue+0x1e2>
    12e4:	2d 85       	ldd	r18, Y+13	; 0x0d
    12e6:	3e 85       	ldd	r19, Y+14	; 0x0e
    12e8:	22 30       	cpi	r18, 0x02	; 2
    12ea:	31 05       	cpc	r19, r1
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <DIO_enuSetPinValue+0x6a>
    12ee:	62 c0       	rjmp	.+196    	; 0x13b4 <DIO_enuSetPinValue+0x12e>
    12f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    12f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    12f4:	83 30       	cpi	r24, 0x03	; 3
    12f6:	91 05       	cpc	r25, r1
    12f8:	09 f4       	brne	.+2      	; 0x12fc <DIO_enuSetPinValue+0x76>
    12fa:	89 c0       	rjmp	.+274    	; 0x140e <DIO_enuSetPinValue+0x188>
    12fc:	b5 c0       	rjmp	.+362    	; 0x1468 <DIO_enuSetPinValue+0x1e2>
		{
		case DIO_u8_PORTA:
			(Copy_u8Value == DIO_u8_HIGH) ?
    12fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1300:	81 30       	cpi	r24, 0x01	; 1
    1302:	a9 f4       	brne	.+42     	; 0x132e <DIO_enuSetPinValue+0xa8>
    1304:	ab e3       	ldi	r26, 0x3B	; 59
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	eb e3       	ldi	r30, 0x3B	; 59
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	48 2f       	mov	r20, r24
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	02 2e       	mov	r0, r18
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <DIO_enuSetPinValue+0x9c>
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	0a 94       	dec	r0
    1324:	e2 f7       	brpl	.-8      	; 0x131e <DIO_enuSetPinValue+0x98>
    1326:	84 2b       	or	r24, r20
    1328:	8c 93       	st	X, r24
    132a:	9c 91       	ld	r25, X
    132c:	9d c0       	rjmp	.+314    	; 0x1468 <DIO_enuSetPinValue+0x1e2>
    132e:	ab e3       	ldi	r26, 0x3B	; 59
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	eb e3       	ldi	r30, 0x3B	; 59
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	48 2f       	mov	r20, r24
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	02 c0       	rjmp	.+4      	; 0x134a <DIO_enuSetPinValue+0xc4>
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	2a 95       	dec	r18
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <DIO_enuSetPinValue+0xc0>
    134e:	80 95       	com	r24
    1350:	84 23       	and	r24, r20
    1352:	8c 93       	st	X, r24
    1354:	2c 91       	ld	r18, X
    1356:	88 c0       	rjmp	.+272    	; 0x1468 <DIO_enuSetPinValue+0x1e2>
					(DIO_u8_PORTA_REG |= (1 << Copy_u8Pin)) : (DIO_u8_PORTA_REG &=
							~(1 << Copy_u8Pin));
			break;

		case DIO_u8_PORTB:
			(Copy_u8Value == DIO_u8_HIGH) ?
    1358:	8c 81       	ldd	r24, Y+4	; 0x04
    135a:	81 30       	cpi	r24, 0x01	; 1
    135c:	a9 f4       	brne	.+42     	; 0x1388 <DIO_enuSetPinValue+0x102>
    135e:	a8 e3       	ldi	r26, 0x38	; 56
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e8 e3       	ldi	r30, 0x38	; 56
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	48 2f       	mov	r20, r24
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	28 2f       	mov	r18, r24
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	02 2e       	mov	r0, r18
    1376:	02 c0       	rjmp	.+4      	; 0x137c <DIO_enuSetPinValue+0xf6>
    1378:	88 0f       	add	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	0a 94       	dec	r0
    137e:	e2 f7       	brpl	.-8      	; 0x1378 <DIO_enuSetPinValue+0xf2>
    1380:	84 2b       	or	r24, r20
    1382:	8c 93       	st	X, r24
    1384:	3c 91       	ld	r19, X
    1386:	70 c0       	rjmp	.+224    	; 0x1468 <DIO_enuSetPinValue+0x1e2>
    1388:	a8 e3       	ldi	r26, 0x38	; 56
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	e8 e3       	ldi	r30, 0x38	; 56
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	48 2f       	mov	r20, r24
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	02 2e       	mov	r0, r18
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <DIO_enuSetPinValue+0x120>
    13a2:	88 0f       	add	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	0a 94       	dec	r0
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <DIO_enuSetPinValue+0x11c>
    13aa:	80 95       	com	r24
    13ac:	84 23       	and	r24, r20
    13ae:	8c 93       	st	X, r24
    13b0:	8c 91       	ld	r24, X
    13b2:	5a c0       	rjmp	.+180    	; 0x1468 <DIO_enuSetPinValue+0x1e2>
							~(1 << Copy_u8Pin));

			break;

		case DIO_u8_PORTC:
			(Copy_u8Value == DIO_u8_HIGH) ?
    13b4:	8c 81       	ldd	r24, Y+4	; 0x04
    13b6:	81 30       	cpi	r24, 0x01	; 1
    13b8:	a9 f4       	brne	.+42     	; 0x13e4 <DIO_enuSetPinValue+0x15e>
    13ba:	a5 e3       	ldi	r26, 0x35	; 53
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e5 e3       	ldi	r30, 0x35	; 53
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	48 2f       	mov	r20, r24
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	02 2e       	mov	r0, r18
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <DIO_enuSetPinValue+0x152>
    13d4:	88 0f       	add	r24, r24
    13d6:	99 1f       	adc	r25, r25
    13d8:	0a 94       	dec	r0
    13da:	e2 f7       	brpl	.-8      	; 0x13d4 <DIO_enuSetPinValue+0x14e>
    13dc:	84 2b       	or	r24, r20
    13de:	8c 93       	st	X, r24
    13e0:	9c 91       	ld	r25, X
    13e2:	42 c0       	rjmp	.+132    	; 0x1468 <DIO_enuSetPinValue+0x1e2>
    13e4:	a5 e3       	ldi	r26, 0x35	; 53
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e5 e3       	ldi	r30, 0x35	; 53
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	48 2f       	mov	r20, r24
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <DIO_enuSetPinValue+0x17a>
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	2a 95       	dec	r18
    1402:	e2 f7       	brpl	.-8      	; 0x13fc <DIO_enuSetPinValue+0x176>
    1404:	80 95       	com	r24
    1406:	84 23       	and	r24, r20
    1408:	8c 93       	st	X, r24
    140a:	2c 91       	ld	r18, X
    140c:	2d c0       	rjmp	.+90     	; 0x1468 <DIO_enuSetPinValue+0x1e2>
							~(1 << Copy_u8Pin));

			break;

		case DIO_u8_PORTD:
			(Copy_u8Value == DIO_u8_HIGH) ?
    140e:	8c 81       	ldd	r24, Y+4	; 0x04
    1410:	81 30       	cpi	r24, 0x01	; 1
    1412:	a9 f4       	brne	.+42     	; 0x143e <DIO_enuSetPinValue+0x1b8>
    1414:	a2 e3       	ldi	r26, 0x32	; 50
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e2 e3       	ldi	r30, 0x32	; 50
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	48 2f       	mov	r20, r24
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	02 2e       	mov	r0, r18
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <DIO_enuSetPinValue+0x1ac>
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	0a 94       	dec	r0
    1434:	e2 f7       	brpl	.-8      	; 0x142e <DIO_enuSetPinValue+0x1a8>
    1436:	84 2b       	or	r24, r20
    1438:	8c 93       	st	X, r24
    143a:	3c 91       	ld	r19, X
    143c:	15 c0       	rjmp	.+42     	; 0x1468 <DIO_enuSetPinValue+0x1e2>
    143e:	a2 e3       	ldi	r26, 0x32	; 50
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e2 e3       	ldi	r30, 0x32	; 50
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	48 2f       	mov	r20, r24
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	02 2e       	mov	r0, r18
    1456:	02 c0       	rjmp	.+4      	; 0x145c <DIO_enuSetPinValue+0x1d6>
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	0a 94       	dec	r0
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <DIO_enuSetPinValue+0x1d2>
    1460:	80 95       	com	r24
    1462:	84 23       	and	r24, r20
    1464:	8c 93       	st	X, r24
    1466:	8c 91       	ld	r24, X
		}

		/*empty*/
		//asm("NOP");
	}
	return Local_enuErrorStatus;
    1468:	89 81       	ldd	r24, Y+1	; 0x01

}
    146a:	2e 96       	adiw	r28, 0x0e	; 14
    146c:	0f b6       	in	r0, 0x3f	; 63
    146e:	f8 94       	cli
    1470:	de bf       	out	0x3e, r29	; 62
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	cd bf       	out	0x3d, r28	; 61
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	08 95       	ret

0000147c <DIO_enuGetPinValue>:
 * 			    Second Argument : Copy_u8Pin,     options(from DIO_u8_PIN0 to DIO_u8_PIN7)
 * 			    Third  Argument : Add_pu8PinValue,   Variable Address to store pin value
 * Return :		Error Status --> DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuGetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Add_pu8PinValue)
{
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	27 97       	sbiw	r28, 0x07	; 7
    1486:	0f b6       	in	r0, 0x3f	; 63
    1488:	f8 94       	cli
    148a:	de bf       	out	0x3e, r29	; 62
    148c:	0f be       	out	0x3f, r0	; 63
    148e:	cd bf       	out	0x3d, r28	; 61
    1490:	8a 83       	std	Y+2, r24	; 0x02
    1492:	6b 83       	std	Y+3, r22	; 0x03
    1494:	5d 83       	std	Y+5, r21	; 0x05
    1496:	4c 83       	std	Y+4, r20	; 0x04
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
    1498:	19 82       	std	Y+1, r1	; 0x01
	/*Check Args*/

	if ((Copy_u8Port > DIO_u8_PORTD) || (Copy_u8Pin > DIO_u8_PIN7) || (Add_pu8PinValue == NULL))
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	84 30       	cpi	r24, 0x04	; 4
    149e:	38 f4       	brcc	.+14     	; 0x14ae <DIO_enuGetPinValue+0x32>
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	88 30       	cpi	r24, 0x08	; 8
    14a4:	20 f4       	brcc	.+8      	; 0x14ae <DIO_enuGetPinValue+0x32>
    14a6:	8c 81       	ldd	r24, Y+4	; 0x04
    14a8:	9d 81       	ldd	r25, Y+5	; 0x05
    14aa:	00 97       	sbiw	r24, 0x00	; 0
    14ac:	19 f4       	brne	.+6      	; 0x14b4 <DIO_enuGetPinValue+0x38>
	{
		Local_enuErrorStatus = DIO_NOK;
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	89 83       	std	Y+1, r24	; 0x01
    14b2:	70 c0       	rjmp	.+224    	; 0x1594 <DIO_enuGetPinValue+0x118>
	}
	else
	{
		/*Implementation*/

		switch (Copy_u8Port)
    14b4:	8a 81       	ldd	r24, Y+2	; 0x02
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	3f 83       	std	Y+7, r19	; 0x07
    14bc:	2e 83       	std	Y+6, r18	; 0x06
    14be:	4e 81       	ldd	r20, Y+6	; 0x06
    14c0:	5f 81       	ldd	r21, Y+7	; 0x07
    14c2:	41 30       	cpi	r20, 0x01	; 1
    14c4:	51 05       	cpc	r21, r1
    14c6:	59 f1       	breq	.+86     	; 0x151e <DIO_enuGetPinValue+0xa2>
    14c8:	8e 81       	ldd	r24, Y+6	; 0x06
    14ca:	9f 81       	ldd	r25, Y+7	; 0x07
    14cc:	82 30       	cpi	r24, 0x02	; 2
    14ce:	91 05       	cpc	r25, r1
    14d0:	34 f4       	brge	.+12     	; 0x14de <DIO_enuGetPinValue+0x62>
    14d2:	2e 81       	ldd	r18, Y+6	; 0x06
    14d4:	3f 81       	ldd	r19, Y+7	; 0x07
    14d6:	21 15       	cp	r18, r1
    14d8:	31 05       	cpc	r19, r1
    14da:	69 f0       	breq	.+26     	; 0x14f6 <DIO_enuGetPinValue+0x7a>
    14dc:	5b c0       	rjmp	.+182    	; 0x1594 <DIO_enuGetPinValue+0x118>
    14de:	4e 81       	ldd	r20, Y+6	; 0x06
    14e0:	5f 81       	ldd	r21, Y+7	; 0x07
    14e2:	42 30       	cpi	r20, 0x02	; 2
    14e4:	51 05       	cpc	r21, r1
    14e6:	79 f1       	breq	.+94     	; 0x1546 <DIO_enuGetPinValue+0xca>
    14e8:	8e 81       	ldd	r24, Y+6	; 0x06
    14ea:	9f 81       	ldd	r25, Y+7	; 0x07
    14ec:	83 30       	cpi	r24, 0x03	; 3
    14ee:	91 05       	cpc	r25, r1
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <DIO_enuGetPinValue+0x78>
    14f2:	3d c0       	rjmp	.+122    	; 0x156e <DIO_enuGetPinValue+0xf2>
    14f4:	4f c0       	rjmp	.+158    	; 0x1594 <DIO_enuGetPinValue+0x118>
		{
		case DIO_u8_PORTA:
			*Add_pu8PinValue = (DIO_u8_PINA_REG >> Copy_u8Pin) & 0x01;
    14f6:	e9 e3       	ldi	r30, 0x39	; 57
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	28 2f       	mov	r18, r24
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	88 2f       	mov	r24, r24
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	a9 01       	movw	r20, r18
    1508:	02 c0       	rjmp	.+4      	; 0x150e <DIO_enuGetPinValue+0x92>
    150a:	55 95       	asr	r21
    150c:	47 95       	ror	r20
    150e:	8a 95       	dec	r24
    1510:	e2 f7       	brpl	.-8      	; 0x150a <DIO_enuGetPinValue+0x8e>
    1512:	ca 01       	movw	r24, r20
    1514:	81 70       	andi	r24, 0x01	; 1
    1516:	ec 81       	ldd	r30, Y+4	; 0x04
    1518:	fd 81       	ldd	r31, Y+5	; 0x05
    151a:	80 83       	st	Z, r24
    151c:	3b c0       	rjmp	.+118    	; 0x1594 <DIO_enuGetPinValue+0x118>
			break;

		case DIO_u8_PORTB:
			*Add_pu8PinValue = (DIO_u8_PINB_REG >> Copy_u8Pin) & 0x01;
    151e:	e6 e3       	ldi	r30, 0x36	; 54
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	28 2f       	mov	r18, r24
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	88 2f       	mov	r24, r24
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	a9 01       	movw	r20, r18
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <DIO_enuGetPinValue+0xba>
    1532:	55 95       	asr	r21
    1534:	47 95       	ror	r20
    1536:	8a 95       	dec	r24
    1538:	e2 f7       	brpl	.-8      	; 0x1532 <DIO_enuGetPinValue+0xb6>
    153a:	ca 01       	movw	r24, r20
    153c:	81 70       	andi	r24, 0x01	; 1
    153e:	ec 81       	ldd	r30, Y+4	; 0x04
    1540:	fd 81       	ldd	r31, Y+5	; 0x05
    1542:	80 83       	st	Z, r24
    1544:	27 c0       	rjmp	.+78     	; 0x1594 <DIO_enuGetPinValue+0x118>
			break;

		case DIO_u8_PORTC:
			*Add_pu8PinValue = (DIO_u8_PINC_REG >> Copy_u8Pin) & 0x01;
    1546:	e3 e3       	ldi	r30, 0x33	; 51
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	88 2f       	mov	r24, r24
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	a9 01       	movw	r20, r18
    1558:	02 c0       	rjmp	.+4      	; 0x155e <DIO_enuGetPinValue+0xe2>
    155a:	55 95       	asr	r21
    155c:	47 95       	ror	r20
    155e:	8a 95       	dec	r24
    1560:	e2 f7       	brpl	.-8      	; 0x155a <DIO_enuGetPinValue+0xde>
    1562:	ca 01       	movw	r24, r20
    1564:	81 70       	andi	r24, 0x01	; 1
    1566:	ec 81       	ldd	r30, Y+4	; 0x04
    1568:	fd 81       	ldd	r31, Y+5	; 0x05
    156a:	80 83       	st	Z, r24
    156c:	13 c0       	rjmp	.+38     	; 0x1594 <DIO_enuGetPinValue+0x118>
			break;

		case DIO_u8_PORTD:
			*Add_pu8PinValue = (DIO_u8_PIND_REG >> Copy_u8Pin) & 0x01;
    156e:	e0 e3       	ldi	r30, 0x30	; 48
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	88 2f       	mov	r24, r24
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	a9 01       	movw	r20, r18
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <DIO_enuGetPinValue+0x10a>
    1582:	55 95       	asr	r21
    1584:	47 95       	ror	r20
    1586:	8a 95       	dec	r24
    1588:	e2 f7       	brpl	.-8      	; 0x1582 <DIO_enuGetPinValue+0x106>
    158a:	ca 01       	movw	r24, r20
    158c:	81 70       	andi	r24, 0x01	; 1
    158e:	ec 81       	ldd	r30, Y+4	; 0x04
    1590:	fd 81       	ldd	r31, Y+5	; 0x05
    1592:	80 83       	st	Z, r24
		}

		/*empty*/
		//asm("NOP");
	}
	return Local_enuErrorStatus;
    1594:	89 81       	ldd	r24, Y+1	; 0x01
}
    1596:	27 96       	adiw	r28, 0x07	; 7
    1598:	0f b6       	in	r0, 0x3f	; 63
    159a:	f8 94       	cli
    159c:	de bf       	out	0x3e, r29	; 62
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	cd bf       	out	0x3d, r28	; 61
    15a2:	cf 91       	pop	r28
    15a4:	df 91       	pop	r29
    15a6:	08 95       	ret

000015a8 <DIO_enuGetPortValue>:
 * 			    Third  Argument : Add_pu8PortValue	Variable Address to store port value
 * Return :		Error Status --> DIO_OK , DIO_NOK
 * */

DIO_tenuErrorStatus DIO_enuGetPortValue(u8 Copy_u8Port, u8 *Add_pu8PortValue)
{
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	00 d0       	rcall	.+0      	; 0x15ae <DIO_enuGetPortValue+0x6>
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <DIO_enuGetPortValue+0x8>
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <DIO_enuGetPortValue+0xa>
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
    15b6:	8a 83       	std	Y+2, r24	; 0x02
    15b8:	7c 83       	std	Y+4, r23	; 0x04
    15ba:	6b 83       	std	Y+3, r22	; 0x03

	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
    15bc:	19 82       	std	Y+1, r1	; 0x01
	/*Check Args*/
	if ((Copy_u8Port > DIO_u8_PORTD) || (Add_pu8PortValue == NULL))
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	84 30       	cpi	r24, 0x04	; 4
    15c2:	20 f4       	brcc	.+8      	; 0x15cc <DIO_enuGetPortValue+0x24>
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	9c 81       	ldd	r25, Y+4	; 0x04
    15c8:	00 97       	sbiw	r24, 0x00	; 0
    15ca:	19 f4       	brne	.+6      	; 0x15d2 <DIO_enuGetPortValue+0x2a>
	{
		Local_enuErrorStatus = DIO_NOK;
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	89 83       	std	Y+1, r24	; 0x01
    15d0:	3a c0       	rjmp	.+116    	; 0x1646 <DIO_enuGetPortValue+0x9e>
	}
	else
	{
		/*Implementation*/

		switch (Copy_u8Port)
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	28 2f       	mov	r18, r24
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	3e 83       	std	Y+6, r19	; 0x06
    15da:	2d 83       	std	Y+5, r18	; 0x05
    15dc:	8d 81       	ldd	r24, Y+5	; 0x05
    15de:	9e 81       	ldd	r25, Y+6	; 0x06
    15e0:	81 30       	cpi	r24, 0x01	; 1
    15e2:	91 05       	cpc	r25, r1
    15e4:	e1 f0       	breq	.+56     	; 0x161e <DIO_enuGetPortValue+0x76>
    15e6:	2d 81       	ldd	r18, Y+5	; 0x05
    15e8:	3e 81       	ldd	r19, Y+6	; 0x06
    15ea:	22 30       	cpi	r18, 0x02	; 2
    15ec:	31 05       	cpc	r19, r1
    15ee:	2c f4       	brge	.+10     	; 0x15fa <DIO_enuGetPortValue+0x52>
    15f0:	8d 81       	ldd	r24, Y+5	; 0x05
    15f2:	9e 81       	ldd	r25, Y+6	; 0x06
    15f4:	00 97       	sbiw	r24, 0x00	; 0
    15f6:	61 f0       	breq	.+24     	; 0x1610 <DIO_enuGetPortValue+0x68>
    15f8:	26 c0       	rjmp	.+76     	; 0x1646 <DIO_enuGetPortValue+0x9e>
    15fa:	2d 81       	ldd	r18, Y+5	; 0x05
    15fc:	3e 81       	ldd	r19, Y+6	; 0x06
    15fe:	22 30       	cpi	r18, 0x02	; 2
    1600:	31 05       	cpc	r19, r1
    1602:	a1 f0       	breq	.+40     	; 0x162c <DIO_enuGetPortValue+0x84>
    1604:	8d 81       	ldd	r24, Y+5	; 0x05
    1606:	9e 81       	ldd	r25, Y+6	; 0x06
    1608:	83 30       	cpi	r24, 0x03	; 3
    160a:	91 05       	cpc	r25, r1
    160c:	b1 f0       	breq	.+44     	; 0x163a <DIO_enuGetPortValue+0x92>
    160e:	1b c0       	rjmp	.+54     	; 0x1646 <DIO_enuGetPortValue+0x9e>
		{
		case DIO_u8_PORTA:
			*Add_pu8PortValue = DIO_u8_PINA_REG;
    1610:	e9 e3       	ldi	r30, 0x39	; 57
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	eb 81       	ldd	r30, Y+3	; 0x03
    1618:	fc 81       	ldd	r31, Y+4	; 0x04
    161a:	80 83       	st	Z, r24
    161c:	14 c0       	rjmp	.+40     	; 0x1646 <DIO_enuGetPortValue+0x9e>
			break;

		case DIO_u8_PORTB:
			*Add_pu8PortValue = DIO_u8_PINB_REG;
    161e:	e6 e3       	ldi	r30, 0x36	; 54
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	eb 81       	ldd	r30, Y+3	; 0x03
    1626:	fc 81       	ldd	r31, Y+4	; 0x04
    1628:	80 83       	st	Z, r24
    162a:	0d c0       	rjmp	.+26     	; 0x1646 <DIO_enuGetPortValue+0x9e>
			break;

		case DIO_u8_PORTC:
			*Add_pu8PortValue = DIO_u8_PINC_REG;
    162c:	e3 e3       	ldi	r30, 0x33	; 51
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	eb 81       	ldd	r30, Y+3	; 0x03
    1634:	fc 81       	ldd	r31, Y+4	; 0x04
    1636:	80 83       	st	Z, r24
    1638:	06 c0       	rjmp	.+12     	; 0x1646 <DIO_enuGetPortValue+0x9e>
			break;

		case DIO_u8_PORTD:
			*Add_pu8PortValue = DIO_u8_PIND_REG;
    163a:	e0 e3       	ldi	r30, 0x30	; 48
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	eb 81       	ldd	r30, Y+3	; 0x03
    1642:	fc 81       	ldd	r31, Y+4	; 0x04
    1644:	80 83       	st	Z, r24
		}

		/*empty*/
		//asm("NOP");
	}
	return Local_enuErrorStatus;
    1646:	89 81       	ldd	r24, Y+1	; 0x01

}
    1648:	26 96       	adiw	r28, 0x06	; 6
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	f8 94       	cli
    164e:	de bf       	out	0x3e, r29	; 62
    1650:	0f be       	out	0x3f, r0	; 63
    1652:	cd bf       	out	0x3d, r28	; 61
    1654:	cf 91       	pop	r28
    1656:	df 91       	pop	r29
    1658:	08 95       	ret

0000165a <DIO_enuSetPortValue>:
 * 			    Second Argument : Copy_u8Value,     variable to the value to be se to port
 * Return :		Error Status --> DIO_OK , DIO_NOK
 * */

DIO_tenuErrorStatus DIO_enuSetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    165a:	df 93       	push	r29
    165c:	cf 93       	push	r28
    165e:	00 d0       	rcall	.+0      	; 0x1660 <DIO_enuSetPortValue+0x6>
    1660:	00 d0       	rcall	.+0      	; 0x1662 <DIO_enuSetPortValue+0x8>
    1662:	0f 92       	push	r0
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
    1668:	8a 83       	std	Y+2, r24	; 0x02
    166a:	6b 83       	std	Y+3, r22	; 0x03

	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
    166c:	19 82       	std	Y+1, r1	; 0x01
	/*Check Args*/

	if ((Copy_u8Port > DIO_u8_PORTD))
    166e:	8a 81       	ldd	r24, Y+2	; 0x02
    1670:	84 30       	cpi	r24, 0x04	; 4
    1672:	18 f0       	brcs	.+6      	; 0x167a <DIO_enuSetPortValue+0x20>
	{
		Local_enuErrorStatus = DIO_NOK;
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	89 83       	std	Y+1, r24	; 0x01
    1678:	32 c0       	rjmp	.+100    	; 0x16de <DIO_enuSetPortValue+0x84>
	}
	else
	{
		/*Implementation*/

		switch (Copy_u8Port)
    167a:	8a 81       	ldd	r24, Y+2	; 0x02
    167c:	28 2f       	mov	r18, r24
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	3d 83       	std	Y+5, r19	; 0x05
    1682:	2c 83       	std	Y+4, r18	; 0x04
    1684:	8c 81       	ldd	r24, Y+4	; 0x04
    1686:	9d 81       	ldd	r25, Y+5	; 0x05
    1688:	81 30       	cpi	r24, 0x01	; 1
    168a:	91 05       	cpc	r25, r1
    168c:	d1 f0       	breq	.+52     	; 0x16c2 <DIO_enuSetPortValue+0x68>
    168e:	2c 81       	ldd	r18, Y+4	; 0x04
    1690:	3d 81       	ldd	r19, Y+5	; 0x05
    1692:	22 30       	cpi	r18, 0x02	; 2
    1694:	31 05       	cpc	r19, r1
    1696:	2c f4       	brge	.+10     	; 0x16a2 <DIO_enuSetPortValue+0x48>
    1698:	8c 81       	ldd	r24, Y+4	; 0x04
    169a:	9d 81       	ldd	r25, Y+5	; 0x05
    169c:	00 97       	sbiw	r24, 0x00	; 0
    169e:	61 f0       	breq	.+24     	; 0x16b8 <DIO_enuSetPortValue+0x5e>
    16a0:	1e c0       	rjmp	.+60     	; 0x16de <DIO_enuSetPortValue+0x84>
    16a2:	2c 81       	ldd	r18, Y+4	; 0x04
    16a4:	3d 81       	ldd	r19, Y+5	; 0x05
    16a6:	22 30       	cpi	r18, 0x02	; 2
    16a8:	31 05       	cpc	r19, r1
    16aa:	81 f0       	breq	.+32     	; 0x16cc <DIO_enuSetPortValue+0x72>
    16ac:	8c 81       	ldd	r24, Y+4	; 0x04
    16ae:	9d 81       	ldd	r25, Y+5	; 0x05
    16b0:	83 30       	cpi	r24, 0x03	; 3
    16b2:	91 05       	cpc	r25, r1
    16b4:	81 f0       	breq	.+32     	; 0x16d6 <DIO_enuSetPortValue+0x7c>
    16b6:	13 c0       	rjmp	.+38     	; 0x16de <DIO_enuSetPortValue+0x84>
		{
		case DIO_u8_PORTA:
			DIO_u8_PORTA_REG = Copy_u8Value;
    16b8:	eb e3       	ldi	r30, 0x3B	; 59
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	8b 81       	ldd	r24, Y+3	; 0x03
    16be:	80 83       	st	Z, r24
    16c0:	0e c0       	rjmp	.+28     	; 0x16de <DIO_enuSetPortValue+0x84>
			break;

		case DIO_u8_PORTB:
			DIO_u8_PORTB_REG = Copy_u8Value;
    16c2:	e8 e3       	ldi	r30, 0x38	; 56
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	80 83       	st	Z, r24
    16ca:	09 c0       	rjmp	.+18     	; 0x16de <DIO_enuSetPortValue+0x84>

			break;

		case DIO_u8_PORTC:
			DIO_u8_PORTC_REG = Copy_u8Value;
    16cc:	e5 e3       	ldi	r30, 0x35	; 53
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	8b 81       	ldd	r24, Y+3	; 0x03
    16d2:	80 83       	st	Z, r24
    16d4:	04 c0       	rjmp	.+8      	; 0x16de <DIO_enuSetPortValue+0x84>

			break;

		case DIO_u8_PORTD:
			DIO_u8_PORTD_REG = Copy_u8Value;
    16d6:	e2 e3       	ldi	r30, 0x32	; 50
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	80 83       	st	Z, r24
		}

		/*empty*/
		//asm("NOP");
	}
	return Local_enuErrorStatus;
    16de:	89 81       	ldd	r24, Y+1	; 0x01

}
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	cf 91       	pop	r28
    16ec:	df 91       	pop	r29
    16ee:	08 95       	ret

000016f0 <LCD_vidSendEnable>:
#include"LCD_int.h"
#include<util/delay.h>

/*Function to send enable signal for instructions */
static void LCD_vidSendEnable(void)
{
    16f0:	df 93       	push	r29
    16f2:	cf 93       	push	r28
    16f4:	cd b7       	in	r28, 0x3d	; 61
    16f6:	de b7       	in	r29, 0x3e	; 62
    16f8:	2e 97       	sbiw	r28, 0x0e	; 14
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	f8 94       	cli
    16fe:	de bf       	out	0x3e, r29	; 62
    1700:	0f be       	out	0x3f, r0	; 63
    1702:	cd bf       	out	0x3d, r28	; 61
	DIO_enuSetPinValue(LCD_u8_E_PORT, LCD_u8_E_PIN, DIO_u8_HIGH);
    1704:	82 e0       	ldi	r24, 0x02	; 2
    1706:	63 e0       	ldi	r22, 0x03	; 3
    1708:	41 e0       	ldi	r20, 0x01	; 1
    170a:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_enuSetPinValue>
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	a0 e0       	ldi	r26, 0x00	; 0
    1714:	b0 e4       	ldi	r27, 0x40	; 64
    1716:	8b 87       	std	Y+11, r24	; 0x0b
    1718:	9c 87       	std	Y+12, r25	; 0x0c
    171a:	ad 87       	std	Y+13, r26	; 0x0d
    171c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    171e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1720:	7c 85       	ldd	r23, Y+12	; 0x0c
    1722:	8d 85       	ldd	r24, Y+13	; 0x0d
    1724:	9e 85       	ldd	r25, Y+14	; 0x0e
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	4a e7       	ldi	r20, 0x7A	; 122
    172c:	55 e4       	ldi	r21, 0x45	; 69
    172e:	0e 94 12 03 	call	0x624	; 0x624 <__mulsf3>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	8f 83       	std	Y+7, r24	; 0x07
    1738:	98 87       	std	Y+8, r25	; 0x08
    173a:	a9 87       	std	Y+9, r26	; 0x09
    173c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    173e:	6f 81       	ldd	r22, Y+7	; 0x07
    1740:	78 85       	ldd	r23, Y+8	; 0x08
    1742:	89 85       	ldd	r24, Y+9	; 0x09
    1744:	9a 85       	ldd	r25, Y+10	; 0x0a
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	40 e8       	ldi	r20, 0x80	; 128
    174c:	5f e3       	ldi	r21, 0x3F	; 63
    174e:	0e 94 48 05 	call	0xa90	; 0xa90 <__ltsf2>
    1752:	88 23       	and	r24, r24
    1754:	2c f4       	brge	.+10     	; 0x1760 <LCD_vidSendEnable+0x70>
		__ticks = 1;
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	9e 83       	std	Y+6, r25	; 0x06
    175c:	8d 83       	std	Y+5, r24	; 0x05
    175e:	3f c0       	rjmp	.+126    	; 0x17de <LCD_vidSendEnable+0xee>
	else if (__tmp > 65535)
    1760:	6f 81       	ldd	r22, Y+7	; 0x07
    1762:	78 85       	ldd	r23, Y+8	; 0x08
    1764:	89 85       	ldd	r24, Y+9	; 0x09
    1766:	9a 85       	ldd	r25, Y+10	; 0x0a
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	3f ef       	ldi	r19, 0xFF	; 255
    176c:	4f e7       	ldi	r20, 0x7F	; 127
    176e:	57 e4       	ldi	r21, 0x47	; 71
    1770:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__gtsf2>
    1774:	18 16       	cp	r1, r24
    1776:	4c f5       	brge	.+82     	; 0x17ca <LCD_vidSendEnable+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1778:	6b 85       	ldd	r22, Y+11	; 0x0b
    177a:	7c 85       	ldd	r23, Y+12	; 0x0c
    177c:	8d 85       	ldd	r24, Y+13	; 0x0d
    177e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	40 e2       	ldi	r20, 0x20	; 32
    1786:	51 e4       	ldi	r21, 0x41	; 65
    1788:	0e 94 12 03 	call	0x624	; 0x624 <__mulsf3>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	bc 01       	movw	r22, r24
    1792:	cd 01       	movw	r24, r26
    1794:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	9e 83       	std	Y+6, r25	; 0x06
    179e:	8d 83       	std	Y+5, r24	; 0x05
    17a0:	0f c0       	rjmp	.+30     	; 0x17c0 <LCD_vidSendEnable+0xd0>
    17a2:	80 e9       	ldi	r24, 0x90	; 144
    17a4:	91 e0       	ldi	r25, 0x01	; 1
    17a6:	9c 83       	std	Y+4, r25	; 0x04
    17a8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	9c 81       	ldd	r25, Y+4	; 0x04
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	f1 f7       	brne	.-4      	; 0x17ae <LCD_vidSendEnable+0xbe>
    17b2:	9c 83       	std	Y+4, r25	; 0x04
    17b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b6:	8d 81       	ldd	r24, Y+5	; 0x05
    17b8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ba:	01 97       	sbiw	r24, 0x01	; 1
    17bc:	9e 83       	std	Y+6, r25	; 0x06
    17be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c0:	8d 81       	ldd	r24, Y+5	; 0x05
    17c2:	9e 81       	ldd	r25, Y+6	; 0x06
    17c4:	00 97       	sbiw	r24, 0x00	; 0
    17c6:	69 f7       	brne	.-38     	; 0x17a2 <LCD_vidSendEnable+0xb2>
    17c8:	14 c0       	rjmp	.+40     	; 0x17f2 <LCD_vidSendEnable+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ca:	6f 81       	ldd	r22, Y+7	; 0x07
    17cc:	78 85       	ldd	r23, Y+8	; 0x08
    17ce:	89 85       	ldd	r24, Y+9	; 0x09
    17d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17d6:	dc 01       	movw	r26, r24
    17d8:	cb 01       	movw	r24, r22
    17da:	9e 83       	std	Y+6, r25	; 0x06
    17dc:	8d 83       	std	Y+5, r24	; 0x05
    17de:	8d 81       	ldd	r24, Y+5	; 0x05
    17e0:	9e 81       	ldd	r25, Y+6	; 0x06
    17e2:	9a 83       	std	Y+2, r25	; 0x02
    17e4:	89 83       	std	Y+1, r24	; 0x01
    17e6:	89 81       	ldd	r24, Y+1	; 0x01
    17e8:	9a 81       	ldd	r25, Y+2	; 0x02
    17ea:	01 97       	sbiw	r24, 0x01	; 1
    17ec:	f1 f7       	brne	.-4      	; 0x17ea <LCD_vidSendEnable+0xfa>
    17ee:	9a 83       	std	Y+2, r25	; 0x02
    17f0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_enuSetPinValue(LCD_u8_E_PORT, LCD_u8_E_PIN, DIO_u8_LOW);
    17f2:	82 e0       	ldi	r24, 0x02	; 2
    17f4:	63 e0       	ldi	r22, 0x03	; 3
    17f6:	40 e0       	ldi	r20, 0x00	; 0
    17f8:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_enuSetPinValue>
}
    17fc:	2e 96       	adiw	r28, 0x0e	; 14
    17fe:	0f b6       	in	r0, 0x3f	; 63
    1800:	f8 94       	cli
    1802:	de bf       	out	0x3e, r29	; 62
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	cd bf       	out	0x3d, r28	; 61
    1808:	cf 91       	pop	r28
    180a:	df 91       	pop	r29
    180c:	08 95       	ret

0000180e <LCD_vidInit>:
 * Description: Initialize LCD
 * Arguments: 	vid
 * Return :	  	vid
 * */
void LCD_vidInit(void)
{
    180e:	0f 93       	push	r16
    1810:	1f 93       	push	r17
    1812:	df 93       	push	r29
    1814:	cf 93       	push	r28
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
    181a:	c2 56       	subi	r28, 0x62	; 98
    181c:	d0 40       	sbci	r29, 0x00	; 0
    181e:	0f b6       	in	r0, 0x3f	; 63
    1820:	f8 94       	cli
    1822:	de bf       	out	0x3e, r29	; 62
    1824:	0f be       	out	0x3f, r0	; 63
    1826:	cd bf       	out	0x3d, r28	; 61
	
	/*entry mode set init */
	LCD_enuSendInstruction(LCD_u8_ENTRY_MODE_SET);
#elif LCD_u8_DATA_LENGTH ==LCD_u8_4_BIT_MODE
	/*init the pins*/
	DIO_vidInit();
    1828:	0e 94 1d 09 	call	0x123a	; 0x123a <DIO_vidInit>
    182c:	fe 01       	movw	r30, r28
    182e:	e1 5a       	subi	r30, 0xA1	; 161
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	a0 e0       	ldi	r26, 0x00	; 0
    1838:	b2 e4       	ldi	r27, 0x42	; 66
    183a:	80 83       	st	Z, r24
    183c:	91 83       	std	Z+1, r25	; 0x01
    183e:	a2 83       	std	Z+2, r26	; 0x02
    1840:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1842:	8e 01       	movw	r16, r28
    1844:	05 5a       	subi	r16, 0xA5	; 165
    1846:	1f 4f       	sbci	r17, 0xFF	; 255
    1848:	fe 01       	movw	r30, r28
    184a:	e1 5a       	subi	r30, 0xA1	; 161
    184c:	ff 4f       	sbci	r31, 0xFF	; 255
    184e:	60 81       	ld	r22, Z
    1850:	71 81       	ldd	r23, Z+1	; 0x01
    1852:	82 81       	ldd	r24, Z+2	; 0x02
    1854:	93 81       	ldd	r25, Z+3	; 0x03
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	4a e7       	ldi	r20, 0x7A	; 122
    185c:	55 e4       	ldi	r21, 0x45	; 69
    185e:	0e 94 12 03 	call	0x624	; 0x624 <__mulsf3>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	f8 01       	movw	r30, r16
    1868:	80 83       	st	Z, r24
    186a:	91 83       	std	Z+1, r25	; 0x01
    186c:	a2 83       	std	Z+2, r26	; 0x02
    186e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1870:	fe 01       	movw	r30, r28
    1872:	e5 5a       	subi	r30, 0xA5	; 165
    1874:	ff 4f       	sbci	r31, 0xFF	; 255
    1876:	60 81       	ld	r22, Z
    1878:	71 81       	ldd	r23, Z+1	; 0x01
    187a:	82 81       	ldd	r24, Z+2	; 0x02
    187c:	93 81       	ldd	r25, Z+3	; 0x03
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	40 e8       	ldi	r20, 0x80	; 128
    1884:	5f e3       	ldi	r21, 0x3F	; 63
    1886:	0e 94 48 05 	call	0xa90	; 0xa90 <__ltsf2>
    188a:	88 23       	and	r24, r24
    188c:	44 f4       	brge	.+16     	; 0x189e <LCD_vidInit+0x90>
		__ticks = 1;
    188e:	fe 01       	movw	r30, r28
    1890:	e7 5a       	subi	r30, 0xA7	; 167
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	91 83       	std	Z+1, r25	; 0x01
    189a:	80 83       	st	Z, r24
    189c:	64 c0       	rjmp	.+200    	; 0x1966 <LCD_vidInit+0x158>
	else if (__tmp > 65535)
    189e:	fe 01       	movw	r30, r28
    18a0:	e5 5a       	subi	r30, 0xA5	; 165
    18a2:	ff 4f       	sbci	r31, 0xFF	; 255
    18a4:	60 81       	ld	r22, Z
    18a6:	71 81       	ldd	r23, Z+1	; 0x01
    18a8:	82 81       	ldd	r24, Z+2	; 0x02
    18aa:	93 81       	ldd	r25, Z+3	; 0x03
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	3f ef       	ldi	r19, 0xFF	; 255
    18b0:	4f e7       	ldi	r20, 0x7F	; 127
    18b2:	57 e4       	ldi	r21, 0x47	; 71
    18b4:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__gtsf2>
    18b8:	18 16       	cp	r1, r24
    18ba:	0c f0       	brlt	.+2      	; 0x18be <LCD_vidInit+0xb0>
    18bc:	43 c0       	rjmp	.+134    	; 0x1944 <LCD_vidInit+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18be:	fe 01       	movw	r30, r28
    18c0:	e1 5a       	subi	r30, 0xA1	; 161
    18c2:	ff 4f       	sbci	r31, 0xFF	; 255
    18c4:	60 81       	ld	r22, Z
    18c6:	71 81       	ldd	r23, Z+1	; 0x01
    18c8:	82 81       	ldd	r24, Z+2	; 0x02
    18ca:	93 81       	ldd	r25, Z+3	; 0x03
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	40 e2       	ldi	r20, 0x20	; 32
    18d2:	51 e4       	ldi	r21, 0x41	; 65
    18d4:	0e 94 12 03 	call	0x624	; 0x624 <__mulsf3>
    18d8:	dc 01       	movw	r26, r24
    18da:	cb 01       	movw	r24, r22
    18dc:	8e 01       	movw	r16, r28
    18de:	07 5a       	subi	r16, 0xA7	; 167
    18e0:	1f 4f       	sbci	r17, 0xFF	; 255
    18e2:	bc 01       	movw	r22, r24
    18e4:	cd 01       	movw	r24, r26
    18e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	f8 01       	movw	r30, r16
    18f0:	91 83       	std	Z+1, r25	; 0x01
    18f2:	80 83       	st	Z, r24
    18f4:	1f c0       	rjmp	.+62     	; 0x1934 <LCD_vidInit+0x126>
    18f6:	fe 01       	movw	r30, r28
    18f8:	e9 5a       	subi	r30, 0xA9	; 169
    18fa:	ff 4f       	sbci	r31, 0xFF	; 255
    18fc:	80 e9       	ldi	r24, 0x90	; 144
    18fe:	91 e0       	ldi	r25, 0x01	; 1
    1900:	91 83       	std	Z+1, r25	; 0x01
    1902:	80 83       	st	Z, r24
    1904:	fe 01       	movw	r30, r28
    1906:	e9 5a       	subi	r30, 0xA9	; 169
    1908:	ff 4f       	sbci	r31, 0xFF	; 255
    190a:	80 81       	ld	r24, Z
    190c:	91 81       	ldd	r25, Z+1	; 0x01
    190e:	01 97       	sbiw	r24, 0x01	; 1
    1910:	f1 f7       	brne	.-4      	; 0x190e <LCD_vidInit+0x100>
    1912:	fe 01       	movw	r30, r28
    1914:	e9 5a       	subi	r30, 0xA9	; 169
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	91 83       	std	Z+1, r25	; 0x01
    191a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    191c:	de 01       	movw	r26, r28
    191e:	a7 5a       	subi	r26, 0xA7	; 167
    1920:	bf 4f       	sbci	r27, 0xFF	; 255
    1922:	fe 01       	movw	r30, r28
    1924:	e7 5a       	subi	r30, 0xA7	; 167
    1926:	ff 4f       	sbci	r31, 0xFF	; 255
    1928:	80 81       	ld	r24, Z
    192a:	91 81       	ldd	r25, Z+1	; 0x01
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	11 96       	adiw	r26, 0x01	; 1
    1930:	9c 93       	st	X, r25
    1932:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1934:	fe 01       	movw	r30, r28
    1936:	e7 5a       	subi	r30, 0xA7	; 167
    1938:	ff 4f       	sbci	r31, 0xFF	; 255
    193a:	80 81       	ld	r24, Z
    193c:	91 81       	ldd	r25, Z+1	; 0x01
    193e:	00 97       	sbiw	r24, 0x00	; 0
    1940:	d1 f6       	brne	.-76     	; 0x18f6 <LCD_vidInit+0xe8>
    1942:	27 c0       	rjmp	.+78     	; 0x1992 <LCD_vidInit+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1944:	8e 01       	movw	r16, r28
    1946:	07 5a       	subi	r16, 0xA7	; 167
    1948:	1f 4f       	sbci	r17, 0xFF	; 255
    194a:	fe 01       	movw	r30, r28
    194c:	e5 5a       	subi	r30, 0xA5	; 165
    194e:	ff 4f       	sbci	r31, 0xFF	; 255
    1950:	60 81       	ld	r22, Z
    1952:	71 81       	ldd	r23, Z+1	; 0x01
    1954:	82 81       	ldd	r24, Z+2	; 0x02
    1956:	93 81       	ldd	r25, Z+3	; 0x03
    1958:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	f8 01       	movw	r30, r16
    1962:	91 83       	std	Z+1, r25	; 0x01
    1964:	80 83       	st	Z, r24
    1966:	de 01       	movw	r26, r28
    1968:	ab 5a       	subi	r26, 0xAB	; 171
    196a:	bf 4f       	sbci	r27, 0xFF	; 255
    196c:	fe 01       	movw	r30, r28
    196e:	e7 5a       	subi	r30, 0xA7	; 167
    1970:	ff 4f       	sbci	r31, 0xFF	; 255
    1972:	80 81       	ld	r24, Z
    1974:	91 81       	ldd	r25, Z+1	; 0x01
    1976:	8d 93       	st	X+, r24
    1978:	9c 93       	st	X, r25
    197a:	fe 01       	movw	r30, r28
    197c:	eb 5a       	subi	r30, 0xAB	; 171
    197e:	ff 4f       	sbci	r31, 0xFF	; 255
    1980:	80 81       	ld	r24, Z
    1982:	91 81       	ldd	r25, Z+1	; 0x01
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	f1 f7       	brne	.-4      	; 0x1984 <LCD_vidInit+0x176>
    1988:	fe 01       	movw	r30, r28
    198a:	eb 5a       	subi	r30, 0xAB	; 171
    198c:	ff 4f       	sbci	r31, 0xFF	; 255
    198e:	91 83       	std	Z+1, r25	; 0x01
    1990:	80 83       	st	Z, r24
	_delay_ms(32);

	/*function set init*/

	DIO_enuSetPinValue(LCD_u8_D4_PORT, LCD_u8_D4_PIN, DIO_u8_LOW);
    1992:	82 e0       	ldi	r24, 0x02	; 2
    1994:	64 e0       	ldi	r22, 0x04	; 4
    1996:	40 e0       	ldi	r20, 0x00	; 0
    1998:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(LCD_u8_D5_PORT, LCD_u8_D5_PIN, DIO_u8_HIGH);
    199c:	82 e0       	ldi	r24, 0x02	; 2
    199e:	65 e0       	ldi	r22, 0x05	; 5
    19a0:	41 e0       	ldi	r20, 0x01	; 1
    19a2:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(LCD_u8_D6_PORT, LCD_u8_D6_PIN, DIO_u8_LOW);
    19a6:	82 e0       	ldi	r24, 0x02	; 2
    19a8:	66 e0       	ldi	r22, 0x06	; 6
    19aa:	40 e0       	ldi	r20, 0x00	; 0
    19ac:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(LCD_u8_D7_PORT, LCD_u8_D7_PIN, DIO_u8_LOW);
    19b0:	82 e0       	ldi	r24, 0x02	; 2
    19b2:	67 e0       	ldi	r22, 0x07	; 7
    19b4:	40 e0       	ldi	r20, 0x00	; 0
    19b6:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_enuSetPinValue>
    19ba:	fe 01       	movw	r30, r28
    19bc:	ef 5a       	subi	r30, 0xAF	; 175
    19be:	ff 4f       	sbci	r31, 0xFF	; 255
    19c0:	80 e0       	ldi	r24, 0x00	; 0
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	a0 e0       	ldi	r26, 0x00	; 0
    19c6:	b0 e4       	ldi	r27, 0x40	; 64
    19c8:	80 83       	st	Z, r24
    19ca:	91 83       	std	Z+1, r25	; 0x01
    19cc:	a2 83       	std	Z+2, r26	; 0x02
    19ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19d0:	8e 01       	movw	r16, r28
    19d2:	03 5b       	subi	r16, 0xB3	; 179
    19d4:	1f 4f       	sbci	r17, 0xFF	; 255
    19d6:	fe 01       	movw	r30, r28
    19d8:	ef 5a       	subi	r30, 0xAF	; 175
    19da:	ff 4f       	sbci	r31, 0xFF	; 255
    19dc:	60 81       	ld	r22, Z
    19de:	71 81       	ldd	r23, Z+1	; 0x01
    19e0:	82 81       	ldd	r24, Z+2	; 0x02
    19e2:	93 81       	ldd	r25, Z+3	; 0x03
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	4a e7       	ldi	r20, 0x7A	; 122
    19ea:	55 e4       	ldi	r21, 0x45	; 69
    19ec:	0e 94 12 03 	call	0x624	; 0x624 <__mulsf3>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	f8 01       	movw	r30, r16
    19f6:	80 83       	st	Z, r24
    19f8:	91 83       	std	Z+1, r25	; 0x01
    19fa:	a2 83       	std	Z+2, r26	; 0x02
    19fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19fe:	fe 01       	movw	r30, r28
    1a00:	e3 5b       	subi	r30, 0xB3	; 179
    1a02:	ff 4f       	sbci	r31, 0xFF	; 255
    1a04:	60 81       	ld	r22, Z
    1a06:	71 81       	ldd	r23, Z+1	; 0x01
    1a08:	82 81       	ldd	r24, Z+2	; 0x02
    1a0a:	93 81       	ldd	r25, Z+3	; 0x03
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	40 e8       	ldi	r20, 0x80	; 128
    1a12:	5f e3       	ldi	r21, 0x3F	; 63
    1a14:	0e 94 48 05 	call	0xa90	; 0xa90 <__ltsf2>
    1a18:	88 23       	and	r24, r24
    1a1a:	44 f4       	brge	.+16     	; 0x1a2c <LCD_vidInit+0x21e>
		__ticks = 1;
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	e5 5b       	subi	r30, 0xB5	; 181
    1a20:	ff 4f       	sbci	r31, 0xFF	; 255
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	91 83       	std	Z+1, r25	; 0x01
    1a28:	80 83       	st	Z, r24
    1a2a:	64 c0       	rjmp	.+200    	; 0x1af4 <LCD_vidInit+0x2e6>
	else if (__tmp > 65535)
    1a2c:	fe 01       	movw	r30, r28
    1a2e:	e3 5b       	subi	r30, 0xB3	; 179
    1a30:	ff 4f       	sbci	r31, 0xFF	; 255
    1a32:	60 81       	ld	r22, Z
    1a34:	71 81       	ldd	r23, Z+1	; 0x01
    1a36:	82 81       	ldd	r24, Z+2	; 0x02
    1a38:	93 81       	ldd	r25, Z+3	; 0x03
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	3f ef       	ldi	r19, 0xFF	; 255
    1a3e:	4f e7       	ldi	r20, 0x7F	; 127
    1a40:	57 e4       	ldi	r21, 0x47	; 71
    1a42:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__gtsf2>
    1a46:	18 16       	cp	r1, r24
    1a48:	0c f0       	brlt	.+2      	; 0x1a4c <LCD_vidInit+0x23e>
    1a4a:	43 c0       	rjmp	.+134    	; 0x1ad2 <LCD_vidInit+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a4c:	fe 01       	movw	r30, r28
    1a4e:	ef 5a       	subi	r30, 0xAF	; 175
    1a50:	ff 4f       	sbci	r31, 0xFF	; 255
    1a52:	60 81       	ld	r22, Z
    1a54:	71 81       	ldd	r23, Z+1	; 0x01
    1a56:	82 81       	ldd	r24, Z+2	; 0x02
    1a58:	93 81       	ldd	r25, Z+3	; 0x03
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	40 e2       	ldi	r20, 0x20	; 32
    1a60:	51 e4       	ldi	r21, 0x41	; 65
    1a62:	0e 94 12 03 	call	0x624	; 0x624 <__mulsf3>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	8e 01       	movw	r16, r28
    1a6c:	05 5b       	subi	r16, 0xB5	; 181
    1a6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a70:	bc 01       	movw	r22, r24
    1a72:	cd 01       	movw	r24, r26
    1a74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	f8 01       	movw	r30, r16
    1a7e:	91 83       	std	Z+1, r25	; 0x01
    1a80:	80 83       	st	Z, r24
    1a82:	1f c0       	rjmp	.+62     	; 0x1ac2 <LCD_vidInit+0x2b4>
    1a84:	fe 01       	movw	r30, r28
    1a86:	e7 5b       	subi	r30, 0xB7	; 183
    1a88:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8a:	80 e9       	ldi	r24, 0x90	; 144
    1a8c:	91 e0       	ldi	r25, 0x01	; 1
    1a8e:	91 83       	std	Z+1, r25	; 0x01
    1a90:	80 83       	st	Z, r24
    1a92:	fe 01       	movw	r30, r28
    1a94:	e7 5b       	subi	r30, 0xB7	; 183
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	80 81       	ld	r24, Z
    1a9a:	91 81       	ldd	r25, Z+1	; 0x01
    1a9c:	01 97       	sbiw	r24, 0x01	; 1
    1a9e:	f1 f7       	brne	.-4      	; 0x1a9c <LCD_vidInit+0x28e>
    1aa0:	fe 01       	movw	r30, r28
    1aa2:	e7 5b       	subi	r30, 0xB7	; 183
    1aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa6:	91 83       	std	Z+1, r25	; 0x01
    1aa8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aaa:	de 01       	movw	r26, r28
    1aac:	a5 5b       	subi	r26, 0xB5	; 181
    1aae:	bf 4f       	sbci	r27, 0xFF	; 255
    1ab0:	fe 01       	movw	r30, r28
    1ab2:	e5 5b       	subi	r30, 0xB5	; 181
    1ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab6:	80 81       	ld	r24, Z
    1ab8:	91 81       	ldd	r25, Z+1	; 0x01
    1aba:	01 97       	sbiw	r24, 0x01	; 1
    1abc:	11 96       	adiw	r26, 0x01	; 1
    1abe:	9c 93       	st	X, r25
    1ac0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	e5 5b       	subi	r30, 0xB5	; 181
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	80 81       	ld	r24, Z
    1aca:	91 81       	ldd	r25, Z+1	; 0x01
    1acc:	00 97       	sbiw	r24, 0x00	; 0
    1ace:	d1 f6       	brne	.-76     	; 0x1a84 <LCD_vidInit+0x276>
    1ad0:	27 c0       	rjmp	.+78     	; 0x1b20 <LCD_vidInit+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad2:	8e 01       	movw	r16, r28
    1ad4:	05 5b       	subi	r16, 0xB5	; 181
    1ad6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad8:	fe 01       	movw	r30, r28
    1ada:	e3 5b       	subi	r30, 0xB3	; 179
    1adc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ade:	60 81       	ld	r22, Z
    1ae0:	71 81       	ldd	r23, Z+1	; 0x01
    1ae2:	82 81       	ldd	r24, Z+2	; 0x02
    1ae4:	93 81       	ldd	r25, Z+3	; 0x03
    1ae6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	f8 01       	movw	r30, r16
    1af0:	91 83       	std	Z+1, r25	; 0x01
    1af2:	80 83       	st	Z, r24
    1af4:	de 01       	movw	r26, r28
    1af6:	a9 5b       	subi	r26, 0xB9	; 185
    1af8:	bf 4f       	sbci	r27, 0xFF	; 255
    1afa:	fe 01       	movw	r30, r28
    1afc:	e5 5b       	subi	r30, 0xB5	; 181
    1afe:	ff 4f       	sbci	r31, 0xFF	; 255
    1b00:	80 81       	ld	r24, Z
    1b02:	91 81       	ldd	r25, Z+1	; 0x01
    1b04:	8d 93       	st	X+, r24
    1b06:	9c 93       	st	X, r25
    1b08:	fe 01       	movw	r30, r28
    1b0a:	e9 5b       	subi	r30, 0xB9	; 185
    1b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0e:	80 81       	ld	r24, Z
    1b10:	91 81       	ldd	r25, Z+1	; 0x01
    1b12:	01 97       	sbiw	r24, 0x01	; 1
    1b14:	f1 f7       	brne	.-4      	; 0x1b12 <LCD_vidInit+0x304>
    1b16:	fe 01       	movw	r30, r28
    1b18:	e9 5b       	subi	r30, 0xB9	; 185
    1b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1c:	91 83       	std	Z+1, r25	; 0x01
    1b1e:	80 83       	st	Z, r24
	_delay_ms(2);
	LCD_vidSendEnable();
    1b20:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <LCD_vidSendEnable>

	DIO_enuSetPinValue(LCD_u8_D4_PORT, LCD_u8_D4_PIN, DIO_u8_LOW);
    1b24:	82 e0       	ldi	r24, 0x02	; 2
    1b26:	64 e0       	ldi	r22, 0x04	; 4
    1b28:	40 e0       	ldi	r20, 0x00	; 0
    1b2a:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(LCD_u8_D5_PORT, LCD_u8_D5_PIN, DIO_u8_HIGH);
    1b2e:	82 e0       	ldi	r24, 0x02	; 2
    1b30:	65 e0       	ldi	r22, 0x05	; 5
    1b32:	41 e0       	ldi	r20, 0x01	; 1
    1b34:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(LCD_u8_D6_PORT, LCD_u8_D6_PIN, DIO_u8_LOW);
    1b38:	82 e0       	ldi	r24, 0x02	; 2
    1b3a:	66 e0       	ldi	r22, 0x06	; 6
    1b3c:	40 e0       	ldi	r20, 0x00	; 0
    1b3e:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(LCD_u8_D7_PORT, LCD_u8_D7_PIN, DIO_u8_LOW);
    1b42:	82 e0       	ldi	r24, 0x02	; 2
    1b44:	67 e0       	ldi	r22, 0x07	; 7
    1b46:	40 e0       	ldi	r20, 0x00	; 0
    1b48:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_enuSetPinValue>
    1b4c:	fe 01       	movw	r30, r28
    1b4e:	ed 5b       	subi	r30, 0xBD	; 189
    1b50:	ff 4f       	sbci	r31, 0xFF	; 255
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	a0 e0       	ldi	r26, 0x00	; 0
    1b58:	b0 e4       	ldi	r27, 0x40	; 64
    1b5a:	80 83       	st	Z, r24
    1b5c:	91 83       	std	Z+1, r25	; 0x01
    1b5e:	a2 83       	std	Z+2, r26	; 0x02
    1b60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b62:	8e 01       	movw	r16, r28
    1b64:	01 5c       	subi	r16, 0xC1	; 193
    1b66:	1f 4f       	sbci	r17, 0xFF	; 255
    1b68:	fe 01       	movw	r30, r28
    1b6a:	ed 5b       	subi	r30, 0xBD	; 189
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	60 81       	ld	r22, Z
    1b70:	71 81       	ldd	r23, Z+1	; 0x01
    1b72:	82 81       	ldd	r24, Z+2	; 0x02
    1b74:	93 81       	ldd	r25, Z+3	; 0x03
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	4a e7       	ldi	r20, 0x7A	; 122
    1b7c:	55 e4       	ldi	r21, 0x45	; 69
    1b7e:	0e 94 12 03 	call	0x624	; 0x624 <__mulsf3>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	f8 01       	movw	r30, r16
    1b88:	80 83       	st	Z, r24
    1b8a:	91 83       	std	Z+1, r25	; 0x01
    1b8c:	a2 83       	std	Z+2, r26	; 0x02
    1b8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b90:	fe 01       	movw	r30, r28
    1b92:	ff 96       	adiw	r30, 0x3f	; 63
    1b94:	60 81       	ld	r22, Z
    1b96:	71 81       	ldd	r23, Z+1	; 0x01
    1b98:	82 81       	ldd	r24, Z+2	; 0x02
    1b9a:	93 81       	ldd	r25, Z+3	; 0x03
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	40 e8       	ldi	r20, 0x80	; 128
    1ba2:	5f e3       	ldi	r21, 0x3F	; 63
    1ba4:	0e 94 48 05 	call	0xa90	; 0xa90 <__ltsf2>
    1ba8:	88 23       	and	r24, r24
    1baa:	2c f4       	brge	.+10     	; 0x1bb6 <LCD_vidInit+0x3a8>
		__ticks = 1;
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	9e af       	std	Y+62, r25	; 0x3e
    1bb2:	8d af       	std	Y+61, r24	; 0x3d
    1bb4:	46 c0       	rjmp	.+140    	; 0x1c42 <LCD_vidInit+0x434>
	else if (__tmp > 65535)
    1bb6:	fe 01       	movw	r30, r28
    1bb8:	ff 96       	adiw	r30, 0x3f	; 63
    1bba:	60 81       	ld	r22, Z
    1bbc:	71 81       	ldd	r23, Z+1	; 0x01
    1bbe:	82 81       	ldd	r24, Z+2	; 0x02
    1bc0:	93 81       	ldd	r25, Z+3	; 0x03
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	3f ef       	ldi	r19, 0xFF	; 255
    1bc6:	4f e7       	ldi	r20, 0x7F	; 127
    1bc8:	57 e4       	ldi	r21, 0x47	; 71
    1bca:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__gtsf2>
    1bce:	18 16       	cp	r1, r24
    1bd0:	64 f5       	brge	.+88     	; 0x1c2a <LCD_vidInit+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	ed 5b       	subi	r30, 0xBD	; 189
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	60 81       	ld	r22, Z
    1bda:	71 81       	ldd	r23, Z+1	; 0x01
    1bdc:	82 81       	ldd	r24, Z+2	; 0x02
    1bde:	93 81       	ldd	r25, Z+3	; 0x03
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	40 e2       	ldi	r20, 0x20	; 32
    1be6:	51 e4       	ldi	r21, 0x41	; 65
    1be8:	0e 94 12 03 	call	0x624	; 0x624 <__mulsf3>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	bc 01       	movw	r22, r24
    1bf2:	cd 01       	movw	r24, r26
    1bf4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	9e af       	std	Y+62, r25	; 0x3e
    1bfe:	8d af       	std	Y+61, r24	; 0x3d
    1c00:	0f c0       	rjmp	.+30     	; 0x1c20 <LCD_vidInit+0x412>
    1c02:	80 e9       	ldi	r24, 0x90	; 144
    1c04:	91 e0       	ldi	r25, 0x01	; 1
    1c06:	9c af       	std	Y+60, r25	; 0x3c
    1c08:	8b af       	std	Y+59, r24	; 0x3b
    1c0a:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c0c:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c0e:	01 97       	sbiw	r24, 0x01	; 1
    1c10:	f1 f7       	brne	.-4      	; 0x1c0e <LCD_vidInit+0x400>
    1c12:	9c af       	std	Y+60, r25	; 0x3c
    1c14:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c16:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c18:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	9e af       	std	Y+62, r25	; 0x3e
    1c1e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c20:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c22:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c24:	00 97       	sbiw	r24, 0x00	; 0
    1c26:	69 f7       	brne	.-38     	; 0x1c02 <LCD_vidInit+0x3f4>
    1c28:	16 c0       	rjmp	.+44     	; 0x1c56 <LCD_vidInit+0x448>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c2a:	fe 01       	movw	r30, r28
    1c2c:	ff 96       	adiw	r30, 0x3f	; 63
    1c2e:	60 81       	ld	r22, Z
    1c30:	71 81       	ldd	r23, Z+1	; 0x01
    1c32:	82 81       	ldd	r24, Z+2	; 0x02
    1c34:	93 81       	ldd	r25, Z+3	; 0x03
    1c36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	9e af       	std	Y+62, r25	; 0x3e
    1c40:	8d af       	std	Y+61, r24	; 0x3d
    1c42:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c44:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c46:	9a af       	std	Y+58, r25	; 0x3a
    1c48:	89 af       	std	Y+57, r24	; 0x39
    1c4a:	89 ad       	ldd	r24, Y+57	; 0x39
    1c4c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c4e:	01 97       	sbiw	r24, 0x01	; 1
    1c50:	f1 f7       	brne	.-4      	; 0x1c4e <LCD_vidInit+0x440>
    1c52:	9a af       	std	Y+58, r25	; 0x3a
    1c54:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);
	LCD_vidSendEnable();
    1c56:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <LCD_vidSendEnable>

	DIO_enuSetPinValue(LCD_u8_D6_PORT, LCD_u8_D6_PIN, GET_BIT(LCD_u8_FONT_SIZE, DIO_u8_PIN2));
    1c5a:	82 e0       	ldi	r24, 0x02	; 2
    1c5c:	66 e0       	ldi	r22, 0x06	; 6
    1c5e:	40 e0       	ldi	r20, 0x00	; 0
    1c60:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(LCD_u8_D7_PORT, LCD_u8_D7_PIN, GET_BIT(LCD_u8_NUMBER_OF_LINES, DIO_u8_PIN3));
    1c64:	82 e0       	ldi	r24, 0x02	; 2
    1c66:	67 e0       	ldi	r22, 0x07	; 7
    1c68:	41 e0       	ldi	r20, 0x01	; 1
    1c6a:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_enuSetPinValue>
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	a0 e0       	ldi	r26, 0x00	; 0
    1c74:	b0 e4       	ldi	r27, 0x40	; 64
    1c76:	8d ab       	std	Y+53, r24	; 0x35
    1c78:	9e ab       	std	Y+54, r25	; 0x36
    1c7a:	af ab       	std	Y+55, r26	; 0x37
    1c7c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c7e:	6d a9       	ldd	r22, Y+53	; 0x35
    1c80:	7e a9       	ldd	r23, Y+54	; 0x36
    1c82:	8f a9       	ldd	r24, Y+55	; 0x37
    1c84:	98 ad       	ldd	r25, Y+56	; 0x38
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	4a e7       	ldi	r20, 0x7A	; 122
    1c8c:	55 e4       	ldi	r21, 0x45	; 69
    1c8e:	0e 94 12 03 	call	0x624	; 0x624 <__mulsf3>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	89 ab       	std	Y+49, r24	; 0x31
    1c98:	9a ab       	std	Y+50, r25	; 0x32
    1c9a:	ab ab       	std	Y+51, r26	; 0x33
    1c9c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c9e:	69 a9       	ldd	r22, Y+49	; 0x31
    1ca0:	7a a9       	ldd	r23, Y+50	; 0x32
    1ca2:	8b a9       	ldd	r24, Y+51	; 0x33
    1ca4:	9c a9       	ldd	r25, Y+52	; 0x34
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	40 e8       	ldi	r20, 0x80	; 128
    1cac:	5f e3       	ldi	r21, 0x3F	; 63
    1cae:	0e 94 48 05 	call	0xa90	; 0xa90 <__ltsf2>
    1cb2:	88 23       	and	r24, r24
    1cb4:	2c f4       	brge	.+10     	; 0x1cc0 <LCD_vidInit+0x4b2>
		__ticks = 1;
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	98 ab       	std	Y+48, r25	; 0x30
    1cbc:	8f a7       	std	Y+47, r24	; 0x2f
    1cbe:	3f c0       	rjmp	.+126    	; 0x1d3e <LCD_vidInit+0x530>
	else if (__tmp > 65535)
    1cc0:	69 a9       	ldd	r22, Y+49	; 0x31
    1cc2:	7a a9       	ldd	r23, Y+50	; 0x32
    1cc4:	8b a9       	ldd	r24, Y+51	; 0x33
    1cc6:	9c a9       	ldd	r25, Y+52	; 0x34
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	3f ef       	ldi	r19, 0xFF	; 255
    1ccc:	4f e7       	ldi	r20, 0x7F	; 127
    1cce:	57 e4       	ldi	r21, 0x47	; 71
    1cd0:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__gtsf2>
    1cd4:	18 16       	cp	r1, r24
    1cd6:	4c f5       	brge	.+82     	; 0x1d2a <LCD_vidInit+0x51c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd8:	6d a9       	ldd	r22, Y+53	; 0x35
    1cda:	7e a9       	ldd	r23, Y+54	; 0x36
    1cdc:	8f a9       	ldd	r24, Y+55	; 0x37
    1cde:	98 ad       	ldd	r25, Y+56	; 0x38
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	40 e2       	ldi	r20, 0x20	; 32
    1ce6:	51 e4       	ldi	r21, 0x41	; 65
    1ce8:	0e 94 12 03 	call	0x624	; 0x624 <__mulsf3>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	bc 01       	movw	r22, r24
    1cf2:	cd 01       	movw	r24, r26
    1cf4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	98 ab       	std	Y+48, r25	; 0x30
    1cfe:	8f a7       	std	Y+47, r24	; 0x2f
    1d00:	0f c0       	rjmp	.+30     	; 0x1d20 <LCD_vidInit+0x512>
    1d02:	80 e9       	ldi	r24, 0x90	; 144
    1d04:	91 e0       	ldi	r25, 0x01	; 1
    1d06:	9e a7       	std	Y+46, r25	; 0x2e
    1d08:	8d a7       	std	Y+45, r24	; 0x2d
    1d0a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d0c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d0e:	01 97       	sbiw	r24, 0x01	; 1
    1d10:	f1 f7       	brne	.-4      	; 0x1d0e <LCD_vidInit+0x500>
    1d12:	9e a7       	std	Y+46, r25	; 0x2e
    1d14:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d16:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d18:	98 a9       	ldd	r25, Y+48	; 0x30
    1d1a:	01 97       	sbiw	r24, 0x01	; 1
    1d1c:	98 ab       	std	Y+48, r25	; 0x30
    1d1e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d20:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d22:	98 a9       	ldd	r25, Y+48	; 0x30
    1d24:	00 97       	sbiw	r24, 0x00	; 0
    1d26:	69 f7       	brne	.-38     	; 0x1d02 <LCD_vidInit+0x4f4>
    1d28:	14 c0       	rjmp	.+40     	; 0x1d52 <LCD_vidInit+0x544>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d2a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d2c:	7a a9       	ldd	r23, Y+50	; 0x32
    1d2e:	8b a9       	ldd	r24, Y+51	; 0x33
    1d30:	9c a9       	ldd	r25, Y+52	; 0x34
    1d32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	98 ab       	std	Y+48, r25	; 0x30
    1d3c:	8f a7       	std	Y+47, r24	; 0x2f
    1d3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d40:	98 a9       	ldd	r25, Y+48	; 0x30
    1d42:	9c a7       	std	Y+44, r25	; 0x2c
    1d44:	8b a7       	std	Y+43, r24	; 0x2b
    1d46:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d48:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	f1 f7       	brne	.-4      	; 0x1d4a <LCD_vidInit+0x53c>
    1d4e:	9c a7       	std	Y+44, r25	; 0x2c
    1d50:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	LCD_vidSendEnable();
    1d52:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <LCD_vidSendEnable>

	/*display control init*/
	LCD_enuSendInstruction(LCD_u8_DISPLAY_CONTROL);
    1d56:	8c e0       	ldi	r24, 0x0C	; 12
    1d58:	0e 94 03 11 	call	0x2206	; 0x2206 <LCD_enuSendInstruction>
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	a0 e0       	ldi	r26, 0x00	; 0
    1d62:	b0 e4       	ldi	r27, 0x40	; 64
    1d64:	8f a3       	std	Y+39, r24	; 0x27
    1d66:	98 a7       	std	Y+40, r25	; 0x28
    1d68:	a9 a7       	std	Y+41, r26	; 0x29
    1d6a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d6c:	6f a1       	ldd	r22, Y+39	; 0x27
    1d6e:	78 a5       	ldd	r23, Y+40	; 0x28
    1d70:	89 a5       	ldd	r24, Y+41	; 0x29
    1d72:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	4a e7       	ldi	r20, 0x7A	; 122
    1d7a:	55 e4       	ldi	r21, 0x45	; 69
    1d7c:	0e 94 12 03 	call	0x624	; 0x624 <__mulsf3>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	8b a3       	std	Y+35, r24	; 0x23
    1d86:	9c a3       	std	Y+36, r25	; 0x24
    1d88:	ad a3       	std	Y+37, r26	; 0x25
    1d8a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d8c:	6b a1       	ldd	r22, Y+35	; 0x23
    1d8e:	7c a1       	ldd	r23, Y+36	; 0x24
    1d90:	8d a1       	ldd	r24, Y+37	; 0x25
    1d92:	9e a1       	ldd	r25, Y+38	; 0x26
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	40 e8       	ldi	r20, 0x80	; 128
    1d9a:	5f e3       	ldi	r21, 0x3F	; 63
    1d9c:	0e 94 48 05 	call	0xa90	; 0xa90 <__ltsf2>
    1da0:	88 23       	and	r24, r24
    1da2:	2c f4       	brge	.+10     	; 0x1dae <LCD_vidInit+0x5a0>
		__ticks = 1;
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	9a a3       	std	Y+34, r25	; 0x22
    1daa:	89 a3       	std	Y+33, r24	; 0x21
    1dac:	3f c0       	rjmp	.+126    	; 0x1e2c <LCD_vidInit+0x61e>
	else if (__tmp > 65535)
    1dae:	6b a1       	ldd	r22, Y+35	; 0x23
    1db0:	7c a1       	ldd	r23, Y+36	; 0x24
    1db2:	8d a1       	ldd	r24, Y+37	; 0x25
    1db4:	9e a1       	ldd	r25, Y+38	; 0x26
    1db6:	20 e0       	ldi	r18, 0x00	; 0
    1db8:	3f ef       	ldi	r19, 0xFF	; 255
    1dba:	4f e7       	ldi	r20, 0x7F	; 127
    1dbc:	57 e4       	ldi	r21, 0x47	; 71
    1dbe:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__gtsf2>
    1dc2:	18 16       	cp	r1, r24
    1dc4:	4c f5       	brge	.+82     	; 0x1e18 <LCD_vidInit+0x60a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc6:	6f a1       	ldd	r22, Y+39	; 0x27
    1dc8:	78 a5       	ldd	r23, Y+40	; 0x28
    1dca:	89 a5       	ldd	r24, Y+41	; 0x29
    1dcc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	40 e2       	ldi	r20, 0x20	; 32
    1dd4:	51 e4       	ldi	r21, 0x41	; 65
    1dd6:	0e 94 12 03 	call	0x624	; 0x624 <__mulsf3>
    1dda:	dc 01       	movw	r26, r24
    1ddc:	cb 01       	movw	r24, r22
    1dde:	bc 01       	movw	r22, r24
    1de0:	cd 01       	movw	r24, r26
    1de2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	9a a3       	std	Y+34, r25	; 0x22
    1dec:	89 a3       	std	Y+33, r24	; 0x21
    1dee:	0f c0       	rjmp	.+30     	; 0x1e0e <LCD_vidInit+0x600>
    1df0:	80 e9       	ldi	r24, 0x90	; 144
    1df2:	91 e0       	ldi	r25, 0x01	; 1
    1df4:	98 a3       	std	Y+32, r25	; 0x20
    1df6:	8f 8f       	std	Y+31, r24	; 0x1f
    1df8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dfa:	98 a1       	ldd	r25, Y+32	; 0x20
    1dfc:	01 97       	sbiw	r24, 0x01	; 1
    1dfe:	f1 f7       	brne	.-4      	; 0x1dfc <LCD_vidInit+0x5ee>
    1e00:	98 a3       	std	Y+32, r25	; 0x20
    1e02:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e04:	89 a1       	ldd	r24, Y+33	; 0x21
    1e06:	9a a1       	ldd	r25, Y+34	; 0x22
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	9a a3       	std	Y+34, r25	; 0x22
    1e0c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e0e:	89 a1       	ldd	r24, Y+33	; 0x21
    1e10:	9a a1       	ldd	r25, Y+34	; 0x22
    1e12:	00 97       	sbiw	r24, 0x00	; 0
    1e14:	69 f7       	brne	.-38     	; 0x1df0 <LCD_vidInit+0x5e2>
    1e16:	14 c0       	rjmp	.+40     	; 0x1e40 <LCD_vidInit+0x632>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e18:	6b a1       	ldd	r22, Y+35	; 0x23
    1e1a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e1c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e1e:	9e a1       	ldd	r25, Y+38	; 0x26
    1e20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	9a a3       	std	Y+34, r25	; 0x22
    1e2a:	89 a3       	std	Y+33, r24	; 0x21
    1e2c:	89 a1       	ldd	r24, Y+33	; 0x21
    1e2e:	9a a1       	ldd	r25, Y+34	; 0x22
    1e30:	9e 8f       	std	Y+30, r25	; 0x1e
    1e32:	8d 8f       	std	Y+29, r24	; 0x1d
    1e34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e36:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e38:	01 97       	sbiw	r24, 0x01	; 1
    1e3a:	f1 f7       	brne	.-4      	; 0x1e38 <LCD_vidInit+0x62a>
    1e3c:	9e 8f       	std	Y+30, r25	; 0x1e
    1e3e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);

	/*clear display*/
	LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	0e 94 03 11 	call	0x2206	; 0x2206 <LCD_enuSendInstruction>
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	a0 e0       	ldi	r26, 0x00	; 0
    1e4c:	b0 e4       	ldi	r27, 0x40	; 64
    1e4e:	89 8f       	std	Y+25, r24	; 0x19
    1e50:	9a 8f       	std	Y+26, r25	; 0x1a
    1e52:	ab 8f       	std	Y+27, r26	; 0x1b
    1e54:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e56:	69 8d       	ldd	r22, Y+25	; 0x19
    1e58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	4a e7       	ldi	r20, 0x7A	; 122
    1e64:	55 e4       	ldi	r21, 0x45	; 69
    1e66:	0e 94 12 03 	call	0x624	; 0x624 <__mulsf3>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	8d 8b       	std	Y+21, r24	; 0x15
    1e70:	9e 8b       	std	Y+22, r25	; 0x16
    1e72:	af 8b       	std	Y+23, r26	; 0x17
    1e74:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e76:	6d 89       	ldd	r22, Y+21	; 0x15
    1e78:	7e 89       	ldd	r23, Y+22	; 0x16
    1e7a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	40 e8       	ldi	r20, 0x80	; 128
    1e84:	5f e3       	ldi	r21, 0x3F	; 63
    1e86:	0e 94 48 05 	call	0xa90	; 0xa90 <__ltsf2>
    1e8a:	88 23       	and	r24, r24
    1e8c:	2c f4       	brge	.+10     	; 0x1e98 <LCD_vidInit+0x68a>
		__ticks = 1;
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	9c 8b       	std	Y+20, r25	; 0x14
    1e94:	8b 8b       	std	Y+19, r24	; 0x13
    1e96:	3f c0       	rjmp	.+126    	; 0x1f16 <LCD_vidInit+0x708>
	else if (__tmp > 65535)
    1e98:	6d 89       	ldd	r22, Y+21	; 0x15
    1e9a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e9c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e9e:	98 8d       	ldd	r25, Y+24	; 0x18
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	3f ef       	ldi	r19, 0xFF	; 255
    1ea4:	4f e7       	ldi	r20, 0x7F	; 127
    1ea6:	57 e4       	ldi	r21, 0x47	; 71
    1ea8:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__gtsf2>
    1eac:	18 16       	cp	r1, r24
    1eae:	4c f5       	brge	.+82     	; 0x1f02 <LCD_vidInit+0x6f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb0:	69 8d       	ldd	r22, Y+25	; 0x19
    1eb2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	40 e2       	ldi	r20, 0x20	; 32
    1ebe:	51 e4       	ldi	r21, 0x41	; 65
    1ec0:	0e 94 12 03 	call	0x624	; 0x624 <__mulsf3>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	bc 01       	movw	r22, r24
    1eca:	cd 01       	movw	r24, r26
    1ecc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	9c 8b       	std	Y+20, r25	; 0x14
    1ed6:	8b 8b       	std	Y+19, r24	; 0x13
    1ed8:	0f c0       	rjmp	.+30     	; 0x1ef8 <LCD_vidInit+0x6ea>
    1eda:	80 e9       	ldi	r24, 0x90	; 144
    1edc:	91 e0       	ldi	r25, 0x01	; 1
    1ede:	9a 8b       	std	Y+18, r25	; 0x12
    1ee0:	89 8b       	std	Y+17, r24	; 0x11
    1ee2:	89 89       	ldd	r24, Y+17	; 0x11
    1ee4:	9a 89       	ldd	r25, Y+18	; 0x12
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
    1ee8:	f1 f7       	brne	.-4      	; 0x1ee6 <LCD_vidInit+0x6d8>
    1eea:	9a 8b       	std	Y+18, r25	; 0x12
    1eec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eee:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	9c 8b       	std	Y+20, r25	; 0x14
    1ef6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef8:	8b 89       	ldd	r24, Y+19	; 0x13
    1efa:	9c 89       	ldd	r25, Y+20	; 0x14
    1efc:	00 97       	sbiw	r24, 0x00	; 0
    1efe:	69 f7       	brne	.-38     	; 0x1eda <LCD_vidInit+0x6cc>
    1f00:	14 c0       	rjmp	.+40     	; 0x1f2a <LCD_vidInit+0x71c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f02:	6d 89       	ldd	r22, Y+21	; 0x15
    1f04:	7e 89       	ldd	r23, Y+22	; 0x16
    1f06:	8f 89       	ldd	r24, Y+23	; 0x17
    1f08:	98 8d       	ldd	r25, Y+24	; 0x18
    1f0a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	9c 8b       	std	Y+20, r25	; 0x14
    1f14:	8b 8b       	std	Y+19, r24	; 0x13
    1f16:	8b 89       	ldd	r24, Y+19	; 0x13
    1f18:	9c 89       	ldd	r25, Y+20	; 0x14
    1f1a:	98 8b       	std	Y+16, r25	; 0x10
    1f1c:	8f 87       	std	Y+15, r24	; 0x0f
    1f1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f20:	98 89       	ldd	r25, Y+16	; 0x10
    1f22:	01 97       	sbiw	r24, 0x01	; 1
    1f24:	f1 f7       	brne	.-4      	; 0x1f22 <LCD_vidInit+0x714>
    1f26:	98 8b       	std	Y+16, r25	; 0x10
    1f28:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	/*entry mode set init */
	LCD_enuSendInstruction(LCD_u8_ENTRY_MODE_SET);
    1f2a:	86 e0       	ldi	r24, 0x06	; 6
    1f2c:	0e 94 03 11 	call	0x2206	; 0x2206 <LCD_enuSendInstruction>
    1f30:	80 e0       	ldi	r24, 0x00	; 0
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	a0 e0       	ldi	r26, 0x00	; 0
    1f36:	b0 e4       	ldi	r27, 0x40	; 64
    1f38:	8b 87       	std	Y+11, r24	; 0x0b
    1f3a:	9c 87       	std	Y+12, r25	; 0x0c
    1f3c:	ad 87       	std	Y+13, r26	; 0x0d
    1f3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f40:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f42:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f46:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	4a e7       	ldi	r20, 0x7A	; 122
    1f4e:	55 e4       	ldi	r21, 0x45	; 69
    1f50:	0e 94 12 03 	call	0x624	; 0x624 <__mulsf3>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	8f 83       	std	Y+7, r24	; 0x07
    1f5a:	98 87       	std	Y+8, r25	; 0x08
    1f5c:	a9 87       	std	Y+9, r26	; 0x09
    1f5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f60:	6f 81       	ldd	r22, Y+7	; 0x07
    1f62:	78 85       	ldd	r23, Y+8	; 0x08
    1f64:	89 85       	ldd	r24, Y+9	; 0x09
    1f66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	40 e8       	ldi	r20, 0x80	; 128
    1f6e:	5f e3       	ldi	r21, 0x3F	; 63
    1f70:	0e 94 48 05 	call	0xa90	; 0xa90 <__ltsf2>
    1f74:	88 23       	and	r24, r24
    1f76:	2c f4       	brge	.+10     	; 0x1f82 <LCD_vidInit+0x774>
		__ticks = 1;
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	9e 83       	std	Y+6, r25	; 0x06
    1f7e:	8d 83       	std	Y+5, r24	; 0x05
    1f80:	3f c0       	rjmp	.+126    	; 0x2000 <LCD_vidInit+0x7f2>
	else if (__tmp > 65535)
    1f82:	6f 81       	ldd	r22, Y+7	; 0x07
    1f84:	78 85       	ldd	r23, Y+8	; 0x08
    1f86:	89 85       	ldd	r24, Y+9	; 0x09
    1f88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	3f ef       	ldi	r19, 0xFF	; 255
    1f8e:	4f e7       	ldi	r20, 0x7F	; 127
    1f90:	57 e4       	ldi	r21, 0x47	; 71
    1f92:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__gtsf2>
    1f96:	18 16       	cp	r1, r24
    1f98:	4c f5       	brge	.+82     	; 0x1fec <LCD_vidInit+0x7de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	40 e2       	ldi	r20, 0x20	; 32
    1fa8:	51 e4       	ldi	r21, 0x41	; 65
    1faa:	0e 94 12 03 	call	0x624	; 0x624 <__mulsf3>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	bc 01       	movw	r22, r24
    1fb4:	cd 01       	movw	r24, r26
    1fb6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	9e 83       	std	Y+6, r25	; 0x06
    1fc0:	8d 83       	std	Y+5, r24	; 0x05
    1fc2:	0f c0       	rjmp	.+30     	; 0x1fe2 <LCD_vidInit+0x7d4>
    1fc4:	80 e9       	ldi	r24, 0x90	; 144
    1fc6:	91 e0       	ldi	r25, 0x01	; 1
    1fc8:	9c 83       	std	Y+4, r25	; 0x04
    1fca:	8b 83       	std	Y+3, r24	; 0x03
    1fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fce:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd0:	01 97       	sbiw	r24, 0x01	; 1
    1fd2:	f1 f7       	brne	.-4      	; 0x1fd0 <LCD_vidInit+0x7c2>
    1fd4:	9c 83       	std	Y+4, r25	; 0x04
    1fd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fda:	9e 81       	ldd	r25, Y+6	; 0x06
    1fdc:	01 97       	sbiw	r24, 0x01	; 1
    1fde:	9e 83       	std	Y+6, r25	; 0x06
    1fe0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe6:	00 97       	sbiw	r24, 0x00	; 0
    1fe8:	69 f7       	brne	.-38     	; 0x1fc4 <LCD_vidInit+0x7b6>
    1fea:	14 c0       	rjmp	.+40     	; 0x2014 <LCD_vidInit+0x806>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fec:	6f 81       	ldd	r22, Y+7	; 0x07
    1fee:	78 85       	ldd	r23, Y+8	; 0x08
    1ff0:	89 85       	ldd	r24, Y+9	; 0x09
    1ff2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	9e 83       	std	Y+6, r25	; 0x06
    1ffe:	8d 83       	std	Y+5, r24	; 0x05
    2000:	8d 81       	ldd	r24, Y+5	; 0x05
    2002:	9e 81       	ldd	r25, Y+6	; 0x06
    2004:	9a 83       	std	Y+2, r25	; 0x02
    2006:	89 83       	std	Y+1, r24	; 0x01
    2008:	89 81       	ldd	r24, Y+1	; 0x01
    200a:	9a 81       	ldd	r25, Y+2	; 0x02
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	f1 f7       	brne	.-4      	; 0x200c <LCD_vidInit+0x7fe>
    2010:	9a 83       	std	Y+2, r25	; 0x02
    2012:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
#endif
}
    2014:	ce 59       	subi	r28, 0x9E	; 158
    2016:	df 4f       	sbci	r29, 0xFF	; 255
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	f8 94       	cli
    201c:	de bf       	out	0x3e, r29	; 62
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	cd bf       	out	0x3d, r28	; 61
    2022:	cf 91       	pop	r28
    2024:	df 91       	pop	r29
    2026:	1f 91       	pop	r17
    2028:	0f 91       	pop	r16
    202a:	08 95       	ret

0000202c <LCD_enuSendCharacter>:
 * Description: Send character to be displayed on LCD
 * Arguments: 	First Argument : Copy_u8Character, options(any character on ASCII table)
 * Return :	  	LCD_tenu_ErrorStatus
 * */
LCD_tenu_ErrorStatus LCD_enuSendCharacter(u8 Copy_u8Character)
{
    202c:	df 93       	push	r29
    202e:	cf 93       	push	r28
    2030:	cd b7       	in	r28, 0x3d	; 61
    2032:	de b7       	in	r29, 0x3e	; 62
    2034:	60 97       	sbiw	r28, 0x10	; 16
    2036:	0f b6       	in	r0, 0x3f	; 63
    2038:	f8 94       	cli
    203a:	de bf       	out	0x3e, r29	; 62
    203c:	0f be       	out	0x3f, r0	; 63
    203e:	cd bf       	out	0x3d, r28	; 61
    2040:	88 8b       	std	Y+16, r24	; 0x10
	LCD_tenu_ErrorStatus Local_enuErrorStatus = LCD_OK;
    2042:	1f 86       	std	Y+15, r1	; 0x0f

	if (Copy_u8Character > 127)
    2044:	88 89       	ldd	r24, Y+16	; 0x10
    2046:	88 23       	and	r24, r24
    2048:	1c f4       	brge	.+6      	; 0x2050 <LCD_enuSendCharacter+0x24>
	{
		Local_enuErrorStatus = LCD_NOK;
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	8f 87       	std	Y+15, r24	; 0x0f
    204e:	d1 c0       	rjmp	.+418    	; 0x21f2 <LCD_enuSendCharacter+0x1c6>
		/*Send Enable*/
		LCD_vidSendEnable();
#elif LCD_u8_DATA_LENGTH ==LCD_u8_4_BIT_MODE

		/*RS pin ---> High*/
		DIO_enuSetPinValue(LCD_u8_RS_PORT, LCD_u8_RS_PIN, DIO_u8_HIGH);
    2050:	82 e0       	ldi	r24, 0x02	; 2
    2052:	61 e0       	ldi	r22, 0x01	; 1
    2054:	41 e0       	ldi	r20, 0x01	; 1
    2056:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_enuSetPinValue>

		/*RW pin ---> low*/
		DIO_enuSetPinValue(LCD_u8_RW_PORT, LCD_u8_RW_PIN, DIO_u8_LOW);
    205a:	82 e0       	ldi	r24, 0x02	; 2
    205c:	62 e0       	ldi	r22, 0x02	; 2
    205e:	40 e0       	ldi	r20, 0x00	; 0
    2060:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_enuSetPinValue>
		/*Send instruction*/

		DIO_enuSetPinValue(LCD_u8_D4_PORT, LCD_u8_D4_PIN, GET_BIT(Copy_u8Character, DIO_u8_PIN4));
    2064:	88 89       	ldd	r24, Y+16	; 0x10
    2066:	82 95       	swap	r24
    2068:	8f 70       	andi	r24, 0x0F	; 15
    206a:	98 2f       	mov	r25, r24
    206c:	91 70       	andi	r25, 0x01	; 1
    206e:	82 e0       	ldi	r24, 0x02	; 2
    2070:	64 e0       	ldi	r22, 0x04	; 4
    2072:	49 2f       	mov	r20, r25
    2074:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_u8_D5_PORT, LCD_u8_D5_PIN, GET_BIT(Copy_u8Character, DIO_u8_PIN5));
    2078:	88 89       	ldd	r24, Y+16	; 0x10
    207a:	82 95       	swap	r24
    207c:	86 95       	lsr	r24
    207e:	87 70       	andi	r24, 0x07	; 7
    2080:	98 2f       	mov	r25, r24
    2082:	91 70       	andi	r25, 0x01	; 1
    2084:	82 e0       	ldi	r24, 0x02	; 2
    2086:	65 e0       	ldi	r22, 0x05	; 5
    2088:	49 2f       	mov	r20, r25
    208a:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_u8_D6_PORT, LCD_u8_D6_PIN, GET_BIT(Copy_u8Character, DIO_u8_PIN6));
    208e:	88 89       	ldd	r24, Y+16	; 0x10
    2090:	82 95       	swap	r24
    2092:	86 95       	lsr	r24
    2094:	86 95       	lsr	r24
    2096:	83 70       	andi	r24, 0x03	; 3
    2098:	98 2f       	mov	r25, r24
    209a:	91 70       	andi	r25, 0x01	; 1
    209c:	82 e0       	ldi	r24, 0x02	; 2
    209e:	66 e0       	ldi	r22, 0x06	; 6
    20a0:	49 2f       	mov	r20, r25
    20a2:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_u8_D7_PORT, LCD_u8_D7_PIN, GET_BIT(Copy_u8Character, DIO_u8_PIN7));
    20a6:	88 89       	ldd	r24, Y+16	; 0x10
    20a8:	98 2f       	mov	r25, r24
    20aa:	99 1f       	adc	r25, r25
    20ac:	99 27       	eor	r25, r25
    20ae:	99 1f       	adc	r25, r25
    20b0:	82 e0       	ldi	r24, 0x02	; 2
    20b2:	67 e0       	ldi	r22, 0x07	; 7
    20b4:	49 2f       	mov	r20, r25
    20b6:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_enuSetPinValue>
		LCD_vidSendEnable();
    20ba:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <LCD_vidSendEnable>
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	a0 e0       	ldi	r26, 0x00	; 0
    20c4:	b0 e4       	ldi	r27, 0x40	; 64
    20c6:	8b 87       	std	Y+11, r24	; 0x0b
    20c8:	9c 87       	std	Y+12, r25	; 0x0c
    20ca:	ad 87       	std	Y+13, r26	; 0x0d
    20cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    20d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    20d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	4a e7       	ldi	r20, 0x7A	; 122
    20dc:	55 e4       	ldi	r21, 0x45	; 69
    20de:	0e 94 12 03 	call	0x624	; 0x624 <__mulsf3>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	8f 83       	std	Y+7, r24	; 0x07
    20e8:	98 87       	std	Y+8, r25	; 0x08
    20ea:	a9 87       	std	Y+9, r26	; 0x09
    20ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20ee:	6f 81       	ldd	r22, Y+7	; 0x07
    20f0:	78 85       	ldd	r23, Y+8	; 0x08
    20f2:	89 85       	ldd	r24, Y+9	; 0x09
    20f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	40 e8       	ldi	r20, 0x80	; 128
    20fc:	5f e3       	ldi	r21, 0x3F	; 63
    20fe:	0e 94 48 05 	call	0xa90	; 0xa90 <__ltsf2>
    2102:	88 23       	and	r24, r24
    2104:	2c f4       	brge	.+10     	; 0x2110 <LCD_enuSendCharacter+0xe4>
		__ticks = 1;
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	9e 83       	std	Y+6, r25	; 0x06
    210c:	8d 83       	std	Y+5, r24	; 0x05
    210e:	3f c0       	rjmp	.+126    	; 0x218e <LCD_enuSendCharacter+0x162>
	else if (__tmp > 65535)
    2110:	6f 81       	ldd	r22, Y+7	; 0x07
    2112:	78 85       	ldd	r23, Y+8	; 0x08
    2114:	89 85       	ldd	r24, Y+9	; 0x09
    2116:	9a 85       	ldd	r25, Y+10	; 0x0a
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	3f ef       	ldi	r19, 0xFF	; 255
    211c:	4f e7       	ldi	r20, 0x7F	; 127
    211e:	57 e4       	ldi	r21, 0x47	; 71
    2120:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__gtsf2>
    2124:	18 16       	cp	r1, r24
    2126:	4c f5       	brge	.+82     	; 0x217a <LCD_enuSendCharacter+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2128:	6b 85       	ldd	r22, Y+11	; 0x0b
    212a:	7c 85       	ldd	r23, Y+12	; 0x0c
    212c:	8d 85       	ldd	r24, Y+13	; 0x0d
    212e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e2       	ldi	r20, 0x20	; 32
    2136:	51 e4       	ldi	r21, 0x41	; 65
    2138:	0e 94 12 03 	call	0x624	; 0x624 <__mulsf3>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	bc 01       	movw	r22, r24
    2142:	cd 01       	movw	r24, r26
    2144:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	9e 83       	std	Y+6, r25	; 0x06
    214e:	8d 83       	std	Y+5, r24	; 0x05
    2150:	0f c0       	rjmp	.+30     	; 0x2170 <LCD_enuSendCharacter+0x144>
    2152:	80 e9       	ldi	r24, 0x90	; 144
    2154:	91 e0       	ldi	r25, 0x01	; 1
    2156:	9c 83       	std	Y+4, r25	; 0x04
    2158:	8b 83       	std	Y+3, r24	; 0x03
    215a:	8b 81       	ldd	r24, Y+3	; 0x03
    215c:	9c 81       	ldd	r25, Y+4	; 0x04
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	f1 f7       	brne	.-4      	; 0x215e <LCD_enuSendCharacter+0x132>
    2162:	9c 83       	std	Y+4, r25	; 0x04
    2164:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2166:	8d 81       	ldd	r24, Y+5	; 0x05
    2168:	9e 81       	ldd	r25, Y+6	; 0x06
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	9e 83       	std	Y+6, r25	; 0x06
    216e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2170:	8d 81       	ldd	r24, Y+5	; 0x05
    2172:	9e 81       	ldd	r25, Y+6	; 0x06
    2174:	00 97       	sbiw	r24, 0x00	; 0
    2176:	69 f7       	brne	.-38     	; 0x2152 <LCD_enuSendCharacter+0x126>
    2178:	14 c0       	rjmp	.+40     	; 0x21a2 <LCD_enuSendCharacter+0x176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    217a:	6f 81       	ldd	r22, Y+7	; 0x07
    217c:	78 85       	ldd	r23, Y+8	; 0x08
    217e:	89 85       	ldd	r24, Y+9	; 0x09
    2180:	9a 85       	ldd	r25, Y+10	; 0x0a
    2182:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	9e 83       	std	Y+6, r25	; 0x06
    218c:	8d 83       	std	Y+5, r24	; 0x05
    218e:	8d 81       	ldd	r24, Y+5	; 0x05
    2190:	9e 81       	ldd	r25, Y+6	; 0x06
    2192:	9a 83       	std	Y+2, r25	; 0x02
    2194:	89 83       	std	Y+1, r24	; 0x01
    2196:	89 81       	ldd	r24, Y+1	; 0x01
    2198:	9a 81       	ldd	r25, Y+2	; 0x02
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	f1 f7       	brne	.-4      	; 0x219a <LCD_enuSendCharacter+0x16e>
    219e:	9a 83       	std	Y+2, r25	; 0x02
    21a0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);

		DIO_enuSetPinValue(LCD_u8_D4_PORT, LCD_u8_D4_PIN, GET_BIT(Copy_u8Character, DIO_u8_PIN0));
    21a2:	88 89       	ldd	r24, Y+16	; 0x10
    21a4:	98 2f       	mov	r25, r24
    21a6:	91 70       	andi	r25, 0x01	; 1
    21a8:	82 e0       	ldi	r24, 0x02	; 2
    21aa:	64 e0       	ldi	r22, 0x04	; 4
    21ac:	49 2f       	mov	r20, r25
    21ae:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_u8_D5_PORT, LCD_u8_D5_PIN, GET_BIT(Copy_u8Character, DIO_u8_PIN1));
    21b2:	88 89       	ldd	r24, Y+16	; 0x10
    21b4:	86 95       	lsr	r24
    21b6:	98 2f       	mov	r25, r24
    21b8:	91 70       	andi	r25, 0x01	; 1
    21ba:	82 e0       	ldi	r24, 0x02	; 2
    21bc:	65 e0       	ldi	r22, 0x05	; 5
    21be:	49 2f       	mov	r20, r25
    21c0:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_u8_D6_PORT, LCD_u8_D6_PIN, GET_BIT(Copy_u8Character, DIO_u8_PIN2));
    21c4:	88 89       	ldd	r24, Y+16	; 0x10
    21c6:	86 95       	lsr	r24
    21c8:	86 95       	lsr	r24
    21ca:	98 2f       	mov	r25, r24
    21cc:	91 70       	andi	r25, 0x01	; 1
    21ce:	82 e0       	ldi	r24, 0x02	; 2
    21d0:	66 e0       	ldi	r22, 0x06	; 6
    21d2:	49 2f       	mov	r20, r25
    21d4:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_u8_D7_PORT, LCD_u8_D7_PIN, GET_BIT(Copy_u8Character, DIO_u8_PIN3));
    21d8:	88 89       	ldd	r24, Y+16	; 0x10
    21da:	86 95       	lsr	r24
    21dc:	86 95       	lsr	r24
    21de:	86 95       	lsr	r24
    21e0:	98 2f       	mov	r25, r24
    21e2:	91 70       	andi	r25, 0x01	; 1
    21e4:	82 e0       	ldi	r24, 0x02	; 2
    21e6:	67 e0       	ldi	r22, 0x07	; 7
    21e8:	49 2f       	mov	r20, r25
    21ea:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_enuSetPinValue>
		/*Send Enable*/
		LCD_vidSendEnable();
    21ee:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <LCD_vidSendEnable>
#endif
	}
	return Local_enuErrorStatus;
    21f2:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    21f4:	60 96       	adiw	r28, 0x10	; 16
    21f6:	0f b6       	in	r0, 0x3f	; 63
    21f8:	f8 94       	cli
    21fa:	de bf       	out	0x3e, r29	; 62
    21fc:	0f be       	out	0x3f, r0	; 63
    21fe:	cd bf       	out	0x3d, r28	; 61
    2200:	cf 91       	pop	r28
    2202:	df 91       	pop	r29
    2204:	08 95       	ret

00002206 <LCD_enuSendInstruction>:
 * Description: Send instruction LCD controller
 * Arguments: 	First Argument : Copy_u8Instruction, options(any Instruction deriven from datasheet)
 * Return :	  	LCD_tenu_ErrorStatus
 * */
LCD_tenu_ErrorStatus LCD_enuSendInstruction(u8 Copy_u8Instruction)
{
    2206:	df 93       	push	r29
    2208:	cf 93       	push	r28
    220a:	cd b7       	in	r28, 0x3d	; 61
    220c:	de b7       	in	r29, 0x3e	; 62
    220e:	60 97       	sbiw	r28, 0x10	; 16
    2210:	0f b6       	in	r0, 0x3f	; 63
    2212:	f8 94       	cli
    2214:	de bf       	out	0x3e, r29	; 62
    2216:	0f be       	out	0x3f, r0	; 63
    2218:	cd bf       	out	0x3d, r28	; 61
    221a:	88 8b       	std	Y+16, r24	; 0x10
	LCD_tenu_ErrorStatus Local_enuErrorStatus = LCD_OK;
    221c:	1f 86       	std	Y+15, r1	; 0x0f
		
		/*Send Enable*/
		LCD_vidSendEnable();
#elif LCD_u8_DATA_LENGTH ==LCD_u8_4_BIT_MODE
		/*RS pin ---> low*/
		DIO_enuSetPinValue(LCD_u8_RS_PORT, LCD_u8_RS_PIN, DIO_u8_LOW);
    221e:	82 e0       	ldi	r24, 0x02	; 2
    2220:	61 e0       	ldi	r22, 0x01	; 1
    2222:	40 e0       	ldi	r20, 0x00	; 0
    2224:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_enuSetPinValue>

		/*RW pin ---> low*/
		DIO_enuSetPinValue(LCD_u8_RW_PORT, LCD_u8_RW_PIN, DIO_u8_LOW);
    2228:	82 e0       	ldi	r24, 0x02	; 2
    222a:	62 e0       	ldi	r22, 0x02	; 2
    222c:	40 e0       	ldi	r20, 0x00	; 0
    222e:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_enuSetPinValue>
		/*Send instruction*/

		DIO_enuSetPinValue(LCD_u8_D4_PORT, LCD_u8_D4_PIN, GET_BIT(Copy_u8Instruction, DIO_u8_PIN4));
    2232:	88 89       	ldd	r24, Y+16	; 0x10
    2234:	82 95       	swap	r24
    2236:	8f 70       	andi	r24, 0x0F	; 15
    2238:	98 2f       	mov	r25, r24
    223a:	91 70       	andi	r25, 0x01	; 1
    223c:	82 e0       	ldi	r24, 0x02	; 2
    223e:	64 e0       	ldi	r22, 0x04	; 4
    2240:	49 2f       	mov	r20, r25
    2242:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_u8_D5_PORT, LCD_u8_D5_PIN, GET_BIT(Copy_u8Instruction, DIO_u8_PIN5));
    2246:	88 89       	ldd	r24, Y+16	; 0x10
    2248:	82 95       	swap	r24
    224a:	86 95       	lsr	r24
    224c:	87 70       	andi	r24, 0x07	; 7
    224e:	98 2f       	mov	r25, r24
    2250:	91 70       	andi	r25, 0x01	; 1
    2252:	82 e0       	ldi	r24, 0x02	; 2
    2254:	65 e0       	ldi	r22, 0x05	; 5
    2256:	49 2f       	mov	r20, r25
    2258:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_u8_D6_PORT, LCD_u8_D6_PIN, GET_BIT(Copy_u8Instruction, DIO_u8_PIN6));
    225c:	88 89       	ldd	r24, Y+16	; 0x10
    225e:	82 95       	swap	r24
    2260:	86 95       	lsr	r24
    2262:	86 95       	lsr	r24
    2264:	83 70       	andi	r24, 0x03	; 3
    2266:	98 2f       	mov	r25, r24
    2268:	91 70       	andi	r25, 0x01	; 1
    226a:	82 e0       	ldi	r24, 0x02	; 2
    226c:	66 e0       	ldi	r22, 0x06	; 6
    226e:	49 2f       	mov	r20, r25
    2270:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_u8_D7_PORT, LCD_u8_D7_PIN, GET_BIT(Copy_u8Instruction, DIO_u8_PIN7));
    2274:	88 89       	ldd	r24, Y+16	; 0x10
    2276:	98 2f       	mov	r25, r24
    2278:	99 1f       	adc	r25, r25
    227a:	99 27       	eor	r25, r25
    227c:	99 1f       	adc	r25, r25
    227e:	82 e0       	ldi	r24, 0x02	; 2
    2280:	67 e0       	ldi	r22, 0x07	; 7
    2282:	49 2f       	mov	r20, r25
    2284:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_enuSetPinValue>
		LCD_vidSendEnable();
    2288:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <LCD_vidSendEnable>
    228c:	80 e0       	ldi	r24, 0x00	; 0
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	a0 e0       	ldi	r26, 0x00	; 0
    2292:	b0 e4       	ldi	r27, 0x40	; 64
    2294:	8b 87       	std	Y+11, r24	; 0x0b
    2296:	9c 87       	std	Y+12, r25	; 0x0c
    2298:	ad 87       	std	Y+13, r26	; 0x0d
    229a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    229c:	6b 85       	ldd	r22, Y+11	; 0x0b
    229e:	7c 85       	ldd	r23, Y+12	; 0x0c
    22a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	4a e7       	ldi	r20, 0x7A	; 122
    22aa:	55 e4       	ldi	r21, 0x45	; 69
    22ac:	0e 94 12 03 	call	0x624	; 0x624 <__mulsf3>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	8f 83       	std	Y+7, r24	; 0x07
    22b6:	98 87       	std	Y+8, r25	; 0x08
    22b8:	a9 87       	std	Y+9, r26	; 0x09
    22ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22bc:	6f 81       	ldd	r22, Y+7	; 0x07
    22be:	78 85       	ldd	r23, Y+8	; 0x08
    22c0:	89 85       	ldd	r24, Y+9	; 0x09
    22c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	40 e8       	ldi	r20, 0x80	; 128
    22ca:	5f e3       	ldi	r21, 0x3F	; 63
    22cc:	0e 94 48 05 	call	0xa90	; 0xa90 <__ltsf2>
    22d0:	88 23       	and	r24, r24
    22d2:	2c f4       	brge	.+10     	; 0x22de <LCD_enuSendInstruction+0xd8>
		__ticks = 1;
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	9e 83       	std	Y+6, r25	; 0x06
    22da:	8d 83       	std	Y+5, r24	; 0x05
    22dc:	3f c0       	rjmp	.+126    	; 0x235c <LCD_enuSendInstruction+0x156>
	else if (__tmp > 65535)
    22de:	6f 81       	ldd	r22, Y+7	; 0x07
    22e0:	78 85       	ldd	r23, Y+8	; 0x08
    22e2:	89 85       	ldd	r24, Y+9	; 0x09
    22e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	3f ef       	ldi	r19, 0xFF	; 255
    22ea:	4f e7       	ldi	r20, 0x7F	; 127
    22ec:	57 e4       	ldi	r21, 0x47	; 71
    22ee:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__gtsf2>
    22f2:	18 16       	cp	r1, r24
    22f4:	4c f5       	brge	.+82     	; 0x2348 <LCD_enuSendInstruction+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    22fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	40 e2       	ldi	r20, 0x20	; 32
    2304:	51 e4       	ldi	r21, 0x41	; 65
    2306:	0e 94 12 03 	call	0x624	; 0x624 <__mulsf3>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	bc 01       	movw	r22, r24
    2310:	cd 01       	movw	r24, r26
    2312:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	9e 83       	std	Y+6, r25	; 0x06
    231c:	8d 83       	std	Y+5, r24	; 0x05
    231e:	0f c0       	rjmp	.+30     	; 0x233e <LCD_enuSendInstruction+0x138>
    2320:	80 e9       	ldi	r24, 0x90	; 144
    2322:	91 e0       	ldi	r25, 0x01	; 1
    2324:	9c 83       	std	Y+4, r25	; 0x04
    2326:	8b 83       	std	Y+3, r24	; 0x03
    2328:	8b 81       	ldd	r24, Y+3	; 0x03
    232a:	9c 81       	ldd	r25, Y+4	; 0x04
    232c:	01 97       	sbiw	r24, 0x01	; 1
    232e:	f1 f7       	brne	.-4      	; 0x232c <LCD_enuSendInstruction+0x126>
    2330:	9c 83       	std	Y+4, r25	; 0x04
    2332:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2334:	8d 81       	ldd	r24, Y+5	; 0x05
    2336:	9e 81       	ldd	r25, Y+6	; 0x06
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	9e 83       	std	Y+6, r25	; 0x06
    233c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233e:	8d 81       	ldd	r24, Y+5	; 0x05
    2340:	9e 81       	ldd	r25, Y+6	; 0x06
    2342:	00 97       	sbiw	r24, 0x00	; 0
    2344:	69 f7       	brne	.-38     	; 0x2320 <LCD_enuSendInstruction+0x11a>
    2346:	14 c0       	rjmp	.+40     	; 0x2370 <LCD_enuSendInstruction+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2348:	6f 81       	ldd	r22, Y+7	; 0x07
    234a:	78 85       	ldd	r23, Y+8	; 0x08
    234c:	89 85       	ldd	r24, Y+9	; 0x09
    234e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2350:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	9e 83       	std	Y+6, r25	; 0x06
    235a:	8d 83       	std	Y+5, r24	; 0x05
    235c:	8d 81       	ldd	r24, Y+5	; 0x05
    235e:	9e 81       	ldd	r25, Y+6	; 0x06
    2360:	9a 83       	std	Y+2, r25	; 0x02
    2362:	89 83       	std	Y+1, r24	; 0x01
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	9a 81       	ldd	r25, Y+2	; 0x02
    2368:	01 97       	sbiw	r24, 0x01	; 1
    236a:	f1 f7       	brne	.-4      	; 0x2368 <LCD_enuSendInstruction+0x162>
    236c:	9a 83       	std	Y+2, r25	; 0x02
    236e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_enuSetPinValue(LCD_u8_D4_PORT, LCD_u8_D4_PIN, GET_BIT(Copy_u8Instruction, DIO_u8_PIN0));
    2370:	88 89       	ldd	r24, Y+16	; 0x10
    2372:	98 2f       	mov	r25, r24
    2374:	91 70       	andi	r25, 0x01	; 1
    2376:	82 e0       	ldi	r24, 0x02	; 2
    2378:	64 e0       	ldi	r22, 0x04	; 4
    237a:	49 2f       	mov	r20, r25
    237c:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_u8_D5_PORT, LCD_u8_D5_PIN, GET_BIT(Copy_u8Instruction, DIO_u8_PIN1));
    2380:	88 89       	ldd	r24, Y+16	; 0x10
    2382:	86 95       	lsr	r24
    2384:	98 2f       	mov	r25, r24
    2386:	91 70       	andi	r25, 0x01	; 1
    2388:	82 e0       	ldi	r24, 0x02	; 2
    238a:	65 e0       	ldi	r22, 0x05	; 5
    238c:	49 2f       	mov	r20, r25
    238e:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_u8_D6_PORT, LCD_u8_D6_PIN, GET_BIT(Copy_u8Instruction, DIO_u8_PIN2));
    2392:	88 89       	ldd	r24, Y+16	; 0x10
    2394:	86 95       	lsr	r24
    2396:	86 95       	lsr	r24
    2398:	98 2f       	mov	r25, r24
    239a:	91 70       	andi	r25, 0x01	; 1
    239c:	82 e0       	ldi	r24, 0x02	; 2
    239e:	66 e0       	ldi	r22, 0x06	; 6
    23a0:	49 2f       	mov	r20, r25
    23a2:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_u8_D7_PORT, LCD_u8_D7_PIN, GET_BIT(Copy_u8Instruction, DIO_u8_PIN3));
    23a6:	88 89       	ldd	r24, Y+16	; 0x10
    23a8:	86 95       	lsr	r24
    23aa:	86 95       	lsr	r24
    23ac:	86 95       	lsr	r24
    23ae:	98 2f       	mov	r25, r24
    23b0:	91 70       	andi	r25, 0x01	; 1
    23b2:	82 e0       	ldi	r24, 0x02	; 2
    23b4:	67 e0       	ldi	r22, 0x07	; 7
    23b6:	49 2f       	mov	r20, r25
    23b8:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_enuSetPinValue>

		/*Send Enable*/
		LCD_vidSendEnable();
    23bc:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <LCD_vidSendEnable>
#endif
	}
	return Local_enuErrorStatus;
    23c0:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    23c2:	60 96       	adiw	r28, 0x10	; 16
    23c4:	0f b6       	in	r0, 0x3f	; 63
    23c6:	f8 94       	cli
    23c8:	de bf       	out	0x3e, r29	; 62
    23ca:	0f be       	out	0x3f, r0	; 63
    23cc:	cd bf       	out	0x3d, r28	; 61
    23ce:	cf 91       	pop	r28
    23d0:	df 91       	pop	r29
    23d2:	08 95       	ret

000023d4 <LCD_enuSendString>:
 * Description: Send string to be displayed on LCD
 * Arguments: 	First Argument : Add_pu8String, options(Any non NULL pointer to string)
 * Return :	  	LCD_tenu_ErrorStatus
 * */
LCD_tenu_ErrorStatus LCD_enuSendString(u8 *Add_pu8String)
{
    23d4:	df 93       	push	r29
    23d6:	cf 93       	push	r28
    23d8:	00 d0       	rcall	.+0      	; 0x23da <LCD_enuSendString+0x6>
    23da:	0f 92       	push	r0
    23dc:	cd b7       	in	r28, 0x3d	; 61
    23de:	de b7       	in	r29, 0x3e	; 62
    23e0:	9b 83       	std	Y+3, r25	; 0x03
    23e2:	8a 83       	std	Y+2, r24	; 0x02
	LCD_tenu_ErrorStatus Local_enuErrorStatus = LCD_OK;
    23e4:	19 82       	std	Y+1, r1	; 0x01

	if (Add_pu8String == NULL)
    23e6:	8a 81       	ldd	r24, Y+2	; 0x02
    23e8:	9b 81       	ldd	r25, Y+3	; 0x03
    23ea:	00 97       	sbiw	r24, 0x00	; 0
    23ec:	69 f4       	brne	.+26     	; 0x2408 <LCD_enuSendString+0x34>
	{
		Local_enuErrorStatus = LCD_NOK;
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	89 83       	std	Y+1, r24	; 0x01
    23f2:	0f c0       	rjmp	.+30     	; 0x2412 <LCD_enuSendString+0x3e>
	}
	else
	{
		while (*Add_pu8String != '\0')
		{
			LCD_enuSendCharacter(*Add_pu8String);
    23f4:	ea 81       	ldd	r30, Y+2	; 0x02
    23f6:	fb 81       	ldd	r31, Y+3	; 0x03
    23f8:	80 81       	ld	r24, Z
    23fa:	0e 94 16 10 	call	0x202c	; 0x202c <LCD_enuSendCharacter>

			Add_pu8String++;
    23fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2400:	9b 81       	ldd	r25, Y+3	; 0x03
    2402:	01 96       	adiw	r24, 0x01	; 1
    2404:	9b 83       	std	Y+3, r25	; 0x03
    2406:	8a 83       	std	Y+2, r24	; 0x02
	{
		Local_enuErrorStatus = LCD_NOK;
	}
	else
	{
		while (*Add_pu8String != '\0')
    2408:	ea 81       	ldd	r30, Y+2	; 0x02
    240a:	fb 81       	ldd	r31, Y+3	; 0x03
    240c:	80 81       	ld	r24, Z
    240e:	88 23       	and	r24, r24
    2410:	89 f7       	brne	.-30     	; 0x23f4 <LCD_enuSendString+0x20>

			Add_pu8String++;
		}

	}
	return Local_enuErrorStatus;
    2412:	89 81       	ldd	r24, Y+1	; 0x01
}
    2414:	0f 90       	pop	r0
    2416:	0f 90       	pop	r0
    2418:	0f 90       	pop	r0
    241a:	cf 91       	pop	r28
    241c:	df 91       	pop	r29
    241e:	08 95       	ret

00002420 <LCD_enuChangePosition>:
 * Arguments: 	First Argument : Copy_u8Row,     options (LCD_u8_ROW0 , LCD_u8_ROW1)
 * 				Second Argument : Copy_u8Column, options(LCD_u8_Column0 to LCD_u8_Column15)
 * Return :	  	LCD_tenu_ErrorStatus
 * */
LCD_tenu_ErrorStatus LCD_enuChangePosition(u8 Copy_u8Row, u8 Copy_u8Column)
{
    2420:	df 93       	push	r29
    2422:	cf 93       	push	r28
    2424:	cd b7       	in	r28, 0x3d	; 61
    2426:	de b7       	in	r29, 0x3e	; 62
    2428:	63 97       	sbiw	r28, 0x13	; 19
    242a:	0f b6       	in	r0, 0x3f	; 63
    242c:	f8 94       	cli
    242e:	de bf       	out	0x3e, r29	; 62
    2430:	0f be       	out	0x3f, r0	; 63
    2432:	cd bf       	out	0x3d, r28	; 61
    2434:	88 8b       	std	Y+16, r24	; 0x10
    2436:	69 8b       	std	Y+17, r22	; 0x11
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	a0 e2       	ldi	r26, 0x20	; 32
    243e:	b2 e4       	ldi	r27, 0x42	; 66
    2440:	8b 87       	std	Y+11, r24	; 0x0b
    2442:	9c 87       	std	Y+12, r25	; 0x0c
    2444:	ad 87       	std	Y+13, r26	; 0x0d
    2446:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2448:	6b 85       	ldd	r22, Y+11	; 0x0b
    244a:	7c 85       	ldd	r23, Y+12	; 0x0c
    244c:	8d 85       	ldd	r24, Y+13	; 0x0d
    244e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	4a e7       	ldi	r20, 0x7A	; 122
    2456:	55 e4       	ldi	r21, 0x45	; 69
    2458:	0e 94 12 03 	call	0x624	; 0x624 <__mulsf3>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	8f 83       	std	Y+7, r24	; 0x07
    2462:	98 87       	std	Y+8, r25	; 0x08
    2464:	a9 87       	std	Y+9, r26	; 0x09
    2466:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2468:	6f 81       	ldd	r22, Y+7	; 0x07
    246a:	78 85       	ldd	r23, Y+8	; 0x08
    246c:	89 85       	ldd	r24, Y+9	; 0x09
    246e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	40 e8       	ldi	r20, 0x80	; 128
    2476:	5f e3       	ldi	r21, 0x3F	; 63
    2478:	0e 94 48 05 	call	0xa90	; 0xa90 <__ltsf2>
    247c:	88 23       	and	r24, r24
    247e:	2c f4       	brge	.+10     	; 0x248a <LCD_enuChangePosition+0x6a>
		__ticks = 1;
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	9e 83       	std	Y+6, r25	; 0x06
    2486:	8d 83       	std	Y+5, r24	; 0x05
    2488:	3f c0       	rjmp	.+126    	; 0x2508 <LCD_enuChangePosition+0xe8>
	else if (__tmp > 65535)
    248a:	6f 81       	ldd	r22, Y+7	; 0x07
    248c:	78 85       	ldd	r23, Y+8	; 0x08
    248e:	89 85       	ldd	r24, Y+9	; 0x09
    2490:	9a 85       	ldd	r25, Y+10	; 0x0a
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	3f ef       	ldi	r19, 0xFF	; 255
    2496:	4f e7       	ldi	r20, 0x7F	; 127
    2498:	57 e4       	ldi	r21, 0x47	; 71
    249a:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__gtsf2>
    249e:	18 16       	cp	r1, r24
    24a0:	4c f5       	brge	.+82     	; 0x24f4 <LCD_enuChangePosition+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    24a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    24a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	40 e2       	ldi	r20, 0x20	; 32
    24b0:	51 e4       	ldi	r21, 0x41	; 65
    24b2:	0e 94 12 03 	call	0x624	; 0x624 <__mulsf3>
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	bc 01       	movw	r22, r24
    24bc:	cd 01       	movw	r24, r26
    24be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	9e 83       	std	Y+6, r25	; 0x06
    24c8:	8d 83       	std	Y+5, r24	; 0x05
    24ca:	0f c0       	rjmp	.+30     	; 0x24ea <LCD_enuChangePosition+0xca>
    24cc:	80 e9       	ldi	r24, 0x90	; 144
    24ce:	91 e0       	ldi	r25, 0x01	; 1
    24d0:	9c 83       	std	Y+4, r25	; 0x04
    24d2:	8b 83       	std	Y+3, r24	; 0x03
    24d4:	8b 81       	ldd	r24, Y+3	; 0x03
    24d6:	9c 81       	ldd	r25, Y+4	; 0x04
    24d8:	01 97       	sbiw	r24, 0x01	; 1
    24da:	f1 f7       	brne	.-4      	; 0x24d8 <LCD_enuChangePosition+0xb8>
    24dc:	9c 83       	std	Y+4, r25	; 0x04
    24de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e0:	8d 81       	ldd	r24, Y+5	; 0x05
    24e2:	9e 81       	ldd	r25, Y+6	; 0x06
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	9e 83       	std	Y+6, r25	; 0x06
    24e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ea:	8d 81       	ldd	r24, Y+5	; 0x05
    24ec:	9e 81       	ldd	r25, Y+6	; 0x06
    24ee:	00 97       	sbiw	r24, 0x00	; 0
    24f0:	69 f7       	brne	.-38     	; 0x24cc <LCD_enuChangePosition+0xac>
    24f2:	14 c0       	rjmp	.+40     	; 0x251c <LCD_enuChangePosition+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f4:	6f 81       	ldd	r22, Y+7	; 0x07
    24f6:	78 85       	ldd	r23, Y+8	; 0x08
    24f8:	89 85       	ldd	r24, Y+9	; 0x09
    24fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    24fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	9e 83       	std	Y+6, r25	; 0x06
    2506:	8d 83       	std	Y+5, r24	; 0x05
    2508:	8d 81       	ldd	r24, Y+5	; 0x05
    250a:	9e 81       	ldd	r25, Y+6	; 0x06
    250c:	9a 83       	std	Y+2, r25	; 0x02
    250e:	89 83       	std	Y+1, r24	; 0x01
    2510:	89 81       	ldd	r24, Y+1	; 0x01
    2512:	9a 81       	ldd	r25, Y+2	; 0x02
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	f1 f7       	brne	.-4      	; 0x2514 <LCD_enuChangePosition+0xf4>
    2518:	9a 83       	std	Y+2, r25	; 0x02
    251a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);
	LCD_tenu_ErrorStatus Local_enuErrorStatus = LCD_OK;
    251c:	1f 86       	std	Y+15, r1	; 0x0f

	if (Copy_u8Row > LCD_u8_ROW1 || Copy_u8Column > LCD_u8_Column15)
    251e:	88 89       	ldd	r24, Y+16	; 0x10
    2520:	82 30       	cpi	r24, 0x02	; 2
    2522:	18 f4       	brcc	.+6      	; 0x252a <LCD_enuChangePosition+0x10a>
    2524:	89 89       	ldd	r24, Y+17	; 0x11
    2526:	80 31       	cpi	r24, 0x10	; 16
    2528:	18 f0       	brcs	.+6      	; 0x2530 <LCD_enuChangePosition+0x110>
	{
		Local_enuErrorStatus = LCD_NOK;
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	8f 87       	std	Y+15, r24	; 0x0f
    252e:	18 c0       	rjmp	.+48     	; 0x2560 <LCD_enuChangePosition+0x140>
	}
	else
	{
		switch (Copy_u8Row)
    2530:	88 89       	ldd	r24, Y+16	; 0x10
    2532:	28 2f       	mov	r18, r24
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	3b 8b       	std	Y+19, r19	; 0x13
    2538:	2a 8b       	std	Y+18, r18	; 0x12
    253a:	8a 89       	ldd	r24, Y+18	; 0x12
    253c:	9b 89       	ldd	r25, Y+19	; 0x13
    253e:	00 97       	sbiw	r24, 0x00	; 0
    2540:	31 f0       	breq	.+12     	; 0x254e <LCD_enuChangePosition+0x12e>
    2542:	2a 89       	ldd	r18, Y+18	; 0x12
    2544:	3b 89       	ldd	r19, Y+19	; 0x13
    2546:	21 30       	cpi	r18, 0x01	; 1
    2548:	31 05       	cpc	r19, r1
    254a:	31 f0       	breq	.+12     	; 0x2558 <LCD_enuChangePosition+0x138>
    254c:	09 c0       	rjmp	.+18     	; 0x2560 <LCD_enuChangePosition+0x140>
		{
		case LCD_u8_ROW0:
			LCD_enuSendInstruction(LCD_u8_FIRST_DDRAM_ADDRESS + Copy_u8Column);
    254e:	89 89       	ldd	r24, Y+17	; 0x11
    2550:	80 58       	subi	r24, 0x80	; 128
    2552:	0e 94 03 11 	call	0x2206	; 0x2206 <LCD_enuSendInstruction>
    2556:	04 c0       	rjmp	.+8      	; 0x2560 <LCD_enuChangePosition+0x140>
			break;
		case LCD_u8_ROW1:
			LCD_enuSendInstruction(
    2558:	89 89       	ldd	r24, Y+17	; 0x11
    255a:	80 6c       	ori	r24, 0xC0	; 192
    255c:	0e 94 03 11 	call	0x2206	; 0x2206 <LCD_enuSendInstruction>
					(LCD_u8_FIRST_DDRAM_ADDRESS + LCD_u8_SECOND_LINE_INIT) | (Copy_u8Column));
			break;
		}
	}

	return Local_enuErrorStatus;
    2560:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2562:	63 96       	adiw	r28, 0x13	; 19
    2564:	0f b6       	in	r0, 0x3f	; 63
    2566:	f8 94       	cli
    2568:	de bf       	out	0x3e, r29	; 62
    256a:	0f be       	out	0x3f, r0	; 63
    256c:	cd bf       	out	0x3d, r28	; 61
    256e:	cf 91       	pop	r28
    2570:	df 91       	pop	r29
    2572:	08 95       	ret

00002574 <LCD_enuSendCustomCharacter>:
 * 				
 * Return :	  	LCD_tenu_ErrorStatus
 * */
LCD_tenu_ErrorStatus LCD_enuSendCustomCharacter(u8 *Add_pu8Pattern, u8 Copy_BlockNumberu8,
		u8 Copy_u8Row, u8 Copy_u8Column)
{
    2574:	df 93       	push	r29
    2576:	cf 93       	push	r28
    2578:	cd b7       	in	r28, 0x3d	; 61
    257a:	de b7       	in	r29, 0x3e	; 62
    257c:	65 97       	sbiw	r28, 0x15	; 21
    257e:	0f b6       	in	r0, 0x3f	; 63
    2580:	f8 94       	cli
    2582:	de bf       	out	0x3e, r29	; 62
    2584:	0f be       	out	0x3f, r0	; 63
    2586:	cd bf       	out	0x3d, r28	; 61
    2588:	9a 8b       	std	Y+18, r25	; 0x12
    258a:	89 8b       	std	Y+17, r24	; 0x11
    258c:	6b 8b       	std	Y+19, r22	; 0x13
    258e:	4c 8b       	std	Y+20, r20	; 0x14
    2590:	2d 8b       	std	Y+21, r18	; 0x15
	u8 Local_u8Iterator;
	LCD_tenu_ErrorStatus Local_enuErrorStatus = LCD_OK;
    2592:	1f 86       	std	Y+15, r1	; 0x0f

	if (Add_pu8Pattern == NULL || Copy_u8Row > LCD_u8_ROW1 || Copy_u8Column > LCD_u8_Column15
    2594:	89 89       	ldd	r24, Y+17	; 0x11
    2596:	9a 89       	ldd	r25, Y+18	; 0x12
    2598:	00 97       	sbiw	r24, 0x00	; 0
    259a:	49 f0       	breq	.+18     	; 0x25ae <LCD_enuSendCustomCharacter+0x3a>
    259c:	8c 89       	ldd	r24, Y+20	; 0x14
    259e:	82 30       	cpi	r24, 0x02	; 2
    25a0:	30 f4       	brcc	.+12     	; 0x25ae <LCD_enuSendCustomCharacter+0x3a>
    25a2:	8d 89       	ldd	r24, Y+21	; 0x15
    25a4:	80 31       	cpi	r24, 0x10	; 16
    25a6:	18 f4       	brcc	.+6      	; 0x25ae <LCD_enuSendCustomCharacter+0x3a>
    25a8:	8b 89       	ldd	r24, Y+19	; 0x13
    25aa:	81 35       	cpi	r24, 0x51	; 81
    25ac:	18 f0       	brcs	.+6      	; 0x25b4 <LCD_enuSendCustomCharacter+0x40>
			|| Copy_BlockNumberu8 > 80)
	{
		Local_enuErrorStatus = LCD_NOK;
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	8f 87       	std	Y+15, r24	; 0x0f
    25b2:	99 c0       	rjmp	.+306    	; 0x26e6 <LCD_enuSendCustomCharacter+0x172>
	}
	else
	{
		LCD_enuSendInstruction(LCD_u8_FIRST_CGRAM_ADDRESS + (Copy_BlockNumberu8 * 8));
    25b4:	8b 89       	ldd	r24, Y+19	; 0x13
    25b6:	88 2f       	mov	r24, r24
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	08 96       	adiw	r24, 0x08	; 8
    25bc:	88 0f       	add	r24, r24
    25be:	99 1f       	adc	r25, r25
    25c0:	88 0f       	add	r24, r24
    25c2:	99 1f       	adc	r25, r25
    25c4:	88 0f       	add	r24, r24
    25c6:	99 1f       	adc	r25, r25
    25c8:	0e 94 03 11 	call	0x2206	; 0x2206 <LCD_enuSendInstruction>
		for (Local_u8Iterator = 0; Local_u8Iterator < 8; Local_u8Iterator++)
    25cc:	18 8a       	std	Y+16, r1	; 0x10
    25ce:	80 c0       	rjmp	.+256    	; 0x26d0 <LCD_enuSendCustomCharacter+0x15c>
		{
			LCD_enuSendCharacter(Add_pu8Pattern[Local_u8Iterator]);
    25d0:	88 89       	ldd	r24, Y+16	; 0x10
    25d2:	28 2f       	mov	r18, r24
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	89 89       	ldd	r24, Y+17	; 0x11
    25d8:	9a 89       	ldd	r25, Y+18	; 0x12
    25da:	fc 01       	movw	r30, r24
    25dc:	e2 0f       	add	r30, r18
    25de:	f3 1f       	adc	r31, r19
    25e0:	80 81       	ld	r24, Z
    25e2:	0e 94 16 10 	call	0x202c	; 0x202c <LCD_enuSendCharacter>
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	a0 e8       	ldi	r26, 0x80	; 128
    25ec:	bf e3       	ldi	r27, 0x3F	; 63
    25ee:	8b 87       	std	Y+11, r24	; 0x0b
    25f0:	9c 87       	std	Y+12, r25	; 0x0c
    25f2:	ad 87       	std	Y+13, r26	; 0x0d
    25f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    25fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    25fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	4a e7       	ldi	r20, 0x7A	; 122
    2604:	55 e4       	ldi	r21, 0x45	; 69
    2606:	0e 94 12 03 	call	0x624	; 0x624 <__mulsf3>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	8f 83       	std	Y+7, r24	; 0x07
    2610:	98 87       	std	Y+8, r25	; 0x08
    2612:	a9 87       	std	Y+9, r26	; 0x09
    2614:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2616:	6f 81       	ldd	r22, Y+7	; 0x07
    2618:	78 85       	ldd	r23, Y+8	; 0x08
    261a:	89 85       	ldd	r24, Y+9	; 0x09
    261c:	9a 85       	ldd	r25, Y+10	; 0x0a
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	40 e8       	ldi	r20, 0x80	; 128
    2624:	5f e3       	ldi	r21, 0x3F	; 63
    2626:	0e 94 48 05 	call	0xa90	; 0xa90 <__ltsf2>
    262a:	88 23       	and	r24, r24
    262c:	2c f4       	brge	.+10     	; 0x2638 <LCD_enuSendCustomCharacter+0xc4>
		__ticks = 1;
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	9e 83       	std	Y+6, r25	; 0x06
    2634:	8d 83       	std	Y+5, r24	; 0x05
    2636:	3f c0       	rjmp	.+126    	; 0x26b6 <LCD_enuSendCustomCharacter+0x142>
	else if (__tmp > 65535)
    2638:	6f 81       	ldd	r22, Y+7	; 0x07
    263a:	78 85       	ldd	r23, Y+8	; 0x08
    263c:	89 85       	ldd	r24, Y+9	; 0x09
    263e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	3f ef       	ldi	r19, 0xFF	; 255
    2644:	4f e7       	ldi	r20, 0x7F	; 127
    2646:	57 e4       	ldi	r21, 0x47	; 71
    2648:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__gtsf2>
    264c:	18 16       	cp	r1, r24
    264e:	4c f5       	brge	.+82     	; 0x26a2 <LCD_enuSendCustomCharacter+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2650:	6b 85       	ldd	r22, Y+11	; 0x0b
    2652:	7c 85       	ldd	r23, Y+12	; 0x0c
    2654:	8d 85       	ldd	r24, Y+13	; 0x0d
    2656:	9e 85       	ldd	r25, Y+14	; 0x0e
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	40 e2       	ldi	r20, 0x20	; 32
    265e:	51 e4       	ldi	r21, 0x41	; 65
    2660:	0e 94 12 03 	call	0x624	; 0x624 <__mulsf3>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	bc 01       	movw	r22, r24
    266a:	cd 01       	movw	r24, r26
    266c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	9e 83       	std	Y+6, r25	; 0x06
    2676:	8d 83       	std	Y+5, r24	; 0x05
    2678:	0f c0       	rjmp	.+30     	; 0x2698 <LCD_enuSendCustomCharacter+0x124>
    267a:	80 e9       	ldi	r24, 0x90	; 144
    267c:	91 e0       	ldi	r25, 0x01	; 1
    267e:	9c 83       	std	Y+4, r25	; 0x04
    2680:	8b 83       	std	Y+3, r24	; 0x03
    2682:	8b 81       	ldd	r24, Y+3	; 0x03
    2684:	9c 81       	ldd	r25, Y+4	; 0x04
    2686:	01 97       	sbiw	r24, 0x01	; 1
    2688:	f1 f7       	brne	.-4      	; 0x2686 <LCD_enuSendCustomCharacter+0x112>
    268a:	9c 83       	std	Y+4, r25	; 0x04
    268c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    268e:	8d 81       	ldd	r24, Y+5	; 0x05
    2690:	9e 81       	ldd	r25, Y+6	; 0x06
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	9e 83       	std	Y+6, r25	; 0x06
    2696:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2698:	8d 81       	ldd	r24, Y+5	; 0x05
    269a:	9e 81       	ldd	r25, Y+6	; 0x06
    269c:	00 97       	sbiw	r24, 0x00	; 0
    269e:	69 f7       	brne	.-38     	; 0x267a <LCD_enuSendCustomCharacter+0x106>
    26a0:	14 c0       	rjmp	.+40     	; 0x26ca <LCD_enuSendCustomCharacter+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a2:	6f 81       	ldd	r22, Y+7	; 0x07
    26a4:	78 85       	ldd	r23, Y+8	; 0x08
    26a6:	89 85       	ldd	r24, Y+9	; 0x09
    26a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	9e 83       	std	Y+6, r25	; 0x06
    26b4:	8d 83       	std	Y+5, r24	; 0x05
    26b6:	8d 81       	ldd	r24, Y+5	; 0x05
    26b8:	9e 81       	ldd	r25, Y+6	; 0x06
    26ba:	9a 83       	std	Y+2, r25	; 0x02
    26bc:	89 83       	std	Y+1, r24	; 0x01
    26be:	89 81       	ldd	r24, Y+1	; 0x01
    26c0:	9a 81       	ldd	r25, Y+2	; 0x02
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	f1 f7       	brne	.-4      	; 0x26c2 <LCD_enuSendCustomCharacter+0x14e>
    26c6:	9a 83       	std	Y+2, r25	; 0x02
    26c8:	89 83       	std	Y+1, r24	; 0x01
		Local_enuErrorStatus = LCD_NOK;
	}
	else
	{
		LCD_enuSendInstruction(LCD_u8_FIRST_CGRAM_ADDRESS + (Copy_BlockNumberu8 * 8));
		for (Local_u8Iterator = 0; Local_u8Iterator < 8; Local_u8Iterator++)
    26ca:	88 89       	ldd	r24, Y+16	; 0x10
    26cc:	8f 5f       	subi	r24, 0xFF	; 255
    26ce:	88 8b       	std	Y+16, r24	; 0x10
    26d0:	88 89       	ldd	r24, Y+16	; 0x10
    26d2:	88 30       	cpi	r24, 0x08	; 8
    26d4:	08 f4       	brcc	.+2      	; 0x26d8 <LCD_enuSendCustomCharacter+0x164>
    26d6:	7c cf       	rjmp	.-264    	; 0x25d0 <LCD_enuSendCustomCharacter+0x5c>
		{
			LCD_enuSendCharacter(Add_pu8Pattern[Local_u8Iterator]);
			_delay_ms(1);
		}
		LCD_enuChangePosition(Copy_u8Row, Copy_u8Column);
    26d8:	8c 89       	ldd	r24, Y+20	; 0x14
    26da:	6d 89       	ldd	r22, Y+21	; 0x15
    26dc:	0e 94 10 12 	call	0x2420	; 0x2420 <LCD_enuChangePosition>
		LCD_enuSendCharacter(Copy_BlockNumberu8);
    26e0:	8b 89       	ldd	r24, Y+19	; 0x13
    26e2:	0e 94 16 10 	call	0x202c	; 0x202c <LCD_enuSendCharacter>
	}

	return Local_enuErrorStatus;
    26e6:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    26e8:	65 96       	adiw	r28, 0x15	; 21
    26ea:	0f b6       	in	r0, 0x3f	; 63
    26ec:	f8 94       	cli
    26ee:	de bf       	out	0x3e, r29	; 62
    26f0:	0f be       	out	0x3f, r0	; 63
    26f2:	cd bf       	out	0x3d, r28	; 61
    26f4:	cf 91       	pop	r28
    26f6:	df 91       	pop	r29
    26f8:	08 95       	ret

000026fa <LCD_enuSendNumber>:
 * Arguments: 	First Argument : Copy_u16Number,     options (any integer number from 0 to 65535)
 * Return :	  	LCD_tenu_ErrorStatus
 * */

LCD_tenu_ErrorStatus LCD_enuSendNumber(u32 Copy_u32Number)
{
    26fa:	df 93       	push	r29
    26fc:	cf 93       	push	r28
    26fe:	cd b7       	in	r28, 0x3d	; 61
    2700:	de b7       	in	r29, 0x3e	; 62
    2702:	63 97       	sbiw	r28, 0x13	; 19
    2704:	0f b6       	in	r0, 0x3f	; 63
    2706:	f8 94       	cli
    2708:	de bf       	out	0x3e, r29	; 62
    270a:	0f be       	out	0x3f, r0	; 63
    270c:	cd bf       	out	0x3d, r28	; 61
    270e:	6d 87       	std	Y+13, r22	; 0x0d
    2710:	7e 87       	std	Y+14, r23	; 0x0e
    2712:	8f 87       	std	Y+15, r24	; 0x0f
    2714:	98 8b       	std	Y+16, r25	; 0x10
	u8 Local_u8Arr[10];
	s8 Local_s8Iterator = 0;
    2716:	1a 82       	std	Y+2, r1	; 0x02
	LCD_tenu_ErrorStatus Local_enuErrorStatus = LCD_OK;
    2718:	19 82       	std	Y+1, r1	; 0x01
	{

	}
	else
	{
		if (Copy_u32Number == 0)
    271a:	8d 85       	ldd	r24, Y+13	; 0x0d
    271c:	9e 85       	ldd	r25, Y+14	; 0x0e
    271e:	af 85       	ldd	r26, Y+15	; 0x0f
    2720:	b8 89       	ldd	r27, Y+16	; 0x10
    2722:	00 97       	sbiw	r24, 0x00	; 0
    2724:	a1 05       	cpc	r26, r1
    2726:	b1 05       	cpc	r27, r1
    2728:	09 f0       	breq	.+2      	; 0x272c <LCD_enuSendNumber+0x32>
    272a:	4e c0       	rjmp	.+156    	; 0x27c8 <LCD_enuSendNumber+0xce>
		{
			LCD_enuSendCharacter('0');
    272c:	80 e3       	ldi	r24, 0x30	; 48
    272e:	0e 94 16 10 	call	0x202c	; 0x202c <LCD_enuSendCharacter>
    2732:	6a c0       	rjmp	.+212    	; 0x2808 <LCD_enuSendNumber+0x10e>
		}
		else
		{
			while (Copy_u32Number > 0)
			{
				Local_u8Arr[Local_s8Iterator++] =
    2734:	8a 81       	ldd	r24, Y+2	; 0x02
    2736:	28 2f       	mov	r18, r24
    2738:	33 27       	eor	r19, r19
    273a:	27 fd       	sbrc	r18, 7
    273c:	30 95       	com	r19
    273e:	3b 8b       	std	Y+19, r19	; 0x13
    2740:	2a 8b       	std	Y+18, r18	; 0x12
    2742:	8d 85       	ldd	r24, Y+13	; 0x0d
    2744:	9e 85       	ldd	r25, Y+14	; 0x0e
    2746:	af 85       	ldd	r26, Y+15	; 0x0f
    2748:	b8 89       	ldd	r27, Y+16	; 0x10
    274a:	2a e0       	ldi	r18, 0x0A	; 10
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	40 e0       	ldi	r20, 0x00	; 0
    2750:	50 e0       	ldi	r21, 0x00	; 0
    2752:	bc 01       	movw	r22, r24
    2754:	cd 01       	movw	r24, r26
    2756:	0e 94 33 1a 	call	0x3466	; 0x3466 <__udivmodsi4>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	00 97       	sbiw	r24, 0x00	; 0
    2760:	a1 05       	cpc	r26, r1
    2762:	b1 05       	cpc	r27, r1
    2764:	91 f0       	breq	.+36     	; 0x278a <LCD_enuSendNumber+0x90>
    2766:	8d 85       	ldd	r24, Y+13	; 0x0d
    2768:	9e 85       	ldd	r25, Y+14	; 0x0e
    276a:	af 85       	ldd	r26, Y+15	; 0x0f
    276c:	b8 89       	ldd	r27, Y+16	; 0x10
    276e:	2a e0       	ldi	r18, 0x0A	; 10
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	40 e0       	ldi	r20, 0x00	; 0
    2774:	50 e0       	ldi	r21, 0x00	; 0
    2776:	bc 01       	movw	r22, r24
    2778:	cd 01       	movw	r24, r26
    277a:	0e 94 33 1a 	call	0x3466	; 0x3466 <__udivmodsi4>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	38 2f       	mov	r19, r24
    2784:	30 5d       	subi	r19, 0xD0	; 208
    2786:	39 8b       	std	Y+17, r19	; 0x11
    2788:	02 c0       	rjmp	.+4      	; 0x278e <LCD_enuSendNumber+0x94>
    278a:	80 e3       	ldi	r24, 0x30	; 48
    278c:	89 8b       	std	Y+17, r24	; 0x11
    278e:	ce 01       	movw	r24, r28
    2790:	03 96       	adiw	r24, 0x03	; 3
    2792:	ea 89       	ldd	r30, Y+18	; 0x12
    2794:	fb 89       	ldd	r31, Y+19	; 0x13
    2796:	e8 0f       	add	r30, r24
    2798:	f9 1f       	adc	r31, r25
    279a:	99 89       	ldd	r25, Y+17	; 0x11
    279c:	90 83       	st	Z, r25
    279e:	8a 81       	ldd	r24, Y+2	; 0x02
    27a0:	8f 5f       	subi	r24, 0xFF	; 255
    27a2:	8a 83       	std	Y+2, r24	; 0x02
						((Copy_u32Number % 10) == 0) ? (48) : ((Copy_u32Number % 10) + 48);
				Copy_u32Number /= 10;
    27a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27a8:	af 85       	ldd	r26, Y+15	; 0x0f
    27aa:	b8 89       	ldd	r27, Y+16	; 0x10
    27ac:	2a e0       	ldi	r18, 0x0A	; 10
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	40 e0       	ldi	r20, 0x00	; 0
    27b2:	50 e0       	ldi	r21, 0x00	; 0
    27b4:	bc 01       	movw	r22, r24
    27b6:	cd 01       	movw	r24, r26
    27b8:	0e 94 33 1a 	call	0x3466	; 0x3466 <__udivmodsi4>
    27bc:	da 01       	movw	r26, r20
    27be:	c9 01       	movw	r24, r18
    27c0:	8d 87       	std	Y+13, r24	; 0x0d
    27c2:	9e 87       	std	Y+14, r25	; 0x0e
    27c4:	af 87       	std	Y+15, r26	; 0x0f
    27c6:	b8 8b       	std	Y+16, r27	; 0x10
		{
			LCD_enuSendCharacter('0');
		}
		else
		{
			while (Copy_u32Number > 0)
    27c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    27ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    27cc:	af 85       	ldd	r26, Y+15	; 0x0f
    27ce:	b8 89       	ldd	r27, Y+16	; 0x10
    27d0:	00 97       	sbiw	r24, 0x00	; 0
    27d2:	a1 05       	cpc	r26, r1
    27d4:	b1 05       	cpc	r27, r1
    27d6:	09 f0       	breq	.+2      	; 0x27da <LCD_enuSendNumber+0xe0>
    27d8:	ad cf       	rjmp	.-166    	; 0x2734 <LCD_enuSendNumber+0x3a>
				Local_u8Arr[Local_s8Iterator++] =
						((Copy_u32Number % 10) == 0) ? (48) : ((Copy_u32Number % 10) + 48);
				Copy_u32Number /= 10;
			}

			Local_s8Iterator--;
    27da:	8a 81       	ldd	r24, Y+2	; 0x02
    27dc:	81 50       	subi	r24, 0x01	; 1
    27de:	8a 83       	std	Y+2, r24	; 0x02
    27e0:	10 c0       	rjmp	.+32     	; 0x2802 <LCD_enuSendNumber+0x108>

			while (Local_s8Iterator >= 0)
			{
				LCD_enuSendCharacter(Local_u8Arr[Local_s8Iterator]);
    27e2:	8a 81       	ldd	r24, Y+2	; 0x02
    27e4:	28 2f       	mov	r18, r24
    27e6:	33 27       	eor	r19, r19
    27e8:	27 fd       	sbrc	r18, 7
    27ea:	30 95       	com	r19
    27ec:	ce 01       	movw	r24, r28
    27ee:	03 96       	adiw	r24, 0x03	; 3
    27f0:	fc 01       	movw	r30, r24
    27f2:	e2 0f       	add	r30, r18
    27f4:	f3 1f       	adc	r31, r19
    27f6:	80 81       	ld	r24, Z
    27f8:	0e 94 16 10 	call	0x202c	; 0x202c <LCD_enuSendCharacter>
				Local_s8Iterator--;
    27fc:	8a 81       	ldd	r24, Y+2	; 0x02
    27fe:	81 50       	subi	r24, 0x01	; 1
    2800:	8a 83       	std	Y+2, r24	; 0x02
				Copy_u32Number /= 10;
			}

			Local_s8Iterator--;

			while (Local_s8Iterator >= 0)
    2802:	8a 81       	ldd	r24, Y+2	; 0x02
    2804:	88 23       	and	r24, r24
    2806:	6c f7       	brge	.-38     	; 0x27e2 <LCD_enuSendNumber+0xe8>
				Local_s8Iterator--;
			}
		}

	}
	return Local_enuErrorStatus;
    2808:	89 81       	ldd	r24, Y+1	; 0x01
}
    280a:	63 96       	adiw	r28, 0x13	; 19
    280c:	0f b6       	in	r0, 0x3f	; 63
    280e:	f8 94       	cli
    2810:	de bf       	out	0x3e, r29	; 62
    2812:	0f be       	out	0x3f, r0	; 63
    2814:	cd bf       	out	0x3d, r28	; 61
    2816:	cf 91       	pop	r28
    2818:	df 91       	pop	r29
    281a:	08 95       	ret

0000281c <LCD_Clear_Display>:
 * Description: Clear any data on LCD display
 * Arguments: 	vid
 * Return :	  	vid
 * */
void LCD_Clear_Display(void)
{
    281c:	df 93       	push	r29
    281e:	cf 93       	push	r28
    2820:	cd b7       	in	r28, 0x3d	; 61
    2822:	de b7       	in	r29, 0x3e	; 62
    2824:	6c 97       	sbiw	r28, 0x1c	; 28
    2826:	0f b6       	in	r0, 0x3f	; 63
    2828:	f8 94       	cli
    282a:	de bf       	out	0x3e, r29	; 62
    282c:	0f be       	out	0x3f, r0	; 63
    282e:	cd bf       	out	0x3d, r28	; 61
    2830:	80 e0       	ldi	r24, 0x00	; 0
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	a0 e2       	ldi	r26, 0x20	; 32
    2836:	b2 e4       	ldi	r27, 0x42	; 66
    2838:	89 8f       	std	Y+25, r24	; 0x19
    283a:	9a 8f       	std	Y+26, r25	; 0x1a
    283c:	ab 8f       	std	Y+27, r26	; 0x1b
    283e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2840:	69 8d       	ldd	r22, Y+25	; 0x19
    2842:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2844:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2846:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	4a e7       	ldi	r20, 0x7A	; 122
    284e:	55 e4       	ldi	r21, 0x45	; 69
    2850:	0e 94 12 03 	call	0x624	; 0x624 <__mulsf3>
    2854:	dc 01       	movw	r26, r24
    2856:	cb 01       	movw	r24, r22
    2858:	8d 8b       	std	Y+21, r24	; 0x15
    285a:	9e 8b       	std	Y+22, r25	; 0x16
    285c:	af 8b       	std	Y+23, r26	; 0x17
    285e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2860:	6d 89       	ldd	r22, Y+21	; 0x15
    2862:	7e 89       	ldd	r23, Y+22	; 0x16
    2864:	8f 89       	ldd	r24, Y+23	; 0x17
    2866:	98 8d       	ldd	r25, Y+24	; 0x18
    2868:	20 e0       	ldi	r18, 0x00	; 0
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	40 e8       	ldi	r20, 0x80	; 128
    286e:	5f e3       	ldi	r21, 0x3F	; 63
    2870:	0e 94 48 05 	call	0xa90	; 0xa90 <__ltsf2>
    2874:	88 23       	and	r24, r24
    2876:	2c f4       	brge	.+10     	; 0x2882 <LCD_Clear_Display+0x66>
		__ticks = 1;
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	9c 8b       	std	Y+20, r25	; 0x14
    287e:	8b 8b       	std	Y+19, r24	; 0x13
    2880:	3f c0       	rjmp	.+126    	; 0x2900 <LCD_Clear_Display+0xe4>
	else if (__tmp > 65535)
    2882:	6d 89       	ldd	r22, Y+21	; 0x15
    2884:	7e 89       	ldd	r23, Y+22	; 0x16
    2886:	8f 89       	ldd	r24, Y+23	; 0x17
    2888:	98 8d       	ldd	r25, Y+24	; 0x18
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	3f ef       	ldi	r19, 0xFF	; 255
    288e:	4f e7       	ldi	r20, 0x7F	; 127
    2890:	57 e4       	ldi	r21, 0x47	; 71
    2892:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__gtsf2>
    2896:	18 16       	cp	r1, r24
    2898:	4c f5       	brge	.+82     	; 0x28ec <LCD_Clear_Display+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    289a:	69 8d       	ldd	r22, Y+25	; 0x19
    289c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    289e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	40 e2       	ldi	r20, 0x20	; 32
    28a8:	51 e4       	ldi	r21, 0x41	; 65
    28aa:	0e 94 12 03 	call	0x624	; 0x624 <__mulsf3>
    28ae:	dc 01       	movw	r26, r24
    28b0:	cb 01       	movw	r24, r22
    28b2:	bc 01       	movw	r22, r24
    28b4:	cd 01       	movw	r24, r26
    28b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	9c 8b       	std	Y+20, r25	; 0x14
    28c0:	8b 8b       	std	Y+19, r24	; 0x13
    28c2:	0f c0       	rjmp	.+30     	; 0x28e2 <LCD_Clear_Display+0xc6>
    28c4:	80 e9       	ldi	r24, 0x90	; 144
    28c6:	91 e0       	ldi	r25, 0x01	; 1
    28c8:	9a 8b       	std	Y+18, r25	; 0x12
    28ca:	89 8b       	std	Y+17, r24	; 0x11
    28cc:	89 89       	ldd	r24, Y+17	; 0x11
    28ce:	9a 89       	ldd	r25, Y+18	; 0x12
    28d0:	01 97       	sbiw	r24, 0x01	; 1
    28d2:	f1 f7       	brne	.-4      	; 0x28d0 <LCD_Clear_Display+0xb4>
    28d4:	9a 8b       	std	Y+18, r25	; 0x12
    28d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d8:	8b 89       	ldd	r24, Y+19	; 0x13
    28da:	9c 89       	ldd	r25, Y+20	; 0x14
    28dc:	01 97       	sbiw	r24, 0x01	; 1
    28de:	9c 8b       	std	Y+20, r25	; 0x14
    28e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e2:	8b 89       	ldd	r24, Y+19	; 0x13
    28e4:	9c 89       	ldd	r25, Y+20	; 0x14
    28e6:	00 97       	sbiw	r24, 0x00	; 0
    28e8:	69 f7       	brne	.-38     	; 0x28c4 <LCD_Clear_Display+0xa8>
    28ea:	14 c0       	rjmp	.+40     	; 0x2914 <LCD_Clear_Display+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ec:	6d 89       	ldd	r22, Y+21	; 0x15
    28ee:	7e 89       	ldd	r23, Y+22	; 0x16
    28f0:	8f 89       	ldd	r24, Y+23	; 0x17
    28f2:	98 8d       	ldd	r25, Y+24	; 0x18
    28f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28f8:	dc 01       	movw	r26, r24
    28fa:	cb 01       	movw	r24, r22
    28fc:	9c 8b       	std	Y+20, r25	; 0x14
    28fe:	8b 8b       	std	Y+19, r24	; 0x13
    2900:	8b 89       	ldd	r24, Y+19	; 0x13
    2902:	9c 89       	ldd	r25, Y+20	; 0x14
    2904:	98 8b       	std	Y+16, r25	; 0x10
    2906:	8f 87       	std	Y+15, r24	; 0x0f
    2908:	8f 85       	ldd	r24, Y+15	; 0x0f
    290a:	98 89       	ldd	r25, Y+16	; 0x10
    290c:	01 97       	sbiw	r24, 0x01	; 1
    290e:	f1 f7       	brne	.-4      	; 0x290c <LCD_Clear_Display+0xf0>
    2910:	98 8b       	std	Y+16, r25	; 0x10
    2912:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(40);
	LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
    2914:	81 e0       	ldi	r24, 0x01	; 1
    2916:	0e 94 03 11 	call	0x2206	; 0x2206 <LCD_enuSendInstruction>
    291a:	80 e0       	ldi	r24, 0x00	; 0
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	a0 e2       	ldi	r26, 0x20	; 32
    2920:	b2 e4       	ldi	r27, 0x42	; 66
    2922:	8b 87       	std	Y+11, r24	; 0x0b
    2924:	9c 87       	std	Y+12, r25	; 0x0c
    2926:	ad 87       	std	Y+13, r26	; 0x0d
    2928:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    292a:	6b 85       	ldd	r22, Y+11	; 0x0b
    292c:	7c 85       	ldd	r23, Y+12	; 0x0c
    292e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2930:	9e 85       	ldd	r25, Y+14	; 0x0e
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	4a e7       	ldi	r20, 0x7A	; 122
    2938:	55 e4       	ldi	r21, 0x45	; 69
    293a:	0e 94 12 03 	call	0x624	; 0x624 <__mulsf3>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	8f 83       	std	Y+7, r24	; 0x07
    2944:	98 87       	std	Y+8, r25	; 0x08
    2946:	a9 87       	std	Y+9, r26	; 0x09
    2948:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    294a:	6f 81       	ldd	r22, Y+7	; 0x07
    294c:	78 85       	ldd	r23, Y+8	; 0x08
    294e:	89 85       	ldd	r24, Y+9	; 0x09
    2950:	9a 85       	ldd	r25, Y+10	; 0x0a
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	40 e8       	ldi	r20, 0x80	; 128
    2958:	5f e3       	ldi	r21, 0x3F	; 63
    295a:	0e 94 48 05 	call	0xa90	; 0xa90 <__ltsf2>
    295e:	88 23       	and	r24, r24
    2960:	2c f4       	brge	.+10     	; 0x296c <LCD_Clear_Display+0x150>
		__ticks = 1;
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	9e 83       	std	Y+6, r25	; 0x06
    2968:	8d 83       	std	Y+5, r24	; 0x05
    296a:	3f c0       	rjmp	.+126    	; 0x29ea <LCD_Clear_Display+0x1ce>
	else if (__tmp > 65535)
    296c:	6f 81       	ldd	r22, Y+7	; 0x07
    296e:	78 85       	ldd	r23, Y+8	; 0x08
    2970:	89 85       	ldd	r24, Y+9	; 0x09
    2972:	9a 85       	ldd	r25, Y+10	; 0x0a
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	3f ef       	ldi	r19, 0xFF	; 255
    2978:	4f e7       	ldi	r20, 0x7F	; 127
    297a:	57 e4       	ldi	r21, 0x47	; 71
    297c:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__gtsf2>
    2980:	18 16       	cp	r1, r24
    2982:	4c f5       	brge	.+82     	; 0x29d6 <LCD_Clear_Display+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2984:	6b 85       	ldd	r22, Y+11	; 0x0b
    2986:	7c 85       	ldd	r23, Y+12	; 0x0c
    2988:	8d 85       	ldd	r24, Y+13	; 0x0d
    298a:	9e 85       	ldd	r25, Y+14	; 0x0e
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	40 e2       	ldi	r20, 0x20	; 32
    2992:	51 e4       	ldi	r21, 0x41	; 65
    2994:	0e 94 12 03 	call	0x624	; 0x624 <__mulsf3>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	bc 01       	movw	r22, r24
    299e:	cd 01       	movw	r24, r26
    29a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29a4:	dc 01       	movw	r26, r24
    29a6:	cb 01       	movw	r24, r22
    29a8:	9e 83       	std	Y+6, r25	; 0x06
    29aa:	8d 83       	std	Y+5, r24	; 0x05
    29ac:	0f c0       	rjmp	.+30     	; 0x29cc <LCD_Clear_Display+0x1b0>
    29ae:	80 e9       	ldi	r24, 0x90	; 144
    29b0:	91 e0       	ldi	r25, 0x01	; 1
    29b2:	9c 83       	std	Y+4, r25	; 0x04
    29b4:	8b 83       	std	Y+3, r24	; 0x03
    29b6:	8b 81       	ldd	r24, Y+3	; 0x03
    29b8:	9c 81       	ldd	r25, Y+4	; 0x04
    29ba:	01 97       	sbiw	r24, 0x01	; 1
    29bc:	f1 f7       	brne	.-4      	; 0x29ba <LCD_Clear_Display+0x19e>
    29be:	9c 83       	std	Y+4, r25	; 0x04
    29c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c2:	8d 81       	ldd	r24, Y+5	; 0x05
    29c4:	9e 81       	ldd	r25, Y+6	; 0x06
    29c6:	01 97       	sbiw	r24, 0x01	; 1
    29c8:	9e 83       	std	Y+6, r25	; 0x06
    29ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29cc:	8d 81       	ldd	r24, Y+5	; 0x05
    29ce:	9e 81       	ldd	r25, Y+6	; 0x06
    29d0:	00 97       	sbiw	r24, 0x00	; 0
    29d2:	69 f7       	brne	.-38     	; 0x29ae <LCD_Clear_Display+0x192>
    29d4:	14 c0       	rjmp	.+40     	; 0x29fe <LCD_Clear_Display+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d6:	6f 81       	ldd	r22, Y+7	; 0x07
    29d8:	78 85       	ldd	r23, Y+8	; 0x08
    29da:	89 85       	ldd	r24, Y+9	; 0x09
    29dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29e2:	dc 01       	movw	r26, r24
    29e4:	cb 01       	movw	r24, r22
    29e6:	9e 83       	std	Y+6, r25	; 0x06
    29e8:	8d 83       	std	Y+5, r24	; 0x05
    29ea:	8d 81       	ldd	r24, Y+5	; 0x05
    29ec:	9e 81       	ldd	r25, Y+6	; 0x06
    29ee:	9a 83       	std	Y+2, r25	; 0x02
    29f0:	89 83       	std	Y+1, r24	; 0x01
    29f2:	89 81       	ldd	r24, Y+1	; 0x01
    29f4:	9a 81       	ldd	r25, Y+2	; 0x02
    29f6:	01 97       	sbiw	r24, 0x01	; 1
    29f8:	f1 f7       	brne	.-4      	; 0x29f6 <LCD_Clear_Display+0x1da>
    29fa:	9a 83       	std	Y+2, r25	; 0x02
    29fc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);
}
    29fe:	6c 96       	adiw	r28, 0x1c	; 28
    2a00:	0f b6       	in	r0, 0x3f	; 63
    2a02:	f8 94       	cli
    2a04:	de bf       	out	0x3e, r29	; 62
    2a06:	0f be       	out	0x3f, r0	; 63
    2a08:	cd bf       	out	0x3d, r28	; 61
    2a0a:	cf 91       	pop	r28
    2a0c:	df 91       	pop	r29
    2a0e:	08 95       	ret

00002a10 <KEYPAD_vidInit>:
 * Description: Initialize MCU Pins for Keypad
 * Arguments: 	void
 * Return :	  	void
 * */
void KEYPAD_vidInit(void)
{
    2a10:	df 93       	push	r29
    2a12:	cf 93       	push	r28
    2a14:	cd b7       	in	r28, 0x3d	; 61
    2a16:	de b7       	in	r29, 0x3e	; 62
	DIO_vidInit();
    2a18:	0e 94 1d 09 	call	0x123a	; 0x123a <DIO_vidInit>
}
    2a1c:	cf 91       	pop	r28
    2a1e:	df 91       	pop	r29
    2a20:	08 95       	ret

00002a22 <KEYPAD_vidGetPressedKey>:
 * Description: Get value of pressed Key on keypad
 * Arguments: 	Address of variable to assign input in 
 * Return :	  	void
 * */
void KEYPAD_vidGetPressedKey(u8 *Add_pu8KeyValue)
{
    2a22:	df 93       	push	r29
    2a24:	cf 93       	push	r28
    2a26:	00 d0       	rcall	.+0      	; 0x2a28 <KEYPAD_vidGetPressedKey+0x6>
    2a28:	00 d0       	rcall	.+0      	; 0x2a2a <KEYPAD_vidGetPressedKey+0x8>
    2a2a:	0f 92       	push	r0
    2a2c:	cd b7       	in	r28, 0x3d	; 61
    2a2e:	de b7       	in	r29, 0x3e	; 62
    2a30:	9d 83       	std	Y+5, r25	; 0x05
    2a32:	8c 83       	std	Y+4, r24	; 0x04

	/*check arguments*/

	u8 Local_u8ColsIterator = 0;
    2a34:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8RowsIterator = 0;
    2a36:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_u8PinValue = 0;
    2a38:	1b 82       	std	Y+3, r1	; 0x03
	for (Local_u8ColsIterator = 0; Local_u8ColsIterator < KEYPAD_COLS_NUM; Local_u8ColsIterator++)
    2a3a:	1a 82       	std	Y+2, r1	; 0x02
    2a3c:	5e c0       	rjmp	.+188    	; 0x2afa <KEYPAD_vidGetPressedKey+0xd8>
	{

		DIO_enuSetPinValue(KEYPAD_COL_PORT, KEYPAD_u8ArrColsPins[Local_u8ColsIterator], DIO_u8_LOW);
    2a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a40:	88 2f       	mov	r24, r24
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	fc 01       	movw	r30, r24
    2a46:	e8 58       	subi	r30, 0x88	; 136
    2a48:	fe 4f       	sbci	r31, 0xFE	; 254
    2a4a:	90 81       	ld	r25, Z
    2a4c:	80 e0       	ldi	r24, 0x00	; 0
    2a4e:	69 2f       	mov	r22, r25
    2a50:	40 e0       	ldi	r20, 0x00	; 0
    2a52:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_enuSetPinValue>
		for (Local_u8RowsIterator = 0; Local_u8RowsIterator < KEYPAD_ROWS_NUM;
    2a56:	19 82       	std	Y+1, r1	; 0x01
    2a58:	3d c0       	rjmp	.+122    	; 0x2ad4 <KEYPAD_vidGetPressedKey+0xb2>
				Local_u8RowsIterator++)
		{

			DIO_enuGetPinValue(KEYPAD_ROW_PORT, KEYPAD_u8ArrRowsPins[Local_u8RowsIterator],
    2a5a:	89 81       	ldd	r24, Y+1	; 0x01
    2a5c:	88 2f       	mov	r24, r24
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	fc 01       	movw	r30, r24
    2a62:	e4 58       	subi	r30, 0x84	; 132
    2a64:	fe 4f       	sbci	r31, 0xFE	; 254
    2a66:	90 81       	ld	r25, Z
    2a68:	9e 01       	movw	r18, r28
    2a6a:	2d 5f       	subi	r18, 0xFD	; 253
    2a6c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a6e:	80 e0       	ldi	r24, 0x00	; 0
    2a70:	69 2f       	mov	r22, r25
    2a72:	a9 01       	movw	r20, r18
    2a74:	0e 94 3e 0a 	call	0x147c	; 0x147c <DIO_enuGetPinValue>
					&Local_u8PinValue);

			if (Local_u8PinValue == 0)
    2a78:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7a:	88 23       	and	r24, r24
    2a7c:	41 f5       	brne	.+80     	; 0x2ace <KEYPAD_vidGetPressedKey+0xac>
			{

				*Add_pu8KeyValue = KEYPAD_u8KeysValue[Local_u8RowsIterator][Local_u8ColsIterator];
    2a7e:	89 81       	ldd	r24, Y+1	; 0x01
    2a80:	48 2f       	mov	r20, r24
    2a82:	50 e0       	ldi	r21, 0x00	; 0
    2a84:	8a 81       	ldd	r24, Y+2	; 0x02
    2a86:	28 2f       	mov	r18, r24
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	ca 01       	movw	r24, r20
    2a8c:	88 0f       	add	r24, r24
    2a8e:	99 1f       	adc	r25, r25
    2a90:	88 0f       	add	r24, r24
    2a92:	99 1f       	adc	r25, r25
    2a94:	82 0f       	add	r24, r18
    2a96:	93 1f       	adc	r25, r19
    2a98:	fc 01       	movw	r30, r24
    2a9a:	e8 59       	subi	r30, 0x98	; 152
    2a9c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a9e:	80 81       	ld	r24, Z
    2aa0:	ec 81       	ldd	r30, Y+4	; 0x04
    2aa2:	fd 81       	ldd	r31, Y+5	; 0x05
    2aa4:	80 83       	st	Z, r24
    2aa6:	0f c0       	rjmp	.+30     	; 0x2ac6 <KEYPAD_vidGetPressedKey+0xa4>
				while (Local_u8PinValue == DIO_u8_LOW)
				{
					DIO_enuGetPinValue(KEYPAD_ROW_PORT, KEYPAD_u8ArrRowsPins[Local_u8RowsIterator],
    2aa8:	89 81       	ldd	r24, Y+1	; 0x01
    2aaa:	88 2f       	mov	r24, r24
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	fc 01       	movw	r30, r24
    2ab0:	e4 58       	subi	r30, 0x84	; 132
    2ab2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ab4:	90 81       	ld	r25, Z
    2ab6:	9e 01       	movw	r18, r28
    2ab8:	2d 5f       	subi	r18, 0xFD	; 253
    2aba:	3f 4f       	sbci	r19, 0xFF	; 255
    2abc:	80 e0       	ldi	r24, 0x00	; 0
    2abe:	69 2f       	mov	r22, r25
    2ac0:	a9 01       	movw	r20, r18
    2ac2:	0e 94 3e 0a 	call	0x147c	; 0x147c <DIO_enuGetPinValue>

			if (Local_u8PinValue == 0)
			{

				*Add_pu8KeyValue = KEYPAD_u8KeysValue[Local_u8RowsIterator][Local_u8ColsIterator];
				while (Local_u8PinValue == DIO_u8_LOW)
    2ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac8:	88 23       	and	r24, r24
    2aca:	71 f3       	breq	.-36     	; 0x2aa8 <KEYPAD_vidGetPressedKey+0x86>
    2acc:	1d c0       	rjmp	.+58     	; 0x2b08 <KEYPAD_vidGetPressedKey+0xe6>
	for (Local_u8ColsIterator = 0; Local_u8ColsIterator < KEYPAD_COLS_NUM; Local_u8ColsIterator++)
	{

		DIO_enuSetPinValue(KEYPAD_COL_PORT, KEYPAD_u8ArrColsPins[Local_u8ColsIterator], DIO_u8_LOW);
		for (Local_u8RowsIterator = 0; Local_u8RowsIterator < KEYPAD_ROWS_NUM;
				Local_u8RowsIterator++)
    2ace:	89 81       	ldd	r24, Y+1	; 0x01
    2ad0:	8f 5f       	subi	r24, 0xFF	; 255
    2ad2:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_u8PinValue = 0;
	for (Local_u8ColsIterator = 0; Local_u8ColsIterator < KEYPAD_COLS_NUM; Local_u8ColsIterator++)
	{

		DIO_enuSetPinValue(KEYPAD_COL_PORT, KEYPAD_u8ArrColsPins[Local_u8ColsIterator], DIO_u8_LOW);
		for (Local_u8RowsIterator = 0; Local_u8RowsIterator < KEYPAD_ROWS_NUM;
    2ad4:	89 81       	ldd	r24, Y+1	; 0x01
    2ad6:	84 30       	cpi	r24, 0x04	; 4
    2ad8:	08 f4       	brcc	.+2      	; 0x2adc <KEYPAD_vidGetPressedKey+0xba>
    2ada:	bf cf       	rjmp	.-130    	; 0x2a5a <KEYPAD_vidGetPressedKey+0x38>
				return;
			}

		}

		DIO_enuSetPinValue(KEYPAD_COL_PORT, KEYPAD_u8ArrColsPins[Local_u8ColsIterator],
    2adc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ade:	88 2f       	mov	r24, r24
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	fc 01       	movw	r30, r24
    2ae4:	e8 58       	subi	r30, 0x88	; 136
    2ae6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ae8:	90 81       	ld	r25, Z
    2aea:	80 e0       	ldi	r24, 0x00	; 0
    2aec:	69 2f       	mov	r22, r25
    2aee:	41 e0       	ldi	r20, 0x01	; 1
    2af0:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_enuSetPinValue>
	/*check arguments*/

	u8 Local_u8ColsIterator = 0;
	u8 Local_u8RowsIterator = 0;
	u8 Local_u8PinValue = 0;
	for (Local_u8ColsIterator = 0; Local_u8ColsIterator < KEYPAD_COLS_NUM; Local_u8ColsIterator++)
    2af4:	8a 81       	ldd	r24, Y+2	; 0x02
    2af6:	8f 5f       	subi	r24, 0xFF	; 255
    2af8:	8a 83       	std	Y+2, r24	; 0x02
    2afa:	8a 81       	ldd	r24, Y+2	; 0x02
    2afc:	84 30       	cpi	r24, 0x04	; 4
    2afe:	08 f4       	brcc	.+2      	; 0x2b02 <KEYPAD_vidGetPressedKey+0xe0>
    2b00:	9e cf       	rjmp	.-196    	; 0x2a3e <KEYPAD_vidGetPressedKey+0x1c>

		DIO_enuSetPinValue(KEYPAD_COL_PORT, KEYPAD_u8ArrColsPins[Local_u8ColsIterator],
		DIO_u8_HIGH);
	}

	*Add_pu8KeyValue = KEYPAD_NOT_PRESSED;
    2b02:	ec 81       	ldd	r30, Y+4	; 0x04
    2b04:	fd 81       	ldd	r31, Y+5	; 0x05
    2b06:	10 82       	st	Z, r1
}
    2b08:	0f 90       	pop	r0
    2b0a:	0f 90       	pop	r0
    2b0c:	0f 90       	pop	r0
    2b0e:	0f 90       	pop	r0
    2b10:	0f 90       	pop	r0
    2b12:	cf 91       	pop	r28
    2b14:	df 91       	pop	r29
    2b16:	08 95       	ret

00002b18 <CALC_vidGetInput>:
 *  Created on: Sep 26, 2022
 *      Author: Mohamad Hassan
 */
#include"CALC_APP_int.h"
void CALC_vidGetInput(u8 *Arru8Ip_Cache, u8 Copy_u8Ip_CacheSize)
{
    2b18:	df 93       	push	r29
    2b1a:	cf 93       	push	r28
    2b1c:	00 d0       	rcall	.+0      	; 0x2b1e <CALC_vidGetInput+0x6>
    2b1e:	00 d0       	rcall	.+0      	; 0x2b20 <CALC_vidGetInput+0x8>
    2b20:	0f 92       	push	r0
    2b22:	cd b7       	in	r28, 0x3d	; 61
    2b24:	de b7       	in	r29, 0x3e	; 62
    2b26:	9c 83       	std	Y+4, r25	; 0x04
    2b28:	8b 83       	std	Y+3, r24	; 0x03
    2b2a:	6d 83       	std	Y+5, r22	; 0x05
	s8 Local_s8Iterator;
	/*this part is input cache -> stores input from user*/
	u8 Local_u8PressedKeyValue = 0;
    2b2c:	1a 82       	std	Y+2, r1	; 0x02
	Local_s8Iterator = 0;
    2b2e:	19 82       	std	Y+1, r1	; 0x01
    2b30:	4d c0       	rjmp	.+154    	; 0x2bcc <CALC_vidGetInput+0xb4>
	/*do while loop gets the input from keypad and wait*/
	{

		do
		{
			KEYPAD_vidGetPressedKey(&Local_u8PressedKeyValue);
    2b32:	ce 01       	movw	r24, r28
    2b34:	02 96       	adiw	r24, 0x02	; 2
    2b36:	0e 94 11 15 	call	0x2a22	; 0x2a22 <KEYPAD_vidGetPressedKey>
		} while (Local_u8PressedKeyValue == 0);
    2b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3c:	88 23       	and	r24, r24
    2b3e:	c9 f3       	breq	.-14     	; 0x2b32 <CALC_vidGetInput+0x1a>
		if (Arru8Ip_Cache[0] == '$')
    2b40:	eb 81       	ldd	r30, Y+3	; 0x03
    2b42:	fc 81       	ldd	r31, Y+4	; 0x04
    2b44:	80 81       	ld	r24, Z
    2b46:	84 32       	cpi	r24, 0x24	; 36
    2b48:	11 f4       	brne	.+4      	; 0x2b4e <CALC_vidGetInput+0x36>
		{
			LCD_Clear_Display();
    2b4a:	0e 94 0e 14 	call	0x281c	; 0x281c <LCD_Clear_Display>
		}
		if (Local_u8PressedKeyValue != 0 && Local_u8PressedKeyValue != '#')
    2b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b50:	88 23       	and	r24, r24
    2b52:	e1 f0       	breq	.+56     	; 0x2b8c <CALC_vidGetInput+0x74>
    2b54:	8a 81       	ldd	r24, Y+2	; 0x02
    2b56:	83 32       	cpi	r24, 0x23	; 35
    2b58:	c9 f0       	breq	.+50     	; 0x2b8c <CALC_vidGetInput+0x74>
		{

			Arru8Ip_Cache[Local_s8Iterator] = Local_u8PressedKeyValue;
    2b5a:	89 81       	ldd	r24, Y+1	; 0x01
    2b5c:	28 2f       	mov	r18, r24
    2b5e:	33 27       	eor	r19, r19
    2b60:	27 fd       	sbrc	r18, 7
    2b62:	30 95       	com	r19
    2b64:	8b 81       	ldd	r24, Y+3	; 0x03
    2b66:	9c 81       	ldd	r25, Y+4	; 0x04
    2b68:	fc 01       	movw	r30, r24
    2b6a:	e2 0f       	add	r30, r18
    2b6c:	f3 1f       	adc	r31, r19
    2b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b70:	80 83       	st	Z, r24
			LCD_enuSendCharacter(Arru8Ip_Cache[Local_s8Iterator]);
    2b72:	89 81       	ldd	r24, Y+1	; 0x01
    2b74:	28 2f       	mov	r18, r24
    2b76:	33 27       	eor	r19, r19
    2b78:	27 fd       	sbrc	r18, 7
    2b7a:	30 95       	com	r19
    2b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b80:	fc 01       	movw	r30, r24
    2b82:	e2 0f       	add	r30, r18
    2b84:	f3 1f       	adc	r31, r19
    2b86:	80 81       	ld	r24, Z
    2b88:	0e 94 16 10 	call	0x202c	; 0x202c <LCD_enuSendCharacter>
		}
		if (Local_u8PressedKeyValue == '=')
    2b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8e:	8d 33       	cpi	r24, 0x3D	; 61
    2b90:	49 f1       	breq	.+82     	; 0x2be4 <CALC_vidGetInput+0xcc>
		{
			break;
		}
		Local_s8Iterator++;
    2b92:	89 81       	ldd	r24, Y+1	; 0x01
    2b94:	8f 5f       	subi	r24, 0xFF	; 255
    2b96:	89 83       	std	Y+1, r24	; 0x01
		if (Local_u8PressedKeyValue == '#')
    2b98:	8a 81       	ldd	r24, Y+2	; 0x02
    2b9a:	83 32       	cpi	r24, 0x23	; 35
    2b9c:	b9 f4       	brne	.+46     	; 0x2bcc <CALC_vidGetInput+0xb4>
		{
			LCD_Clear_Display();
    2b9e:	0e 94 0e 14 	call	0x281c	; 0x281c <LCD_Clear_Display>
			for (Local_s8Iterator = 0; Local_s8Iterator < 16; Local_s8Iterator++)
    2ba2:	19 82       	std	Y+1, r1	; 0x01
    2ba4:	0f c0       	rjmp	.+30     	; 0x2bc4 <CALC_vidGetInput+0xac>
			{
				Arru8Ip_Cache[Local_s8Iterator] = '$';
    2ba6:	89 81       	ldd	r24, Y+1	; 0x01
    2ba8:	28 2f       	mov	r18, r24
    2baa:	33 27       	eor	r19, r19
    2bac:	27 fd       	sbrc	r18, 7
    2bae:	30 95       	com	r19
    2bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb2:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb4:	fc 01       	movw	r30, r24
    2bb6:	e2 0f       	add	r30, r18
    2bb8:	f3 1f       	adc	r31, r19
    2bba:	84 e2       	ldi	r24, 0x24	; 36
    2bbc:	80 83       	st	Z, r24
		}
		Local_s8Iterator++;
		if (Local_u8PressedKeyValue == '#')
		{
			LCD_Clear_Display();
			for (Local_s8Iterator = 0; Local_s8Iterator < 16; Local_s8Iterator++)
    2bbe:	89 81       	ldd	r24, Y+1	; 0x01
    2bc0:	8f 5f       	subi	r24, 0xFF	; 255
    2bc2:	89 83       	std	Y+1, r24	; 0x01
    2bc4:	89 81       	ldd	r24, Y+1	; 0x01
    2bc6:	80 31       	cpi	r24, 0x10	; 16
    2bc8:	74 f3       	brlt	.-36     	; 0x2ba6 <CALC_vidGetInput+0x8e>
			{
				Arru8Ip_Cache[Local_s8Iterator] = '$';
			}
			Local_s8Iterator = 0;
    2bca:	19 82       	std	Y+1, r1	; 0x01
	s8 Local_s8Iterator;
	/*this part is input cache -> stores input from user*/
	u8 Local_u8PressedKeyValue = 0;
	Local_s8Iterator = 0;

	while (Local_s8Iterator < Copy_u8Ip_CacheSize)
    2bcc:	89 81       	ldd	r24, Y+1	; 0x01
    2bce:	28 2f       	mov	r18, r24
    2bd0:	33 27       	eor	r19, r19
    2bd2:	27 fd       	sbrc	r18, 7
    2bd4:	30 95       	com	r19
    2bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd8:	88 2f       	mov	r24, r24
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	28 17       	cp	r18, r24
    2bde:	39 07       	cpc	r19, r25
    2be0:	0c f4       	brge	.+2      	; 0x2be4 <CALC_vidGetInput+0xcc>
    2be2:	a7 cf       	rjmp	.-178    	; 0x2b32 <CALC_vidGetInput+0x1a>
			}
			Local_s8Iterator = 0;

		}
	}
}
    2be4:	0f 90       	pop	r0
    2be6:	0f 90       	pop	r0
    2be8:	0f 90       	pop	r0
    2bea:	0f 90       	pop	r0
    2bec:	0f 90       	pop	r0
    2bee:	cf 91       	pop	r28
    2bf0:	df 91       	pop	r29
    2bf2:	08 95       	ret

00002bf4 <CALC_vidCalculate>:
void CALC_vidCalculate(u8 *Arru8Ip_Cache, u8 Copy_u8Ip_CacheSize, f32 *Copy_pf32Result)
{
    2bf4:	ef 92       	push	r14
    2bf6:	ff 92       	push	r15
    2bf8:	0f 93       	push	r16
    2bfa:	1f 93       	push	r17
    2bfc:	df 93       	push	r29
    2bfe:	cf 93       	push	r28
    2c00:	cd b7       	in	r28, 0x3d	; 61
    2c02:	de b7       	in	r29, 0x3e	; 62
    2c04:	2d 97       	sbiw	r28, 0x0d	; 13
    2c06:	0f b6       	in	r0, 0x3f	; 63
    2c08:	f8 94       	cli
    2c0a:	de bf       	out	0x3e, r29	; 62
    2c0c:	0f be       	out	0x3f, r0	; 63
    2c0e:	cd bf       	out	0x3d, r28	; 61
    2c10:	9e 83       	std	Y+6, r25	; 0x06
    2c12:	8d 83       	std	Y+5, r24	; 0x05
    2c14:	6f 83       	std	Y+7, r22	; 0x07
    2c16:	59 87       	std	Y+9, r21	; 0x09
    2c18:	48 87       	std	Y+8, r20	; 0x08
	u16 Local_u16Opearnd = 0;
    2c1a:	1c 82       	std	Y+4, r1	; 0x04
    2c1c:	1b 82       	std	Y+3, r1	; 0x03
	s8 Local_s8Iterator;
	u8 Local_u8Oprtaion = 0;
    2c1e:	19 82       	std	Y+1, r1	; 0x01

	/*here starts the calculation process*/
	Local_s8Iterator = 0;
    2c20:	1a 82       	std	Y+2, r1	; 0x02
	Local_u16Opearnd = 0;
    2c22:	1c 82       	std	Y+4, r1	; 0x04
    2c24:	1b 82       	std	Y+3, r1	; 0x03
	*Copy_pf32Result = 0;
    2c26:	e8 85       	ldd	r30, Y+8	; 0x08
    2c28:	f9 85       	ldd	r31, Y+9	; 0x09
    2c2a:	80 e0       	ldi	r24, 0x00	; 0
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	a0 e0       	ldi	r26, 0x00	; 0
    2c30:	b0 e0       	ldi	r27, 0x00	; 0
    2c32:	80 83       	st	Z, r24
    2c34:	91 83       	std	Z+1, r25	; 0x01
    2c36:	a2 83       	std	Z+2, r26	; 0x02
    2c38:	b3 83       	std	Z+3, r27	; 0x03
    2c3a:	f1 c1       	rjmp	.+994    	; 0x301e <CALC_vidCalculate+0x42a>
	while (Local_s8Iterator < Copy_u8Ip_CacheSize && Arru8Ip_Cache[Local_s8Iterator] != '$')
	{

		if (Arru8Ip_Cache[Local_s8Iterator] >= '0' && Arru8Ip_Cache[Local_s8Iterator] <= '9')
    2c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3e:	28 2f       	mov	r18, r24
    2c40:	33 27       	eor	r19, r19
    2c42:	27 fd       	sbrc	r18, 7
    2c44:	30 95       	com	r19
    2c46:	8d 81       	ldd	r24, Y+5	; 0x05
    2c48:	9e 81       	ldd	r25, Y+6	; 0x06
    2c4a:	fc 01       	movw	r30, r24
    2c4c:	e2 0f       	add	r30, r18
    2c4e:	f3 1f       	adc	r31, r19
    2c50:	80 81       	ld	r24, Z
    2c52:	80 33       	cpi	r24, 0x30	; 48
    2c54:	78 f1       	brcs	.+94     	; 0x2cb4 <CALC_vidCalculate+0xc0>
    2c56:	8a 81       	ldd	r24, Y+2	; 0x02
    2c58:	28 2f       	mov	r18, r24
    2c5a:	33 27       	eor	r19, r19
    2c5c:	27 fd       	sbrc	r18, 7
    2c5e:	30 95       	com	r19
    2c60:	8d 81       	ldd	r24, Y+5	; 0x05
    2c62:	9e 81       	ldd	r25, Y+6	; 0x06
    2c64:	fc 01       	movw	r30, r24
    2c66:	e2 0f       	add	r30, r18
    2c68:	f3 1f       	adc	r31, r19
    2c6a:	80 81       	ld	r24, Z
    2c6c:	8a 33       	cpi	r24, 0x3A	; 58
    2c6e:	10 f5       	brcc	.+68     	; 0x2cb4 <CALC_vidCalculate+0xc0>
		{

			Local_u16Opearnd = Local_u16Opearnd * 10;
    2c70:	8b 81       	ldd	r24, Y+3	; 0x03
    2c72:	9c 81       	ldd	r25, Y+4	; 0x04
    2c74:	9c 01       	movw	r18, r24
    2c76:	22 0f       	add	r18, r18
    2c78:	33 1f       	adc	r19, r19
    2c7a:	c9 01       	movw	r24, r18
    2c7c:	88 0f       	add	r24, r24
    2c7e:	99 1f       	adc	r25, r25
    2c80:	88 0f       	add	r24, r24
    2c82:	99 1f       	adc	r25, r25
    2c84:	82 0f       	add	r24, r18
    2c86:	93 1f       	adc	r25, r19
    2c88:	9c 83       	std	Y+4, r25	; 0x04
    2c8a:	8b 83       	std	Y+3, r24	; 0x03
			Local_u16Opearnd = Local_u16Opearnd + (u16) (Arru8Ip_Cache[Local_s8Iterator] - 48);
    2c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8e:	28 2f       	mov	r18, r24
    2c90:	33 27       	eor	r19, r19
    2c92:	27 fd       	sbrc	r18, 7
    2c94:	30 95       	com	r19
    2c96:	8d 81       	ldd	r24, Y+5	; 0x05
    2c98:	9e 81       	ldd	r25, Y+6	; 0x06
    2c9a:	fc 01       	movw	r30, r24
    2c9c:	e2 0f       	add	r30, r18
    2c9e:	f3 1f       	adc	r31, r19
    2ca0:	80 81       	ld	r24, Z
    2ca2:	28 2f       	mov	r18, r24
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca8:	9c 81       	ldd	r25, Y+4	; 0x04
    2caa:	82 0f       	add	r24, r18
    2cac:	93 1f       	adc	r25, r19
    2cae:	c0 97       	sbiw	r24, 0x30	; 48
    2cb0:	9c 83       	std	Y+4, r25	; 0x04
    2cb2:	8b 83       	std	Y+3, r24	; 0x03
		}

		if (Arru8Ip_Cache[Local_s8Iterator] == '/' || Arru8Ip_Cache[Local_s8Iterator] == '*'
    2cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb6:	28 2f       	mov	r18, r24
    2cb8:	33 27       	eor	r19, r19
    2cba:	27 fd       	sbrc	r18, 7
    2cbc:	30 95       	com	r19
    2cbe:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc0:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc2:	fc 01       	movw	r30, r24
    2cc4:	e2 0f       	add	r30, r18
    2cc6:	f3 1f       	adc	r31, r19
    2cc8:	80 81       	ld	r24, Z
    2cca:	8f 32       	cpi	r24, 0x2F	; 47
    2ccc:	a9 f1       	breq	.+106    	; 0x2d38 <CALC_vidCalculate+0x144>
    2cce:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd0:	28 2f       	mov	r18, r24
    2cd2:	33 27       	eor	r19, r19
    2cd4:	27 fd       	sbrc	r18, 7
    2cd6:	30 95       	com	r19
    2cd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cda:	9e 81       	ldd	r25, Y+6	; 0x06
    2cdc:	fc 01       	movw	r30, r24
    2cde:	e2 0f       	add	r30, r18
    2ce0:	f3 1f       	adc	r31, r19
    2ce2:	80 81       	ld	r24, Z
    2ce4:	8a 32       	cpi	r24, 0x2A	; 42
    2ce6:	41 f1       	breq	.+80     	; 0x2d38 <CALC_vidCalculate+0x144>
    2ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cea:	28 2f       	mov	r18, r24
    2cec:	33 27       	eor	r19, r19
    2cee:	27 fd       	sbrc	r18, 7
    2cf0:	30 95       	com	r19
    2cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf6:	fc 01       	movw	r30, r24
    2cf8:	e2 0f       	add	r30, r18
    2cfa:	f3 1f       	adc	r31, r19
    2cfc:	80 81       	ld	r24, Z
    2cfe:	8b 32       	cpi	r24, 0x2B	; 43
    2d00:	d9 f0       	breq	.+54     	; 0x2d38 <CALC_vidCalculate+0x144>
    2d02:	8a 81       	ldd	r24, Y+2	; 0x02
    2d04:	28 2f       	mov	r18, r24
    2d06:	33 27       	eor	r19, r19
    2d08:	27 fd       	sbrc	r18, 7
    2d0a:	30 95       	com	r19
    2d0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d10:	fc 01       	movw	r30, r24
    2d12:	e2 0f       	add	r30, r18
    2d14:	f3 1f       	adc	r31, r19
    2d16:	80 81       	ld	r24, Z
    2d18:	8d 32       	cpi	r24, 0x2D	; 45
    2d1a:	71 f0       	breq	.+28     	; 0x2d38 <CALC_vidCalculate+0x144>
    2d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1e:	28 2f       	mov	r18, r24
    2d20:	33 27       	eor	r19, r19
    2d22:	27 fd       	sbrc	r18, 7
    2d24:	30 95       	com	r19
    2d26:	8d 81       	ldd	r24, Y+5	; 0x05
    2d28:	9e 81       	ldd	r25, Y+6	; 0x06
    2d2a:	fc 01       	movw	r30, r24
    2d2c:	e2 0f       	add	r30, r18
    2d2e:	f3 1f       	adc	r31, r19
    2d30:	80 81       	ld	r24, Z
    2d32:	8d 33       	cpi	r24, 0x3D	; 61
    2d34:	09 f0       	breq	.+2      	; 0x2d38 <CALC_vidCalculate+0x144>
    2d36:	c9 c0       	rjmp	.+402    	; 0x2eca <CALC_vidCalculate+0x2d6>
				|| Arru8Ip_Cache[Local_s8Iterator] == '+' || Arru8Ip_Cache[Local_s8Iterator] == '-'
				|| Arru8Ip_Cache[Local_s8Iterator] == '=')
		{
			if (*Copy_pf32Result == 0)
    2d38:	e8 85       	ldd	r30, Y+8	; 0x08
    2d3a:	f9 85       	ldd	r31, Y+9	; 0x09
    2d3c:	80 81       	ld	r24, Z
    2d3e:	91 81       	ldd	r25, Z+1	; 0x01
    2d40:	a2 81       	ldd	r26, Z+2	; 0x02
    2d42:	b3 81       	ldd	r27, Z+3	; 0x03
    2d44:	bc 01       	movw	r22, r24
    2d46:	cd 01       	movw	r24, r26
    2d48:	20 e0       	ldi	r18, 0x00	; 0
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	40 e0       	ldi	r20, 0x00	; 0
    2d4e:	50 e0       	ldi	r21, 0x00	; 0
    2d50:	0e 94 b8 04 	call	0x970	; 0x970 <__eqsf2>
    2d54:	88 23       	and	r24, r24
    2d56:	91 f4       	brne	.+36     	; 0x2d7c <CALC_vidCalculate+0x188>
			{
				*Copy_pf32Result = Local_u16Opearnd;
    2d58:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d5c:	cc 01       	movw	r24, r24
    2d5e:	a0 e0       	ldi	r26, 0x00	; 0
    2d60:	b0 e0       	ldi	r27, 0x00	; 0
    2d62:	bc 01       	movw	r22, r24
    2d64:	cd 01       	movw	r24, r26
    2d66:	0e 94 2a 06 	call	0xc54	; 0xc54 <__floatunsisf>
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	cb 01       	movw	r24, r22
    2d6e:	e8 85       	ldd	r30, Y+8	; 0x08
    2d70:	f9 85       	ldd	r31, Y+9	; 0x09
    2d72:	80 83       	st	Z, r24
    2d74:	91 83       	std	Z+1, r25	; 0x01
    2d76:	a2 83       	std	Z+2, r26	; 0x02
    2d78:	b3 83       	std	Z+3, r27	; 0x03
    2d7a:	99 c0       	rjmp	.+306    	; 0x2eae <CALC_vidCalculate+0x2ba>
			}
			else
			{
				switch (Local_u8Oprtaion)
    2d7c:	89 81       	ldd	r24, Y+1	; 0x01
    2d7e:	28 2f       	mov	r18, r24
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	3d 87       	std	Y+13, r19	; 0x0d
    2d84:	2c 87       	std	Y+12, r18	; 0x0c
    2d86:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d88:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d8a:	8b 32       	cpi	r24, 0x2B	; 43
    2d8c:	91 05       	cpc	r25, r1
    2d8e:	09 f4       	brne	.+2      	; 0x2d92 <CALC_vidCalculate+0x19e>
    2d90:	53 c0       	rjmp	.+166    	; 0x2e38 <CALC_vidCalculate+0x244>
    2d92:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d94:	3d 85       	ldd	r19, Y+13	; 0x0d
    2d96:	2c 32       	cpi	r18, 0x2C	; 44
    2d98:	31 05       	cpc	r19, r1
    2d9a:	34 f4       	brge	.+12     	; 0x2da8 <CALC_vidCalculate+0x1b4>
    2d9c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d9e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2da0:	8a 32       	cpi	r24, 0x2A	; 42
    2da2:	91 05       	cpc	r25, r1
    2da4:	59 f1       	breq	.+86     	; 0x2dfc <CALC_vidCalculate+0x208>
    2da6:	83 c0       	rjmp	.+262    	; 0x2eae <CALC_vidCalculate+0x2ba>
    2da8:	2c 85       	ldd	r18, Y+12	; 0x0c
    2daa:	3d 85       	ldd	r19, Y+13	; 0x0d
    2dac:	2d 32       	cpi	r18, 0x2D	; 45
    2dae:	31 05       	cpc	r19, r1
    2db0:	09 f4       	brne	.+2      	; 0x2db4 <CALC_vidCalculate+0x1c0>
    2db2:	60 c0       	rjmp	.+192    	; 0x2e74 <CALC_vidCalculate+0x280>
    2db4:	8c 85       	ldd	r24, Y+12	; 0x0c
    2db6:	9d 85       	ldd	r25, Y+13	; 0x0d
    2db8:	8f 32       	cpi	r24, 0x2F	; 47
    2dba:	91 05       	cpc	r25, r1
    2dbc:	09 f0       	breq	.+2      	; 0x2dc0 <CALC_vidCalculate+0x1cc>
    2dbe:	77 c0       	rjmp	.+238    	; 0x2eae <CALC_vidCalculate+0x2ba>
				{
				case '/':
					*Copy_pf32Result = *Copy_pf32Result / Local_u16Opearnd;
    2dc0:	e8 85       	ldd	r30, Y+8	; 0x08
    2dc2:	f9 85       	ldd	r31, Y+9	; 0x09
    2dc4:	e0 80       	ld	r14, Z
    2dc6:	f1 80       	ldd	r15, Z+1	; 0x01
    2dc8:	02 81       	ldd	r16, Z+2	; 0x02
    2dca:	13 81       	ldd	r17, Z+3	; 0x03
    2dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dce:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd0:	cc 01       	movw	r24, r24
    2dd2:	a0 e0       	ldi	r26, 0x00	; 0
    2dd4:	b0 e0       	ldi	r27, 0x00	; 0
    2dd6:	bc 01       	movw	r22, r24
    2dd8:	cd 01       	movw	r24, r26
    2dda:	0e 94 2a 06 	call	0xc54	; 0xc54 <__floatunsisf>
    2dde:	9b 01       	movw	r18, r22
    2de0:	ac 01       	movw	r20, r24
    2de2:	c8 01       	movw	r24, r16
    2de4:	b7 01       	movw	r22, r14
    2de6:	0e 94 0c 04 	call	0x818	; 0x818 <__divsf3>
    2dea:	dc 01       	movw	r26, r24
    2dec:	cb 01       	movw	r24, r22
    2dee:	e8 85       	ldd	r30, Y+8	; 0x08
    2df0:	f9 85       	ldd	r31, Y+9	; 0x09
    2df2:	80 83       	st	Z, r24
    2df4:	91 83       	std	Z+1, r25	; 0x01
    2df6:	a2 83       	std	Z+2, r26	; 0x02
    2df8:	b3 83       	std	Z+3, r27	; 0x03
    2dfa:	59 c0       	rjmp	.+178    	; 0x2eae <CALC_vidCalculate+0x2ba>
					break;
				case '*':
					*Copy_pf32Result = *Copy_pf32Result * Local_u16Opearnd;
    2dfc:	e8 85       	ldd	r30, Y+8	; 0x08
    2dfe:	f9 85       	ldd	r31, Y+9	; 0x09
    2e00:	e0 80       	ld	r14, Z
    2e02:	f1 80       	ldd	r15, Z+1	; 0x01
    2e04:	02 81       	ldd	r16, Z+2	; 0x02
    2e06:	13 81       	ldd	r17, Z+3	; 0x03
    2e08:	8b 81       	ldd	r24, Y+3	; 0x03
    2e0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e0c:	cc 01       	movw	r24, r24
    2e0e:	a0 e0       	ldi	r26, 0x00	; 0
    2e10:	b0 e0       	ldi	r27, 0x00	; 0
    2e12:	bc 01       	movw	r22, r24
    2e14:	cd 01       	movw	r24, r26
    2e16:	0e 94 2a 06 	call	0xc54	; 0xc54 <__floatunsisf>
    2e1a:	9b 01       	movw	r18, r22
    2e1c:	ac 01       	movw	r20, r24
    2e1e:	c8 01       	movw	r24, r16
    2e20:	b7 01       	movw	r22, r14
    2e22:	0e 94 12 03 	call	0x624	; 0x624 <__mulsf3>
    2e26:	dc 01       	movw	r26, r24
    2e28:	cb 01       	movw	r24, r22
    2e2a:	e8 85       	ldd	r30, Y+8	; 0x08
    2e2c:	f9 85       	ldd	r31, Y+9	; 0x09
    2e2e:	80 83       	st	Z, r24
    2e30:	91 83       	std	Z+1, r25	; 0x01
    2e32:	a2 83       	std	Z+2, r26	; 0x02
    2e34:	b3 83       	std	Z+3, r27	; 0x03
    2e36:	3b c0       	rjmp	.+118    	; 0x2eae <CALC_vidCalculate+0x2ba>
					break;
				case '+':
					*Copy_pf32Result = *Copy_pf32Result + Local_u16Opearnd;
    2e38:	e8 85       	ldd	r30, Y+8	; 0x08
    2e3a:	f9 85       	ldd	r31, Y+9	; 0x09
    2e3c:	e0 80       	ld	r14, Z
    2e3e:	f1 80       	ldd	r15, Z+1	; 0x01
    2e40:	02 81       	ldd	r16, Z+2	; 0x02
    2e42:	13 81       	ldd	r17, Z+3	; 0x03
    2e44:	8b 81       	ldd	r24, Y+3	; 0x03
    2e46:	9c 81       	ldd	r25, Y+4	; 0x04
    2e48:	cc 01       	movw	r24, r24
    2e4a:	a0 e0       	ldi	r26, 0x00	; 0
    2e4c:	b0 e0       	ldi	r27, 0x00	; 0
    2e4e:	bc 01       	movw	r22, r24
    2e50:	cd 01       	movw	r24, r26
    2e52:	0e 94 2a 06 	call	0xc54	; 0xc54 <__floatunsisf>
    2e56:	9b 01       	movw	r18, r22
    2e58:	ac 01       	movw	r20, r24
    2e5a:	c8 01       	movw	r24, r16
    2e5c:	b7 01       	movw	r22, r14
    2e5e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <__addsf3>
    2e62:	dc 01       	movw	r26, r24
    2e64:	cb 01       	movw	r24, r22
    2e66:	e8 85       	ldd	r30, Y+8	; 0x08
    2e68:	f9 85       	ldd	r31, Y+9	; 0x09
    2e6a:	80 83       	st	Z, r24
    2e6c:	91 83       	std	Z+1, r25	; 0x01
    2e6e:	a2 83       	std	Z+2, r26	; 0x02
    2e70:	b3 83       	std	Z+3, r27	; 0x03
    2e72:	1d c0       	rjmp	.+58     	; 0x2eae <CALC_vidCalculate+0x2ba>
					break;
				case '-':
					*Copy_pf32Result = *Copy_pf32Result - Local_u16Opearnd;
    2e74:	e8 85       	ldd	r30, Y+8	; 0x08
    2e76:	f9 85       	ldd	r31, Y+9	; 0x09
    2e78:	e0 80       	ld	r14, Z
    2e7a:	f1 80       	ldd	r15, Z+1	; 0x01
    2e7c:	02 81       	ldd	r16, Z+2	; 0x02
    2e7e:	13 81       	ldd	r17, Z+3	; 0x03
    2e80:	8b 81       	ldd	r24, Y+3	; 0x03
    2e82:	9c 81       	ldd	r25, Y+4	; 0x04
    2e84:	cc 01       	movw	r24, r24
    2e86:	a0 e0       	ldi	r26, 0x00	; 0
    2e88:	b0 e0       	ldi	r27, 0x00	; 0
    2e8a:	bc 01       	movw	r22, r24
    2e8c:	cd 01       	movw	r24, r26
    2e8e:	0e 94 2a 06 	call	0xc54	; 0xc54 <__floatunsisf>
    2e92:	9b 01       	movw	r18, r22
    2e94:	ac 01       	movw	r20, r24
    2e96:	c8 01       	movw	r24, r16
    2e98:	b7 01       	movw	r22, r14
    2e9a:	0e 94 b4 02 	call	0x568	; 0x568 <__subsf3>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	e8 85       	ldd	r30, Y+8	; 0x08
    2ea4:	f9 85       	ldd	r31, Y+9	; 0x09
    2ea6:	80 83       	st	Z, r24
    2ea8:	91 83       	std	Z+1, r25	; 0x01
    2eaa:	a2 83       	std	Z+2, r26	; 0x02
    2eac:	b3 83       	std	Z+3, r27	; 0x03
					break;
				}
			}
			Local_u16Opearnd = 0;
    2eae:	1c 82       	std	Y+4, r1	; 0x04
    2eb0:	1b 82       	std	Y+3, r1	; 0x03
			Local_u8Oprtaion = Arru8Ip_Cache[Local_s8Iterator];
    2eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb4:	28 2f       	mov	r18, r24
    2eb6:	33 27       	eor	r19, r19
    2eb8:	27 fd       	sbrc	r18, 7
    2eba:	30 95       	com	r19
    2ebc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ebe:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec0:	fc 01       	movw	r30, r24
    2ec2:	e2 0f       	add	r30, r18
    2ec4:	f3 1f       	adc	r31, r19
    2ec6:	80 81       	ld	r24, Z
    2ec8:	89 83       	std	Y+1, r24	; 0x01
		}

		if (Arru8Ip_Cache[Local_s8Iterator] == '=')
    2eca:	8a 81       	ldd	r24, Y+2	; 0x02
    2ecc:	28 2f       	mov	r18, r24
    2ece:	33 27       	eor	r19, r19
    2ed0:	27 fd       	sbrc	r18, 7
    2ed2:	30 95       	com	r19
    2ed4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ed8:	fc 01       	movw	r30, r24
    2eda:	e2 0f       	add	r30, r18
    2edc:	f3 1f       	adc	r31, r19
    2ede:	80 81       	ld	r24, Z
    2ee0:	8d 33       	cpi	r24, 0x3D	; 61
    2ee2:	09 f0       	breq	.+2      	; 0x2ee6 <CALC_vidCalculate+0x2f2>
    2ee4:	99 c0       	rjmp	.+306    	; 0x3018 <CALC_vidCalculate+0x424>
		{

			switch (Local_u8Oprtaion)
    2ee6:	89 81       	ldd	r24, Y+1	; 0x01
    2ee8:	28 2f       	mov	r18, r24
    2eea:	30 e0       	ldi	r19, 0x00	; 0
    2eec:	3b 87       	std	Y+11, r19	; 0x0b
    2eee:	2a 87       	std	Y+10, r18	; 0x0a
    2ef0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ef2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ef4:	8b 32       	cpi	r24, 0x2B	; 43
    2ef6:	91 05       	cpc	r25, r1
    2ef8:	09 f4       	brne	.+2      	; 0x2efc <CALC_vidCalculate+0x308>
    2efa:	53 c0       	rjmp	.+166    	; 0x2fa2 <CALC_vidCalculate+0x3ae>
    2efc:	2a 85       	ldd	r18, Y+10	; 0x0a
    2efe:	3b 85       	ldd	r19, Y+11	; 0x0b
    2f00:	2c 32       	cpi	r18, 0x2C	; 44
    2f02:	31 05       	cpc	r19, r1
    2f04:	34 f4       	brge	.+12     	; 0x2f12 <CALC_vidCalculate+0x31e>
    2f06:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f08:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f0a:	8a 32       	cpi	r24, 0x2A	; 42
    2f0c:	91 05       	cpc	r25, r1
    2f0e:	59 f1       	breq	.+86     	; 0x2f66 <CALC_vidCalculate+0x372>
    2f10:	83 c0       	rjmp	.+262    	; 0x3018 <CALC_vidCalculate+0x424>
    2f12:	2a 85       	ldd	r18, Y+10	; 0x0a
    2f14:	3b 85       	ldd	r19, Y+11	; 0x0b
    2f16:	2d 32       	cpi	r18, 0x2D	; 45
    2f18:	31 05       	cpc	r19, r1
    2f1a:	09 f4       	brne	.+2      	; 0x2f1e <CALC_vidCalculate+0x32a>
    2f1c:	60 c0       	rjmp	.+192    	; 0x2fde <CALC_vidCalculate+0x3ea>
    2f1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f20:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f22:	8f 32       	cpi	r24, 0x2F	; 47
    2f24:	91 05       	cpc	r25, r1
    2f26:	09 f0       	breq	.+2      	; 0x2f2a <CALC_vidCalculate+0x336>
    2f28:	77 c0       	rjmp	.+238    	; 0x3018 <CALC_vidCalculate+0x424>
			{
			case '/':
				*Copy_pf32Result = *Copy_pf32Result / Local_u16Opearnd;
    2f2a:	e8 85       	ldd	r30, Y+8	; 0x08
    2f2c:	f9 85       	ldd	r31, Y+9	; 0x09
    2f2e:	e0 80       	ld	r14, Z
    2f30:	f1 80       	ldd	r15, Z+1	; 0x01
    2f32:	02 81       	ldd	r16, Z+2	; 0x02
    2f34:	13 81       	ldd	r17, Z+3	; 0x03
    2f36:	8b 81       	ldd	r24, Y+3	; 0x03
    2f38:	9c 81       	ldd	r25, Y+4	; 0x04
    2f3a:	cc 01       	movw	r24, r24
    2f3c:	a0 e0       	ldi	r26, 0x00	; 0
    2f3e:	b0 e0       	ldi	r27, 0x00	; 0
    2f40:	bc 01       	movw	r22, r24
    2f42:	cd 01       	movw	r24, r26
    2f44:	0e 94 2a 06 	call	0xc54	; 0xc54 <__floatunsisf>
    2f48:	9b 01       	movw	r18, r22
    2f4a:	ac 01       	movw	r20, r24
    2f4c:	c8 01       	movw	r24, r16
    2f4e:	b7 01       	movw	r22, r14
    2f50:	0e 94 0c 04 	call	0x818	; 0x818 <__divsf3>
    2f54:	dc 01       	movw	r26, r24
    2f56:	cb 01       	movw	r24, r22
    2f58:	e8 85       	ldd	r30, Y+8	; 0x08
    2f5a:	f9 85       	ldd	r31, Y+9	; 0x09
    2f5c:	80 83       	st	Z, r24
    2f5e:	91 83       	std	Z+1, r25	; 0x01
    2f60:	a2 83       	std	Z+2, r26	; 0x02
    2f62:	b3 83       	std	Z+3, r27	; 0x03
    2f64:	59 c0       	rjmp	.+178    	; 0x3018 <CALC_vidCalculate+0x424>
				break;
			case '*':
				*Copy_pf32Result = *Copy_pf32Result * Local_u16Opearnd;
    2f66:	e8 85       	ldd	r30, Y+8	; 0x08
    2f68:	f9 85       	ldd	r31, Y+9	; 0x09
    2f6a:	e0 80       	ld	r14, Z
    2f6c:	f1 80       	ldd	r15, Z+1	; 0x01
    2f6e:	02 81       	ldd	r16, Z+2	; 0x02
    2f70:	13 81       	ldd	r17, Z+3	; 0x03
    2f72:	8b 81       	ldd	r24, Y+3	; 0x03
    2f74:	9c 81       	ldd	r25, Y+4	; 0x04
    2f76:	cc 01       	movw	r24, r24
    2f78:	a0 e0       	ldi	r26, 0x00	; 0
    2f7a:	b0 e0       	ldi	r27, 0x00	; 0
    2f7c:	bc 01       	movw	r22, r24
    2f7e:	cd 01       	movw	r24, r26
    2f80:	0e 94 2a 06 	call	0xc54	; 0xc54 <__floatunsisf>
    2f84:	9b 01       	movw	r18, r22
    2f86:	ac 01       	movw	r20, r24
    2f88:	c8 01       	movw	r24, r16
    2f8a:	b7 01       	movw	r22, r14
    2f8c:	0e 94 12 03 	call	0x624	; 0x624 <__mulsf3>
    2f90:	dc 01       	movw	r26, r24
    2f92:	cb 01       	movw	r24, r22
    2f94:	e8 85       	ldd	r30, Y+8	; 0x08
    2f96:	f9 85       	ldd	r31, Y+9	; 0x09
    2f98:	80 83       	st	Z, r24
    2f9a:	91 83       	std	Z+1, r25	; 0x01
    2f9c:	a2 83       	std	Z+2, r26	; 0x02
    2f9e:	b3 83       	std	Z+3, r27	; 0x03
    2fa0:	3b c0       	rjmp	.+118    	; 0x3018 <CALC_vidCalculate+0x424>
				break;
			case '+':
				*Copy_pf32Result = *Copy_pf32Result + Local_u16Opearnd;
    2fa2:	e8 85       	ldd	r30, Y+8	; 0x08
    2fa4:	f9 85       	ldd	r31, Y+9	; 0x09
    2fa6:	e0 80       	ld	r14, Z
    2fa8:	f1 80       	ldd	r15, Z+1	; 0x01
    2faa:	02 81       	ldd	r16, Z+2	; 0x02
    2fac:	13 81       	ldd	r17, Z+3	; 0x03
    2fae:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb0:	9c 81       	ldd	r25, Y+4	; 0x04
    2fb2:	cc 01       	movw	r24, r24
    2fb4:	a0 e0       	ldi	r26, 0x00	; 0
    2fb6:	b0 e0       	ldi	r27, 0x00	; 0
    2fb8:	bc 01       	movw	r22, r24
    2fba:	cd 01       	movw	r24, r26
    2fbc:	0e 94 2a 06 	call	0xc54	; 0xc54 <__floatunsisf>
    2fc0:	9b 01       	movw	r18, r22
    2fc2:	ac 01       	movw	r20, r24
    2fc4:	c8 01       	movw	r24, r16
    2fc6:	b7 01       	movw	r22, r14
    2fc8:	0e 94 e5 02 	call	0x5ca	; 0x5ca <__addsf3>
    2fcc:	dc 01       	movw	r26, r24
    2fce:	cb 01       	movw	r24, r22
    2fd0:	e8 85       	ldd	r30, Y+8	; 0x08
    2fd2:	f9 85       	ldd	r31, Y+9	; 0x09
    2fd4:	80 83       	st	Z, r24
    2fd6:	91 83       	std	Z+1, r25	; 0x01
    2fd8:	a2 83       	std	Z+2, r26	; 0x02
    2fda:	b3 83       	std	Z+3, r27	; 0x03
    2fdc:	1d c0       	rjmp	.+58     	; 0x3018 <CALC_vidCalculate+0x424>
				break;
			case '-':
				*Copy_pf32Result = *Copy_pf32Result - Local_u16Opearnd;
    2fde:	e8 85       	ldd	r30, Y+8	; 0x08
    2fe0:	f9 85       	ldd	r31, Y+9	; 0x09
    2fe2:	e0 80       	ld	r14, Z
    2fe4:	f1 80       	ldd	r15, Z+1	; 0x01
    2fe6:	02 81       	ldd	r16, Z+2	; 0x02
    2fe8:	13 81       	ldd	r17, Z+3	; 0x03
    2fea:	8b 81       	ldd	r24, Y+3	; 0x03
    2fec:	9c 81       	ldd	r25, Y+4	; 0x04
    2fee:	cc 01       	movw	r24, r24
    2ff0:	a0 e0       	ldi	r26, 0x00	; 0
    2ff2:	b0 e0       	ldi	r27, 0x00	; 0
    2ff4:	bc 01       	movw	r22, r24
    2ff6:	cd 01       	movw	r24, r26
    2ff8:	0e 94 2a 06 	call	0xc54	; 0xc54 <__floatunsisf>
    2ffc:	9b 01       	movw	r18, r22
    2ffe:	ac 01       	movw	r20, r24
    3000:	c8 01       	movw	r24, r16
    3002:	b7 01       	movw	r22, r14
    3004:	0e 94 b4 02 	call	0x568	; 0x568 <__subsf3>
    3008:	dc 01       	movw	r26, r24
    300a:	cb 01       	movw	r24, r22
    300c:	e8 85       	ldd	r30, Y+8	; 0x08
    300e:	f9 85       	ldd	r31, Y+9	; 0x09
    3010:	80 83       	st	Z, r24
    3012:	91 83       	std	Z+1, r25	; 0x01
    3014:	a2 83       	std	Z+2, r26	; 0x02
    3016:	b3 83       	std	Z+3, r27	; 0x03
				break;
			}
		}
		Local_s8Iterator++;
    3018:	8a 81       	ldd	r24, Y+2	; 0x02
    301a:	8f 5f       	subi	r24, 0xFF	; 255
    301c:	8a 83       	std	Y+2, r24	; 0x02

	/*here starts the calculation process*/
	Local_s8Iterator = 0;
	Local_u16Opearnd = 0;
	*Copy_pf32Result = 0;
	while (Local_s8Iterator < Copy_u8Ip_CacheSize && Arru8Ip_Cache[Local_s8Iterator] != '$')
    301e:	8a 81       	ldd	r24, Y+2	; 0x02
    3020:	28 2f       	mov	r18, r24
    3022:	33 27       	eor	r19, r19
    3024:	27 fd       	sbrc	r18, 7
    3026:	30 95       	com	r19
    3028:	8f 81       	ldd	r24, Y+7	; 0x07
    302a:	88 2f       	mov	r24, r24
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	28 17       	cp	r18, r24
    3030:	39 07       	cpc	r19, r25
    3032:	74 f4       	brge	.+28     	; 0x3050 <CALC_vidCalculate+0x45c>
    3034:	8a 81       	ldd	r24, Y+2	; 0x02
    3036:	28 2f       	mov	r18, r24
    3038:	33 27       	eor	r19, r19
    303a:	27 fd       	sbrc	r18, 7
    303c:	30 95       	com	r19
    303e:	8d 81       	ldd	r24, Y+5	; 0x05
    3040:	9e 81       	ldd	r25, Y+6	; 0x06
    3042:	fc 01       	movw	r30, r24
    3044:	e2 0f       	add	r30, r18
    3046:	f3 1f       	adc	r31, r19
    3048:	80 81       	ld	r24, Z
    304a:	84 32       	cpi	r24, 0x24	; 36
    304c:	09 f0       	breq	.+2      	; 0x3050 <CALC_vidCalculate+0x45c>
    304e:	f6 cd       	rjmp	.-1044   	; 0x2c3c <CALC_vidCalculate+0x48>
				break;
			}
		}
		Local_s8Iterator++;
	}
	for (Local_s8Iterator = 0; Local_s8Iterator < 16; Local_s8Iterator++)
    3050:	1a 82       	std	Y+2, r1	; 0x02
    3052:	0f c0       	rjmp	.+30     	; 0x3072 <CALC_vidCalculate+0x47e>
	{
		Arru8Ip_Cache[Local_s8Iterator] = '$';
    3054:	8a 81       	ldd	r24, Y+2	; 0x02
    3056:	28 2f       	mov	r18, r24
    3058:	33 27       	eor	r19, r19
    305a:	27 fd       	sbrc	r18, 7
    305c:	30 95       	com	r19
    305e:	8d 81       	ldd	r24, Y+5	; 0x05
    3060:	9e 81       	ldd	r25, Y+6	; 0x06
    3062:	fc 01       	movw	r30, r24
    3064:	e2 0f       	add	r30, r18
    3066:	f3 1f       	adc	r31, r19
    3068:	84 e2       	ldi	r24, 0x24	; 36
    306a:	80 83       	st	Z, r24
				break;
			}
		}
		Local_s8Iterator++;
	}
	for (Local_s8Iterator = 0; Local_s8Iterator < 16; Local_s8Iterator++)
    306c:	8a 81       	ldd	r24, Y+2	; 0x02
    306e:	8f 5f       	subi	r24, 0xFF	; 255
    3070:	8a 83       	std	Y+2, r24	; 0x02
    3072:	8a 81       	ldd	r24, Y+2	; 0x02
    3074:	80 31       	cpi	r24, 0x10	; 16
    3076:	74 f3       	brlt	.-36     	; 0x3054 <CALC_vidCalculate+0x460>
	{
		Arru8Ip_Cache[Local_s8Iterator] = '$';
	}
}
    3078:	2d 96       	adiw	r28, 0x0d	; 13
    307a:	0f b6       	in	r0, 0x3f	; 63
    307c:	f8 94       	cli
    307e:	de bf       	out	0x3e, r29	; 62
    3080:	0f be       	out	0x3f, r0	; 63
    3082:	cd bf       	out	0x3d, r28	; 61
    3084:	cf 91       	pop	r28
    3086:	df 91       	pop	r29
    3088:	1f 91       	pop	r17
    308a:	0f 91       	pop	r16
    308c:	ff 90       	pop	r15
    308e:	ef 90       	pop	r14
    3090:	08 95       	ret

00003092 <CALC_DisplayResult>:
void CALC_DisplayResult(f32 *Copy_pf32Result)
{
    3092:	af 92       	push	r10
    3094:	bf 92       	push	r11
    3096:	cf 92       	push	r12
    3098:	df 92       	push	r13
    309a:	ef 92       	push	r14
    309c:	ff 92       	push	r15
    309e:	0f 93       	push	r16
    30a0:	1f 93       	push	r17
    30a2:	df 93       	push	r29
    30a4:	cf 93       	push	r28
    30a6:	cd b7       	in	r28, 0x3d	; 61
    30a8:	de b7       	in	r29, 0x3e	; 62
    30aa:	e1 97       	sbiw	r28, 0x31	; 49
    30ac:	0f b6       	in	r0, 0x3f	; 63
    30ae:	f8 94       	cli
    30b0:	de bf       	out	0x3e, r29	; 62
    30b2:	0f be       	out	0x3f, r0	; 63
    30b4:	cd bf       	out	0x3d, r28	; 61
    30b6:	9e 83       	std	Y+6, r25	; 0x06
    30b8:	8d 83       	std	Y+5, r24	; 0x05
	/*this part displays the result*/
	/*note : it will not be float and negative because there is no point at input :) */
	u32 Local_u32ResultSplit;
	LCD_enuChangePosition(1, 0);
    30ba:	81 e0       	ldi	r24, 0x01	; 1
    30bc:	60 e0       	ldi	r22, 0x00	; 0
    30be:	0e 94 10 12 	call	0x2420	; 0x2420 <LCD_enuChangePosition>
	if (*Copy_pf32Result < 0)
    30c2:	ed 81       	ldd	r30, Y+5	; 0x05
    30c4:	fe 81       	ldd	r31, Y+6	; 0x06
    30c6:	80 81       	ld	r24, Z
    30c8:	91 81       	ldd	r25, Z+1	; 0x01
    30ca:	a2 81       	ldd	r26, Z+2	; 0x02
    30cc:	b3 81       	ldd	r27, Z+3	; 0x03
    30ce:	bc 01       	movw	r22, r24
    30d0:	cd 01       	movw	r24, r26
    30d2:	20 e0       	ldi	r18, 0x00	; 0
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	40 e0       	ldi	r20, 0x00	; 0
    30d8:	50 e0       	ldi	r21, 0x00	; 0
    30da:	0e 94 48 05 	call	0xa90	; 0xa90 <__ltsf2>
    30de:	88 23       	and	r24, r24
    30e0:	0c f0       	brlt	.+2      	; 0x30e4 <CALC_DisplayResult+0x52>
    30e2:	0c c1       	rjmp	.+536    	; 0x32fc <CALC_DisplayResult+0x26a>
	{
		LCD_enuSendCharacter('-');
    30e4:	8d e2       	ldi	r24, 0x2D	; 45
    30e6:	0e 94 16 10 	call	0x202c	; 0x202c <LCD_enuSendCharacter>
		*Copy_pf32Result = 4294967296 - (u32) *Copy_pf32Result;
    30ea:	ed 81       	ldd	r30, Y+5	; 0x05
    30ec:	fe 81       	ldd	r31, Y+6	; 0x06
    30ee:	80 81       	ld	r24, Z
    30f0:	91 81       	ldd	r25, Z+1	; 0x01
    30f2:	a2 81       	ldd	r26, Z+2	; 0x02
    30f4:	b3 81       	ldd	r27, Z+3	; 0x03
    30f6:	bc 01       	movw	r22, r24
    30f8:	cd 01       	movw	r24, r26
    30fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30fe:	dc 01       	movw	r26, r24
    3100:	cb 01       	movw	r24, r22
    3102:	8c 01       	movw	r16, r24
    3104:	9d 01       	movw	r18, r26
    3106:	40 e0       	ldi	r20, 0x00	; 0
    3108:	50 e0       	ldi	r21, 0x00	; 0
    310a:	60 e0       	ldi	r22, 0x00	; 0
    310c:	70 e0       	ldi	r23, 0x00	; 0
    310e:	0f 83       	std	Y+7, r16	; 0x07
    3110:	18 87       	std	Y+8, r17	; 0x08
    3112:	29 87       	std	Y+9, r18	; 0x09
    3114:	3a 87       	std	Y+10, r19	; 0x0a
    3116:	4b 87       	std	Y+11, r20	; 0x0b
    3118:	5c 87       	std	Y+12, r21	; 0x0c
    311a:	6d 87       	std	Y+13, r22	; 0x0d
    311c:	7e 87       	std	Y+14, r23	; 0x0e
    311e:	1f 86       	std	Y+15, r1	; 0x0f
    3120:	18 8a       	std	Y+16, r1	; 0x10
    3122:	19 8a       	std	Y+17, r1	; 0x11
    3124:	1a 8a       	std	Y+18, r1	; 0x12
    3126:	11 e0       	ldi	r17, 0x01	; 1
    3128:	1b 8b       	std	Y+19, r17	; 0x13
    312a:	1c 8a       	std	Y+20, r1	; 0x14
    312c:	1d 8a       	std	Y+21, r1	; 0x15
    312e:	1e 8a       	std	Y+22, r1	; 0x16
    3130:	2f 85       	ldd	r18, Y+15	; 0x0f
    3132:	3f 81       	ldd	r19, Y+7	; 0x07
    3134:	23 1b       	sub	r18, r19
    3136:	2f 8b       	std	Y+23, r18	; 0x17
    3138:	41 e0       	ldi	r20, 0x01	; 1
    313a:	4f 8f       	std	Y+31, r20	; 0x1f
    313c:	5f 89       	ldd	r21, Y+23	; 0x17
    313e:	6f 85       	ldd	r22, Y+15	; 0x0f
    3140:	65 17       	cp	r22, r21
    3142:	08 f0       	brcs	.+2      	; 0x3146 <CALC_DisplayResult+0xb4>
    3144:	1f 8e       	std	Y+31, r1	; 0x1f
    3146:	78 89       	ldd	r23, Y+16	; 0x10
    3148:	88 85       	ldd	r24, Y+8	; 0x08
    314a:	78 1b       	sub	r23, r24
    314c:	78 8f       	std	Y+24, r23	; 0x18
    314e:	91 e0       	ldi	r25, 0x01	; 1
    3150:	98 a3       	std	Y+32, r25	; 0x20
    3152:	08 8d       	ldd	r16, Y+24	; 0x18
    3154:	18 89       	ldd	r17, Y+16	; 0x10
    3156:	10 17       	cp	r17, r16
    3158:	08 f0       	brcs	.+2      	; 0x315c <CALC_DisplayResult+0xca>
    315a:	18 a2       	std	Y+32, r1	; 0x20
    315c:	28 8d       	ldd	r18, Y+24	; 0x18
    315e:	3f 8d       	ldd	r19, Y+31	; 0x1f
    3160:	23 1b       	sub	r18, r19
    3162:	29 a3       	std	Y+33, r18	; 0x21
    3164:	41 e0       	ldi	r20, 0x01	; 1
    3166:	4a a3       	std	Y+34, r20	; 0x22
    3168:	59 a1       	ldd	r21, Y+33	; 0x21
    316a:	68 8d       	ldd	r22, Y+24	; 0x18
    316c:	65 17       	cp	r22, r21
    316e:	08 f0       	brcs	.+2      	; 0x3172 <CALC_DisplayResult+0xe0>
    3170:	1a a2       	std	Y+34, r1	; 0x22
    3172:	78 a1       	ldd	r23, Y+32	; 0x20
    3174:	8a a1       	ldd	r24, Y+34	; 0x22
    3176:	78 2b       	or	r23, r24
    3178:	78 a3       	std	Y+32, r23	; 0x20
    317a:	99 a1       	ldd	r25, Y+33	; 0x21
    317c:	98 8f       	std	Y+24, r25	; 0x18
    317e:	09 89       	ldd	r16, Y+17	; 0x11
    3180:	19 85       	ldd	r17, Y+9	; 0x09
    3182:	01 1b       	sub	r16, r17
    3184:	09 8f       	std	Y+25, r16	; 0x19
    3186:	21 e0       	ldi	r18, 0x01	; 1
    3188:	2b a3       	std	Y+35, r18	; 0x23
    318a:	39 8d       	ldd	r19, Y+25	; 0x19
    318c:	49 89       	ldd	r20, Y+17	; 0x11
    318e:	43 17       	cp	r20, r19
    3190:	08 f0       	brcs	.+2      	; 0x3194 <CALC_DisplayResult+0x102>
    3192:	1b a2       	std	Y+35, r1	; 0x23
    3194:	59 8d       	ldd	r21, Y+25	; 0x19
    3196:	68 a1       	ldd	r22, Y+32	; 0x20
    3198:	56 1b       	sub	r21, r22
    319a:	5c a3       	std	Y+36, r21	; 0x24
    319c:	71 e0       	ldi	r23, 0x01	; 1
    319e:	7d a3       	std	Y+37, r23	; 0x25
    31a0:	8c a1       	ldd	r24, Y+36	; 0x24
    31a2:	99 8d       	ldd	r25, Y+25	; 0x19
    31a4:	98 17       	cp	r25, r24
    31a6:	08 f0       	brcs	.+2      	; 0x31aa <CALC_DisplayResult+0x118>
    31a8:	1d a2       	std	Y+37, r1	; 0x25
    31aa:	0b a1       	ldd	r16, Y+35	; 0x23
    31ac:	1d a1       	ldd	r17, Y+37	; 0x25
    31ae:	01 2b       	or	r16, r17
    31b0:	0b a3       	std	Y+35, r16	; 0x23
    31b2:	2c a1       	ldd	r18, Y+36	; 0x24
    31b4:	29 8f       	std	Y+25, r18	; 0x19
    31b6:	3a 89       	ldd	r19, Y+18	; 0x12
    31b8:	4a 85       	ldd	r20, Y+10	; 0x0a
    31ba:	34 1b       	sub	r19, r20
    31bc:	3a 8f       	std	Y+26, r19	; 0x1a
    31be:	51 e0       	ldi	r21, 0x01	; 1
    31c0:	5e a3       	std	Y+38, r21	; 0x26
    31c2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    31c4:	7a 89       	ldd	r23, Y+18	; 0x12
    31c6:	76 17       	cp	r23, r22
    31c8:	08 f0       	brcs	.+2      	; 0x31cc <CALC_DisplayResult+0x13a>
    31ca:	1e a2       	std	Y+38, r1	; 0x26
    31cc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    31ce:	9b a1       	ldd	r25, Y+35	; 0x23
    31d0:	89 1b       	sub	r24, r25
    31d2:	8f a3       	std	Y+39, r24	; 0x27
    31d4:	01 e0       	ldi	r16, 0x01	; 1
    31d6:	08 a7       	std	Y+40, r16	; 0x28
    31d8:	1f a1       	ldd	r17, Y+39	; 0x27
    31da:	2a 8d       	ldd	r18, Y+26	; 0x1a
    31dc:	21 17       	cp	r18, r17
    31de:	08 f0       	brcs	.+2      	; 0x31e2 <CALC_DisplayResult+0x150>
    31e0:	18 a6       	std	Y+40, r1	; 0x28
    31e2:	3e a1       	ldd	r19, Y+38	; 0x26
    31e4:	48 a5       	ldd	r20, Y+40	; 0x28
    31e6:	34 2b       	or	r19, r20
    31e8:	3e a3       	std	Y+38, r19	; 0x26
    31ea:	5f a1       	ldd	r21, Y+39	; 0x27
    31ec:	5a 8f       	std	Y+26, r21	; 0x1a
    31ee:	6b 89       	ldd	r22, Y+19	; 0x13
    31f0:	7b 85       	ldd	r23, Y+11	; 0x0b
    31f2:	67 1b       	sub	r22, r23
    31f4:	6b 8f       	std	Y+27, r22	; 0x1b
    31f6:	81 e0       	ldi	r24, 0x01	; 1
    31f8:	89 a7       	std	Y+41, r24	; 0x29
    31fa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    31fc:	0b 89       	ldd	r16, Y+19	; 0x13
    31fe:	09 17       	cp	r16, r25
    3200:	08 f0       	brcs	.+2      	; 0x3204 <CALC_DisplayResult+0x172>
    3202:	19 a6       	std	Y+41, r1	; 0x29
    3204:	1b 8d       	ldd	r17, Y+27	; 0x1b
    3206:	2e a1       	ldd	r18, Y+38	; 0x26
    3208:	12 1b       	sub	r17, r18
    320a:	1a a7       	std	Y+42, r17	; 0x2a
    320c:	31 e0       	ldi	r19, 0x01	; 1
    320e:	3b a7       	std	Y+43, r19	; 0x2b
    3210:	4a a5       	ldd	r20, Y+42	; 0x2a
    3212:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3214:	54 17       	cp	r21, r20
    3216:	08 f0       	brcs	.+2      	; 0x321a <CALC_DisplayResult+0x188>
    3218:	1b a6       	std	Y+43, r1	; 0x2b
    321a:	69 a5       	ldd	r22, Y+41	; 0x29
    321c:	7b a5       	ldd	r23, Y+43	; 0x2b
    321e:	67 2b       	or	r22, r23
    3220:	69 a7       	std	Y+41, r22	; 0x29
    3222:	8a a5       	ldd	r24, Y+42	; 0x2a
    3224:	8b 8f       	std	Y+27, r24	; 0x1b
    3226:	9c 89       	ldd	r25, Y+20	; 0x14
    3228:	0c 85       	ldd	r16, Y+12	; 0x0c
    322a:	90 1b       	sub	r25, r16
    322c:	9c 8f       	std	Y+28, r25	; 0x1c
    322e:	11 e0       	ldi	r17, 0x01	; 1
    3230:	1c a7       	std	Y+44, r17	; 0x2c
    3232:	2c 8d       	ldd	r18, Y+28	; 0x1c
    3234:	3c 89       	ldd	r19, Y+20	; 0x14
    3236:	32 17       	cp	r19, r18
    3238:	08 f0       	brcs	.+2      	; 0x323c <CALC_DisplayResult+0x1aa>
    323a:	1c a6       	std	Y+44, r1	; 0x2c
    323c:	4c 8d       	ldd	r20, Y+28	; 0x1c
    323e:	59 a5       	ldd	r21, Y+41	; 0x29
    3240:	45 1b       	sub	r20, r21
    3242:	4d a7       	std	Y+45, r20	; 0x2d
    3244:	61 e0       	ldi	r22, 0x01	; 1
    3246:	6e a7       	std	Y+46, r22	; 0x2e
    3248:	7d a5       	ldd	r23, Y+45	; 0x2d
    324a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    324c:	87 17       	cp	r24, r23
    324e:	08 f0       	brcs	.+2      	; 0x3252 <CALC_DisplayResult+0x1c0>
    3250:	1e a6       	std	Y+46, r1	; 0x2e
    3252:	9c a5       	ldd	r25, Y+44	; 0x2c
    3254:	0e a5       	ldd	r16, Y+46	; 0x2e
    3256:	90 2b       	or	r25, r16
    3258:	9c a7       	std	Y+44, r25	; 0x2c
    325a:	1d a5       	ldd	r17, Y+45	; 0x2d
    325c:	1c 8f       	std	Y+28, r17	; 0x1c
    325e:	2d 89       	ldd	r18, Y+21	; 0x15
    3260:	3d 85       	ldd	r19, Y+13	; 0x0d
    3262:	23 1b       	sub	r18, r19
    3264:	2d 8f       	std	Y+29, r18	; 0x1d
    3266:	41 e0       	ldi	r20, 0x01	; 1
    3268:	4f a7       	std	Y+47, r20	; 0x2f
    326a:	5d 8d       	ldd	r21, Y+29	; 0x1d
    326c:	6d 89       	ldd	r22, Y+21	; 0x15
    326e:	65 17       	cp	r22, r21
    3270:	08 f0       	brcs	.+2      	; 0x3274 <CALC_DisplayResult+0x1e2>
    3272:	1f a6       	std	Y+47, r1	; 0x2f
    3274:	7d 8d       	ldd	r23, Y+29	; 0x1d
    3276:	8c a5       	ldd	r24, Y+44	; 0x2c
    3278:	78 1b       	sub	r23, r24
    327a:	78 ab       	std	Y+48, r23	; 0x30
    327c:	91 e0       	ldi	r25, 0x01	; 1
    327e:	99 ab       	std	Y+49, r25	; 0x31
    3280:	08 a9       	ldd	r16, Y+48	; 0x30
    3282:	1d 8d       	ldd	r17, Y+29	; 0x1d
    3284:	10 17       	cp	r17, r16
    3286:	08 f0       	brcs	.+2      	; 0x328a <CALC_DisplayResult+0x1f8>
    3288:	19 aa       	std	Y+49, r1	; 0x31
    328a:	2f a5       	ldd	r18, Y+47	; 0x2f
    328c:	39 a9       	ldd	r19, Y+49	; 0x31
    328e:	23 2b       	or	r18, r19
    3290:	2f a7       	std	Y+47, r18	; 0x2f
    3292:	48 a9       	ldd	r20, Y+48	; 0x30
    3294:	4d 8f       	std	Y+29, r20	; 0x1d
    3296:	5e 89       	ldd	r21, Y+22	; 0x16
    3298:	6e 85       	ldd	r22, Y+14	; 0x0e
    329a:	56 1b       	sub	r21, r22
    329c:	5e 8f       	std	Y+30, r21	; 0x1e
    329e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    32a0:	7f a5       	ldd	r23, Y+47	; 0x2f
    32a2:	87 1b       	sub	r24, r23
    32a4:	8e 8f       	std	Y+30, r24	; 0x1e
    32a6:	af 88       	ldd	r10, Y+23	; 0x17
    32a8:	b8 8c       	ldd	r11, Y+24	; 0x18
    32aa:	c9 8c       	ldd	r12, Y+25	; 0x19
    32ac:	da 8c       	ldd	r13, Y+26	; 0x1a
    32ae:	eb 8c       	ldd	r14, Y+27	; 0x1b
    32b0:	fc 8c       	ldd	r15, Y+28	; 0x1c
    32b2:	0d 8d       	ldd	r16, Y+29	; 0x1d
    32b4:	1e 8d       	ldd	r17, Y+30	; 0x1e
    32b6:	2a 2d       	mov	r18, r10
    32b8:	3b 2d       	mov	r19, r11
    32ba:	4c 2d       	mov	r20, r12
    32bc:	5d 2d       	mov	r21, r13
    32be:	6e 2d       	mov	r22, r14
    32c0:	7f 2d       	mov	r23, r15
    32c2:	80 2f       	mov	r24, r16
    32c4:	91 2f       	mov	r25, r17
    32c6:	0e 94 6d 00 	call	0xda	; 0xda <__floatdisf>
    32ca:	dc 01       	movw	r26, r24
    32cc:	cb 01       	movw	r24, r22
    32ce:	ed 81       	ldd	r30, Y+5	; 0x05
    32d0:	fe 81       	ldd	r31, Y+6	; 0x06
    32d2:	80 83       	st	Z, r24
    32d4:	91 83       	std	Z+1, r25	; 0x01
    32d6:	a2 83       	std	Z+2, r26	; 0x02
    32d8:	b3 83       	std	Z+3, r27	; 0x03
		LCD_enuSendNumber((u32) *Copy_pf32Result);
    32da:	ed 81       	ldd	r30, Y+5	; 0x05
    32dc:	fe 81       	ldd	r31, Y+6	; 0x06
    32de:	80 81       	ld	r24, Z
    32e0:	91 81       	ldd	r25, Z+1	; 0x01
    32e2:	a2 81       	ldd	r26, Z+2	; 0x02
    32e4:	b3 81       	ldd	r27, Z+3	; 0x03
    32e6:	bc 01       	movw	r22, r24
    32e8:	cd 01       	movw	r24, r26
    32ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    32ee:	dc 01       	movw	r26, r24
    32f0:	cb 01       	movw	r24, r22
    32f2:	bc 01       	movw	r22, r24
    32f4:	cd 01       	movw	r24, r26
    32f6:	0e 94 7d 13 	call	0x26fa	; 0x26fa <LCD_enuSendNumber>
    32fa:	5b c0       	rjmp	.+182    	; 0x33b2 <CALC_DisplayResult+0x320>
	}
	else
	{
		Local_u32ResultSplit = (u32) *Copy_pf32Result;
    32fc:	ed 81       	ldd	r30, Y+5	; 0x05
    32fe:	fe 81       	ldd	r31, Y+6	; 0x06
    3300:	80 81       	ld	r24, Z
    3302:	91 81       	ldd	r25, Z+1	; 0x01
    3304:	a2 81       	ldd	r26, Z+2	; 0x02
    3306:	b3 81       	ldd	r27, Z+3	; 0x03
    3308:	bc 01       	movw	r22, r24
    330a:	cd 01       	movw	r24, r26
    330c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3310:	dc 01       	movw	r26, r24
    3312:	cb 01       	movw	r24, r22
    3314:	89 83       	std	Y+1, r24	; 0x01
    3316:	9a 83       	std	Y+2, r25	; 0x02
    3318:	ab 83       	std	Y+3, r26	; 0x03
    331a:	bc 83       	std	Y+4, r27	; 0x04
		Local_u32ResultSplit = (*Copy_pf32Result - Local_u32ResultSplit) * 10;
    331c:	ed 81       	ldd	r30, Y+5	; 0x05
    331e:	fe 81       	ldd	r31, Y+6	; 0x06
    3320:	e0 80       	ld	r14, Z
    3322:	f1 80       	ldd	r15, Z+1	; 0x01
    3324:	02 81       	ldd	r16, Z+2	; 0x02
    3326:	13 81       	ldd	r17, Z+3	; 0x03
    3328:	69 81       	ldd	r22, Y+1	; 0x01
    332a:	7a 81       	ldd	r23, Y+2	; 0x02
    332c:	8b 81       	ldd	r24, Y+3	; 0x03
    332e:	9c 81       	ldd	r25, Y+4	; 0x04
    3330:	0e 94 2a 06 	call	0xc54	; 0xc54 <__floatunsisf>
    3334:	9b 01       	movw	r18, r22
    3336:	ac 01       	movw	r20, r24
    3338:	c8 01       	movw	r24, r16
    333a:	b7 01       	movw	r22, r14
    333c:	0e 94 b4 02 	call	0x568	; 0x568 <__subsf3>
    3340:	dc 01       	movw	r26, r24
    3342:	cb 01       	movw	r24, r22
    3344:	bc 01       	movw	r22, r24
    3346:	cd 01       	movw	r24, r26
    3348:	20 e0       	ldi	r18, 0x00	; 0
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	40 e2       	ldi	r20, 0x20	; 32
    334e:	51 e4       	ldi	r21, 0x41	; 65
    3350:	0e 94 12 03 	call	0x624	; 0x624 <__mulsf3>
    3354:	dc 01       	movw	r26, r24
    3356:	cb 01       	movw	r24, r22
    3358:	bc 01       	movw	r22, r24
    335a:	cd 01       	movw	r24, r26
    335c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3360:	dc 01       	movw	r26, r24
    3362:	cb 01       	movw	r24, r22
    3364:	89 83       	std	Y+1, r24	; 0x01
    3366:	9a 83       	std	Y+2, r25	; 0x02
    3368:	ab 83       	std	Y+3, r26	; 0x03
    336a:	bc 83       	std	Y+4, r27	; 0x04
		LCD_enuSendNumber((u32) *Copy_pf32Result);
    336c:	ed 81       	ldd	r30, Y+5	; 0x05
    336e:	fe 81       	ldd	r31, Y+6	; 0x06
    3370:	80 81       	ld	r24, Z
    3372:	91 81       	ldd	r25, Z+1	; 0x01
    3374:	a2 81       	ldd	r26, Z+2	; 0x02
    3376:	b3 81       	ldd	r27, Z+3	; 0x03
    3378:	bc 01       	movw	r22, r24
    337a:	cd 01       	movw	r24, r26
    337c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3380:	dc 01       	movw	r26, r24
    3382:	cb 01       	movw	r24, r22
    3384:	bc 01       	movw	r22, r24
    3386:	cd 01       	movw	r24, r26
    3388:	0e 94 7d 13 	call	0x26fa	; 0x26fa <LCD_enuSendNumber>
		if (Local_u32ResultSplit > 0)
    338c:	89 81       	ldd	r24, Y+1	; 0x01
    338e:	9a 81       	ldd	r25, Y+2	; 0x02
    3390:	ab 81       	ldd	r26, Y+3	; 0x03
    3392:	bc 81       	ldd	r27, Y+4	; 0x04
    3394:	00 97       	sbiw	r24, 0x00	; 0
    3396:	a1 05       	cpc	r26, r1
    3398:	b1 05       	cpc	r27, r1
    339a:	59 f0       	breq	.+22     	; 0x33b2 <CALC_DisplayResult+0x320>
		{
			LCD_enuSendCharacter('.');
    339c:	8e e2       	ldi	r24, 0x2E	; 46
    339e:	0e 94 16 10 	call	0x202c	; 0x202c <LCD_enuSendCharacter>
			LCD_enuSendNumber(Local_u32ResultSplit);
    33a2:	89 81       	ldd	r24, Y+1	; 0x01
    33a4:	9a 81       	ldd	r25, Y+2	; 0x02
    33a6:	ab 81       	ldd	r26, Y+3	; 0x03
    33a8:	bc 81       	ldd	r27, Y+4	; 0x04
    33aa:	bc 01       	movw	r22, r24
    33ac:	cd 01       	movw	r24, r26
    33ae:	0e 94 7d 13 	call	0x26fa	; 0x26fa <LCD_enuSendNumber>
		}
	}
}
    33b2:	e1 96       	adiw	r28, 0x31	; 49
    33b4:	0f b6       	in	r0, 0x3f	; 63
    33b6:	f8 94       	cli
    33b8:	de bf       	out	0x3e, r29	; 62
    33ba:	0f be       	out	0x3f, r0	; 63
    33bc:	cd bf       	out	0x3d, r28	; 61
    33be:	cf 91       	pop	r28
    33c0:	df 91       	pop	r29
    33c2:	1f 91       	pop	r17
    33c4:	0f 91       	pop	r16
    33c6:	ff 90       	pop	r15
    33c8:	ef 90       	pop	r14
    33ca:	df 90       	pop	r13
    33cc:	cf 90       	pop	r12
    33ce:	bf 90       	pop	r11
    33d0:	af 90       	pop	r10
    33d2:	08 95       	ret

000033d4 <main>:
#include "../HAL/LCD/LCD_int.h"
#include "../HAL/KEYPAD/KEYPAD_int.h"
#include"CALC_APP/CALC_APP_int.h"

void main()
{
    33d4:	df 93       	push	r29
    33d6:	cf 93       	push	r28
    33d8:	cd b7       	in	r28, 0x3d	; 61
    33da:	de b7       	in	r29, 0x3e	; 62
    33dc:	69 97       	sbiw	r28, 0x19	; 25
    33de:	0f b6       	in	r0, 0x3f	; 63
    33e0:	f8 94       	cli
    33e2:	de bf       	out	0x3e, r29	; 62
    33e4:	0f be       	out	0x3f, r0	; 63
    33e6:	cd bf       	out	0x3d, r28	; 61

	u8 Local_u8InputCache[IP_CACHE_SZ] =
	{ IP_INIT, IP_INIT, IP_INIT, IP_INIT, IP_INIT,
	IP_INIT, IP_INIT, IP_INIT, IP_INIT, IP_INIT,
	IP_INIT, IP_INIT, IP_INIT, IP_INIT, IP_INIT, IP_INIT };
    33e8:	ce 01       	movw	r24, r28
    33ea:	01 96       	adiw	r24, 0x01	; 1
    33ec:	9e 8b       	std	Y+22, r25	; 0x16
    33ee:	8d 8b       	std	Y+21, r24	; 0x15
    33f0:	e0 e8       	ldi	r30, 0x80	; 128
    33f2:	f1 e0       	ldi	r31, 0x01	; 1
    33f4:	f8 8f       	std	Y+24, r31	; 0x18
    33f6:	ef 8b       	std	Y+23, r30	; 0x17
    33f8:	f0 e1       	ldi	r31, 0x10	; 16
    33fa:	f9 8f       	std	Y+25, r31	; 0x19
    33fc:	ef 89       	ldd	r30, Y+23	; 0x17
    33fe:	f8 8d       	ldd	r31, Y+24	; 0x18
    3400:	00 80       	ld	r0, Z
    3402:	8f 89       	ldd	r24, Y+23	; 0x17
    3404:	98 8d       	ldd	r25, Y+24	; 0x18
    3406:	01 96       	adiw	r24, 0x01	; 1
    3408:	98 8f       	std	Y+24, r25	; 0x18
    340a:	8f 8b       	std	Y+23, r24	; 0x17
    340c:	ed 89       	ldd	r30, Y+21	; 0x15
    340e:	fe 89       	ldd	r31, Y+22	; 0x16
    3410:	00 82       	st	Z, r0
    3412:	8d 89       	ldd	r24, Y+21	; 0x15
    3414:	9e 89       	ldd	r25, Y+22	; 0x16
    3416:	01 96       	adiw	r24, 0x01	; 1
    3418:	9e 8b       	std	Y+22, r25	; 0x16
    341a:	8d 8b       	std	Y+21, r24	; 0x15
    341c:	99 8d       	ldd	r25, Y+25	; 0x19
    341e:	91 50       	subi	r25, 0x01	; 1
    3420:	99 8f       	std	Y+25, r25	; 0x19
    3422:	e9 8d       	ldd	r30, Y+25	; 0x19
    3424:	ee 23       	and	r30, r30
    3426:	51 f7       	brne	.-44     	; 0x33fc <main+0x28>
	f32 Local_f32Result = 0;
    3428:	80 e0       	ldi	r24, 0x00	; 0
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	a0 e0       	ldi	r26, 0x00	; 0
    342e:	b0 e0       	ldi	r27, 0x00	; 0
    3430:	89 8b       	std	Y+17, r24	; 0x11
    3432:	9a 8b       	std	Y+18, r25	; 0x12
    3434:	ab 8b       	std	Y+19, r26	; 0x13
    3436:	bc 8b       	std	Y+20, r27	; 0x14

	LCD_vidInit();
    3438:	0e 94 07 0c 	call	0x180e	; 0x180e <LCD_vidInit>
	KEYPAD_vidInit();
    343c:	0e 94 08 15 	call	0x2a10	; 0x2a10 <KEYPAD_vidInit>

	/*super loop*/
	while (TRUE)
	{
		CALC_vidGetInput(Local_u8InputCache, IP_CACHE_SZ);
    3440:	ce 01       	movw	r24, r28
    3442:	01 96       	adiw	r24, 0x01	; 1
    3444:	60 e1       	ldi	r22, 0x10	; 16
    3446:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <CALC_vidGetInput>
		CALC_vidCalculate(Local_u8InputCache, IP_CACHE_SZ, &Local_f32Result);
    344a:	9e 01       	movw	r18, r28
    344c:	2f 5e       	subi	r18, 0xEF	; 239
    344e:	3f 4f       	sbci	r19, 0xFF	; 255
    3450:	ce 01       	movw	r24, r28
    3452:	01 96       	adiw	r24, 0x01	; 1
    3454:	60 e1       	ldi	r22, 0x10	; 16
    3456:	a9 01       	movw	r20, r18
    3458:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <CALC_vidCalculate>
		CALC_DisplayResult(&Local_f32Result);
    345c:	ce 01       	movw	r24, r28
    345e:	41 96       	adiw	r24, 0x11	; 17
    3460:	0e 94 49 18 	call	0x3092	; 0x3092 <CALC_DisplayResult>
    3464:	ed cf       	rjmp	.-38     	; 0x3440 <main+0x6c>

00003466 <__udivmodsi4>:
    3466:	a1 e2       	ldi	r26, 0x21	; 33
    3468:	1a 2e       	mov	r1, r26
    346a:	aa 1b       	sub	r26, r26
    346c:	bb 1b       	sub	r27, r27
    346e:	fd 01       	movw	r30, r26
    3470:	0d c0       	rjmp	.+26     	; 0x348c <__udivmodsi4_ep>

00003472 <__udivmodsi4_loop>:
    3472:	aa 1f       	adc	r26, r26
    3474:	bb 1f       	adc	r27, r27
    3476:	ee 1f       	adc	r30, r30
    3478:	ff 1f       	adc	r31, r31
    347a:	a2 17       	cp	r26, r18
    347c:	b3 07       	cpc	r27, r19
    347e:	e4 07       	cpc	r30, r20
    3480:	f5 07       	cpc	r31, r21
    3482:	20 f0       	brcs	.+8      	; 0x348c <__udivmodsi4_ep>
    3484:	a2 1b       	sub	r26, r18
    3486:	b3 0b       	sbc	r27, r19
    3488:	e4 0b       	sbc	r30, r20
    348a:	f5 0b       	sbc	r31, r21

0000348c <__udivmodsi4_ep>:
    348c:	66 1f       	adc	r22, r22
    348e:	77 1f       	adc	r23, r23
    3490:	88 1f       	adc	r24, r24
    3492:	99 1f       	adc	r25, r25
    3494:	1a 94       	dec	r1
    3496:	69 f7       	brne	.-38     	; 0x3472 <__udivmodsi4_loop>
    3498:	60 95       	com	r22
    349a:	70 95       	com	r23
    349c:	80 95       	com	r24
    349e:	90 95       	com	r25
    34a0:	9b 01       	movw	r18, r22
    34a2:	ac 01       	movw	r20, r24
    34a4:	bd 01       	movw	r22, r26
    34a6:	cf 01       	movw	r24, r30
    34a8:	08 95       	ret

000034aa <__prologue_saves__>:
    34aa:	2f 92       	push	r2
    34ac:	3f 92       	push	r3
    34ae:	4f 92       	push	r4
    34b0:	5f 92       	push	r5
    34b2:	6f 92       	push	r6
    34b4:	7f 92       	push	r7
    34b6:	8f 92       	push	r8
    34b8:	9f 92       	push	r9
    34ba:	af 92       	push	r10
    34bc:	bf 92       	push	r11
    34be:	cf 92       	push	r12
    34c0:	df 92       	push	r13
    34c2:	ef 92       	push	r14
    34c4:	ff 92       	push	r15
    34c6:	0f 93       	push	r16
    34c8:	1f 93       	push	r17
    34ca:	cf 93       	push	r28
    34cc:	df 93       	push	r29
    34ce:	cd b7       	in	r28, 0x3d	; 61
    34d0:	de b7       	in	r29, 0x3e	; 62
    34d2:	ca 1b       	sub	r28, r26
    34d4:	db 0b       	sbc	r29, r27
    34d6:	0f b6       	in	r0, 0x3f	; 63
    34d8:	f8 94       	cli
    34da:	de bf       	out	0x3e, r29	; 62
    34dc:	0f be       	out	0x3f, r0	; 63
    34de:	cd bf       	out	0x3d, r28	; 61
    34e0:	09 94       	ijmp

000034e2 <__epilogue_restores__>:
    34e2:	2a 88       	ldd	r2, Y+18	; 0x12
    34e4:	39 88       	ldd	r3, Y+17	; 0x11
    34e6:	48 88       	ldd	r4, Y+16	; 0x10
    34e8:	5f 84       	ldd	r5, Y+15	; 0x0f
    34ea:	6e 84       	ldd	r6, Y+14	; 0x0e
    34ec:	7d 84       	ldd	r7, Y+13	; 0x0d
    34ee:	8c 84       	ldd	r8, Y+12	; 0x0c
    34f0:	9b 84       	ldd	r9, Y+11	; 0x0b
    34f2:	aa 84       	ldd	r10, Y+10	; 0x0a
    34f4:	b9 84       	ldd	r11, Y+9	; 0x09
    34f6:	c8 84       	ldd	r12, Y+8	; 0x08
    34f8:	df 80       	ldd	r13, Y+7	; 0x07
    34fa:	ee 80       	ldd	r14, Y+6	; 0x06
    34fc:	fd 80       	ldd	r15, Y+5	; 0x05
    34fe:	0c 81       	ldd	r16, Y+4	; 0x04
    3500:	1b 81       	ldd	r17, Y+3	; 0x03
    3502:	aa 81       	ldd	r26, Y+2	; 0x02
    3504:	b9 81       	ldd	r27, Y+1	; 0x01
    3506:	ce 0f       	add	r28, r30
    3508:	d1 1d       	adc	r29, r1
    350a:	0f b6       	in	r0, 0x3f	; 63
    350c:	f8 94       	cli
    350e:	de bf       	out	0x3e, r29	; 62
    3510:	0f be       	out	0x3f, r0	; 63
    3512:	cd bf       	out	0x3d, r28	; 61
    3514:	ed 01       	movw	r28, r26
    3516:	08 95       	ret

00003518 <_exit>:
    3518:	f8 94       	cli

0000351a <__stop_program>:
    351a:	ff cf       	rjmp	.-2      	; 0x351a <__stop_program>
